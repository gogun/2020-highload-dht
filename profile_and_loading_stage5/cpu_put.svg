<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822"
	 xmlns="http://www.w3.org/2000/svg">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="805"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="805"> </text>
<g id="frames">
<g>
<title>all (3,432 samples, 100.00%)</title><rect x="10.0" y="771.0" width="1180.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.0" y="782.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="10.0" y="755.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="13.0" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="739.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="10.0" y="723.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="734.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="10.0" y="707.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="10.0" y="691.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="702.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="10.0" y="675.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="13.0" y="686.0"></text>
</g>
<g>
<title>Monitor::lock(Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="659.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="10.0" y="643.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="10.3" y="755.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="13.3" y="766.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="10.3" y="739.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.3" y="750.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (1 samples, 0.03%)</title><rect x="10.3" y="723.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.3" y="734.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="10.3" y="707.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="13.3" y="718.0"></text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.03%)</title><rect x="10.7" y="755.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.7" y="766.0"></text>
</g>
<g>
<title>[not_walkable_Java] (18 samples, 0.52%)</title><rect x="11.0" y="755.0" width="6.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="14.0" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (17 samples, 0.50%)</title><rect x="11.0" y="739.0" width="5.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.0" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (17 samples, 0.50%)</title><rect x="11.0" y="723.0" width="5.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="14.0" y="734.0"></text>
</g>
<g>
<title>CodeBlob::is_compiled() const (1 samples, 0.03%)</title><rect x="11.0" y="707.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.0" y="718.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (5 samples, 0.15%)</title><rect x="11.4" y="707.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="14.4" y="718.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.06%)</title><rect x="11.4" y="691.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="14.4" y="702.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.09%)</title><rect x="12.1" y="691.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="15.1" y="702.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (11 samples, 0.32%)</title><rect x="13.1" y="707.0" width="3.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="16.1" y="718.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (2 samples, 0.06%)</title><rect x="13.8" y="691.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="16.8" y="702.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (1 samples, 0.03%)</title><rect x="14.5" y="691.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="17.5" y="702.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (3 samples, 0.09%)</title><rect x="14.8" y="691.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="17.8" y="702.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (3 samples, 0.09%)</title><rect x="15.8" y="691.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="18.8" y="702.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.06%)</title><rect x="15.8" y="675.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="18.8" y="686.0"></text>
</g>
<g>
<title>nmethod::is_zombie() const (1 samples, 0.03%)</title><rect x="16.5" y="675.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="19.5" y="686.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.03%)</title><rect x="16.9" y="739.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="19.9" y="750.0"></text>
</g>
<g>
<title>asm_sysvec_reschedule_ipi (1 samples, 0.03%)</title><rect x="16.9" y="723.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="19.9" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="16.9" y="707.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="19.9" y="718.0"></text>
</g>
<g>
<title>__prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="16.9" y="691.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="19.9" y="702.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.12%)</title><rect x="17.2" y="755.0" width="1.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="20.2" y="766.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="17.2" y="739.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="20.2" y="750.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.0 (1 samples, 0.03%)</title><rect x="17.6" y="739.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="20.6" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="17.6" y="723.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="20.6" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="17.6" y="707.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="20.6" y="718.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (1 samples, 0.03%)</title><rect x="17.9" y="739.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="20.9" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="17.9" y="723.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="20.9" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="17.9" y="707.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="20.9" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="17.9" y="691.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="20.9" y="702.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="17.9" y="675.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="20.9" y="686.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="17.9" y="659.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="20.9" y="670.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.03%)</title><rect x="17.9" y="643.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="20.9" y="654.0"></text>
</g>
<g>
<title>plist_add (1 samples, 0.03%)</title><rect x="17.9" y="627.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="20.9" y="638.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.03%)</title><rect x="18.3" y="739.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="21.3" y="750.0"></text>
</g>
<g>
<title>[unknown_Java] (10 samples, 0.29%)</title><rect x="18.6" y="755.0" width="3.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="21.6" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.03%)</title><rect x="18.6" y="739.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="21.6" y="750.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="18.9" y="739.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="21.9" y="750.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.03%)</title><rect x="18.9" y="723.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="21.9" y="734.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="19.3" y="739.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="22.3" y="750.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (5 samples, 0.15%)</title><rect x="19.6" y="739.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="22.6" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_signal (2 samples, 0.06%)</title><rect x="21.3" y="739.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="24.3" y="750.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.06%)</title><rect x="21.3" y="723.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="24.3" y="734.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.06%)</title><rect x="21.3" y="707.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="24.3" y="718.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="21.7" y="691.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="24.7" y="702.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="21.7" y="675.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="24.7" y="686.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="21.7" y="659.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="24.7" y="670.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="21.7" y="643.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="24.7" y="654.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="21.7" y="627.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="24.7" y="638.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="21.7" y="611.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="24.7" y="622.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,535 samples, 73.86%)</title><rect x="22.0" y="755.0" width="871.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="25.0" y="766.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,535 samples, 73.86%)</title><rect x="22.0" y="739.0" width="871.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.0" y="750.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,535 samples, 73.86%)</title><rect x="22.0" y="723.0" width="871.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="25.0" y="734.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (5 samples, 0.15%)</title><rect x="24.4" y="707.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="27.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.15%)</title><rect x="24.4" y="691.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="27.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.15%)</title><rect x="24.4" y="675.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="27.4" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl.handleRequest (2 samples, 0.06%)</title><rect x="25.5" y="659.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="28.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (314 samples, 9.15%)</title><rect x="26.2" y="707.0" width="107.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="29.2" y="718.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (313 samples, 9.12%)</title><rect x="26.5" y="691.0" width="107.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.5" y="702.0">java/util/con..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.dequeue (10 samples, 0.29%)</title><rect x="28.9" y="675.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.03%)</title><rect x="31.0" y="659.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="34.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (3 samples, 0.09%)</title><rect x="31.3" y="659.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.09%)</title><rect x="31.3" y="643.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (233 samples, 6.79%)</title><rect x="32.3" y="675.0" width="80.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="35.3" y="686.0">java/util..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (11 samples, 0.32%)</title><rect x="32.7" y="659.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="35.7" y="670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.09%)</title><rect x="35.4" y="643.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="38.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (7 samples, 0.20%)</title><rect x="36.5" y="659.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="39.5" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.12%)</title><rect x="37.5" y="643.0" width="1.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="40.5" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="37.5" y="627.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="40.5" y="638.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.09%)</title><rect x="37.8" y="627.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="40.8" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.09%)</title><rect x="37.8" y="611.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="40.8" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.09%)</title><rect x="37.8" y="595.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="40.8" y="606.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.09%)</title><rect x="37.8" y="579.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="40.8" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.09%)</title><rect x="37.8" y="563.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="40.8" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="37.8" y="547.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="40.8" y="558.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.06%)</title><rect x="38.2" y="547.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="41.2" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.03%)</title><rect x="38.2" y="531.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="41.2" y="542.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="38.2" y="515.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="41.2" y="526.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="38.5" y="531.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="41.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.17%)</title><rect x="38.9" y="659.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="41.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.12%)</title><rect x="39.6" y="643.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="42.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.12%)</title><rect x="39.6" y="627.0" width="1.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.09%)</title><rect x="39.9" y="611.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="42.9" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.09%)</title><rect x="39.9" y="595.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="42.9" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (3 samples, 0.09%)</title><rect x="39.9" y="579.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.9" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (31 samples, 0.90%)</title><rect x="40.9" y="659.0" width="10.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="43.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (31 samples, 0.90%)</title><rect x="40.9" y="643.0" width="10.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="43.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (31 samples, 0.90%)</title><rect x="40.9" y="627.0" width="10.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="43.9" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (31 samples, 0.90%)</title><rect x="40.9" y="611.0" width="10.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="43.9" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (30 samples, 0.87%)</title><rect x="41.3" y="595.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="44.3" y="606.0"></text>
</g>
<g>
<title>Unsafe_Unpark (8 samples, 0.23%)</title><rect x="41.3" y="579.0" width="2.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="44.3" y="590.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="42.0" y="563.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="45.0" y="574.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.06%)</title><rect x="42.3" y="563.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="45.3" y="574.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.03%)</title><rect x="43.0" y="563.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="46.0" y="574.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="43.4" y="563.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="46.4" y="574.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="43.7" y="563.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="46.7" y="574.0"></text>
</g>
<g>
<title>__pthread_cond_signal (22 samples, 0.64%)</title><rect x="44.0" y="579.0" width="7.6" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="47.0" y="590.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (20 samples, 0.58%)</title><rect x="44.7" y="563.0" width="6.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="47.7" y="574.0"></text>
</g>
<g>
<title>do_syscall_64 (20 samples, 0.58%)</title><rect x="44.7" y="547.0" width="6.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="47.7" y="558.0"></text>
</g>
<g>
<title>__syscall_return_slowpath (2 samples, 0.06%)</title><rect x="45.1" y="531.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="48.1" y="542.0"></text>
</g>
<g>
<title>__audit_syscall_exit (2 samples, 0.06%)</title><rect x="45.1" y="515.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="48.1" y="526.0"></text>
</g>
<g>
<title>unroll_tree_refs (1 samples, 0.03%)</title><rect x="45.4" y="499.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="48.4" y="510.0"></text>
</g>
<g>
<title>__x64_sys_futex (17 samples, 0.50%)</title><rect x="45.8" y="531.0" width="5.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="48.8" y="542.0"></text>
</g>
<g>
<title>do_futex (17 samples, 0.50%)</title><rect x="45.8" y="515.0" width="5.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="48.8" y="526.0"></text>
</g>
<g>
<title>futex_wake (17 samples, 0.50%)</title><rect x="45.8" y="499.0" width="5.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="48.8" y="510.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="46.1" y="483.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="49.1" y="494.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.03%)</title><rect x="46.4" y="483.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="49.4" y="494.0"></text>
</g>
<g>
<title>wake_up_q (14 samples, 0.41%)</title><rect x="46.8" y="483.0" width="4.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="49.8" y="494.0"></text>
</g>
<g>
<title>try_to_wake_up (14 samples, 0.41%)</title><rect x="46.8" y="467.0" width="4.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="49.8" y="478.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (14 samples, 0.41%)</title><rect x="46.8" y="451.0" width="4.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="49.8" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (1 samples, 0.03%)</title><rect x="51.6" y="659.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="54.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (176 samples, 5.13%)</title><rect x="51.9" y="659.0" width="60.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.9" y="670.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (175 samples, 5.10%)</title><rect x="52.3" y="643.0" width="60.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.3" y="654.0">jdk/in..</text>
</g>
<g>
<title>Unsafe_Park (70 samples, 2.04%)</title><rect x="53.3" y="627.0" width="24.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="56.3" y="638.0">U..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="56.8" y="611.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="59.8" y="622.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.06%)</title><rect x="57.1" y="611.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="60.1" y="622.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (21 samples, 0.61%)</title><rect x="57.8" y="611.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="60.8" y="622.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (4 samples, 0.12%)</title><rect x="59.5" y="595.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="62.5" y="606.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (8 samples, 0.23%)</title><rect x="60.9" y="595.0" width="2.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="63.9" y="606.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) [clone .part.0] (1 samples, 0.03%)</title><rect x="63.6" y="595.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="66.6" y="606.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="63.6" y="579.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="66.6" y="590.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="63.6" y="563.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="66.6" y="574.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.03%)</title><rect x="63.6" y="547.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="66.6" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.06%)</title><rect x="64.0" y="595.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="67.0" y="606.0"></text>
</g>
<g>
<title>asm_sysvec_reschedule_ipi (1 samples, 0.03%)</title><rect x="64.7" y="595.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="67.7" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="64.7" y="579.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="67.7" y="590.0"></text>
</g>
<g>
<title>__prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="64.7" y="563.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="67.7" y="574.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.06%)</title><rect x="65.0" y="611.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="68.0" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.09%)</title><rect x="65.7" y="611.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="68.7" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (1 samples, 0.03%)</title><rect x="66.7" y="611.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="69.7" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (26 samples, 0.76%)</title><rect x="67.1" y="611.0" width="8.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="70.1" y="622.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (20 samples, 0.58%)</title><rect x="69.1" y="595.0" width="6.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="72.1" y="606.0"></text>
</g>
<g>
<title>do_syscall_64 (20 samples, 0.58%)</title><rect x="69.1" y="579.0" width="6.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="72.1" y="590.0"></text>
</g>
<g>
<title>__syscall_return_slowpath (1 samples, 0.03%)</title><rect x="71.9" y="563.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="74.9" y="574.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.03%)</title><rect x="71.9" y="547.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="74.9" y="558.0"></text>
</g>
<g>
<title>__x64_sys_futex (9 samples, 0.26%)</title><rect x="72.2" y="563.0" width="3.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="75.2" y="574.0"></text>
</g>
<g>
<title>do_futex (8 samples, 0.23%)</title><rect x="72.6" y="547.0" width="2.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="75.6" y="558.0"></text>
</g>
<g>
<title>futex_wake (6 samples, 0.17%)</title><rect x="73.3" y="531.0" width="2.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="76.3" y="542.0"></text>
</g>
<g>
<title>hash_futex (2 samples, 0.06%)</title><rect x="74.6" y="515.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="77.6" y="526.0"></text>
</g>
<g>
<title>syscall_trace_enter (2 samples, 0.06%)</title><rect x="75.3" y="563.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="78.3" y="574.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (1 samples, 0.03%)</title><rect x="76.0" y="611.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="79.0" y="622.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (2 samples, 0.06%)</title><rect x="76.4" y="611.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="79.4" y="622.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="77.0" y="611.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="80.0" y="622.0"></text>
</g>
<g>
<title>[unknown] (97 samples, 2.83%)</title><rect x="77.4" y="627.0" width="33.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="80.4" y="638.0">[u..</text>
</g>
<g>
<title>__condvar_confirm_wakeup (2 samples, 0.06%)</title><rect x="77.4" y="611.0" width="0.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="80.4" y="622.0"></text>
</g>
<g>
<title>__condvar_dec_grefs (7 samples, 0.20%)</title><rect x="78.1" y="611.0" width="2.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="81.1" y="622.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.09%)</title><rect x="80.5" y="611.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="83.5" y="622.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (1 samples, 0.03%)</title><rect x="81.5" y="611.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="84.5" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (8 samples, 0.23%)</title><rect x="81.9" y="611.0" width="2.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="84.9" y="622.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (76 samples, 2.21%)</title><rect x="84.6" y="611.0" width="26.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="87.6" y="622.0">p..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (49 samples, 1.43%)</title><rect x="93.9" y="595.0" width="16.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="96.9" y="606.0"></text>
</g>
<g>
<title>do_syscall_64 (49 samples, 1.43%)</title><rect x="93.9" y="579.0" width="16.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="96.9" y="590.0"></text>
</g>
<g>
<title>__syscall_return_slowpath (3 samples, 0.09%)</title><rect x="94.9" y="563.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="97.9" y="574.0"></text>
</g>
<g>
<title>__audit_syscall_exit (3 samples, 0.09%)</title><rect x="94.9" y="547.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="97.9" y="558.0"></text>
</g>
<g>
<title>__x64_sys_futex (42 samples, 1.22%)</title><rect x="96.0" y="563.0" width="14.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="99.0" y="574.0"></text>
</g>
<g>
<title>do_futex (41 samples, 1.19%)</title><rect x="96.3" y="547.0" width="14.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="99.3" y="558.0"></text>
</g>
<g>
<title>futex_wait (37 samples, 1.08%)</title><rect x="97.7" y="531.0" width="12.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="100.7" y="542.0"></text>
</g>
<g>
<title>futex_wait_queue_me (22 samples, 0.64%)</title><rect x="98.4" y="515.0" width="7.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="101.4" y="526.0"></text>
</g>
<g>
<title>plist_add (1 samples, 0.03%)</title><rect x="98.7" y="499.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="101.7" y="510.0"></text>
</g>
<g>
<title>schedule (20 samples, 0.58%)</title><rect x="99.1" y="499.0" width="6.8" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="102.1" y="510.0"></text>
</g>
<g>
<title>__schedule (18 samples, 0.52%)</title><rect x="99.7" y="483.0" width="6.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="102.7" y="494.0"></text>
</g>
<g>
<title>finish_task_switch (15 samples, 0.44%)</title><rect x="100.8" y="467.0" width="5.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="103.8" y="478.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irq (13 samples, 0.38%)</title><rect x="101.5" y="451.0" width="4.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="104.5" y="462.0"></text>
</g>
<g>
<title>futex_wait_setup (13 samples, 0.38%)</title><rect x="105.9" y="515.0" width="4.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="108.9" y="526.0"></text>
</g>
<g>
<title>_raw_spin_lock (2 samples, 0.06%)</title><rect x="107.6" y="499.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="110.6" y="510.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.03%)</title><rect x="108.3" y="499.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="111.3" y="510.0"></text>
</g>
<g>
<title>get_futex_value_locked (4 samples, 0.12%)</title><rect x="108.7" y="499.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="111.7" y="510.0"></text>
</g>
<g>
<title>hash_futex (1 samples, 0.03%)</title><rect x="110.1" y="499.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="113.1" y="510.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.03%)</title><rect x="110.4" y="563.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="113.4" y="574.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (1 samples, 0.03%)</title><rect x="110.4" y="547.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="113.4" y="558.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.03%)</title><rect x="110.7" y="627.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="113.7" y="638.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.12%)</title><rect x="111.1" y="627.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="114.1" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (1 samples, 0.03%)</title><rect x="112.5" y="675.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="115.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (1 samples, 0.03%)</title><rect x="112.5" y="659.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="115.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (1 samples, 0.03%)</title><rect x="112.5" y="643.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="115.5" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (1 samples, 0.03%)</title><rect x="112.5" y="627.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="115.5" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (1 samples, 0.03%)</title><rect x="112.5" y="611.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="115.5" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="112.5" y="595.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="115.5" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="112.5" y="579.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="115.5" y="590.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.03%)</title><rect x="112.5" y="563.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="115.5" y="574.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="112.5" y="547.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="115.5" y="558.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="112.5" y="531.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="115.5" y="542.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="112.5" y="515.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="115.5" y="526.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="112.5" y="499.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="115.5" y="510.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="112.5" y="483.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="115.5" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (62 samples, 1.81%)</title><rect x="112.8" y="675.0" width="21.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="115.8" y="686.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (62 samples, 1.81%)</title><rect x="112.8" y="659.0" width="21.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="115.8" y="670.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (62 samples, 1.81%)</title><rect x="112.8" y="643.0" width="21.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="115.8" y="654.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (57 samples, 1.66%)</title><rect x="114.5" y="627.0" width="19.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="117.5" y="638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (57 samples, 1.66%)</title><rect x="114.5" y="611.0" width="19.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="117.5" y="622.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="114.9" y="595.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="117.9" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="115.2" y="595.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="118.2" y="606.0"></text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 0.17%)</title><rect x="115.6" y="595.0" width="2.0" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="118.6" y="606.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="115.6" y="579.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="118.6" y="590.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="115.9" y="579.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="118.9" y="590.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.03%)</title><rect x="116.2" y="579.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="119.2" y="590.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.06%)</title><rect x="116.6" y="579.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="119.6" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="117.3" y="579.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="120.3" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_signal (48 samples, 1.40%)</title><rect x="117.6" y="595.0" width="16.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="120.6" y="606.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (43 samples, 1.25%)</title><rect x="119.3" y="579.0" width="14.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="122.3" y="590.0"></text>
</g>
<g>
<title>do_syscall_64 (43 samples, 1.25%)</title><rect x="119.3" y="563.0" width="14.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="122.3" y="574.0"></text>
</g>
<g>
<title>__x64_sys_futex (39 samples, 1.14%)</title><rect x="120.4" y="547.0" width="13.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="123.4" y="558.0"></text>
</g>
<g>
<title>do_futex (38 samples, 1.11%)</title><rect x="120.7" y="531.0" width="13.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="123.7" y="542.0"></text>
</g>
<g>
<title>futex_wake (37 samples, 1.08%)</title><rect x="121.1" y="515.0" width="12.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="124.1" y="526.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.03%)</title><rect x="121.4" y="499.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="124.4" y="510.0"></text>
</g>
<g>
<title>wake_q_add_safe (1 samples, 0.03%)</title><rect x="121.7" y="499.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="124.7" y="510.0"></text>
</g>
<g>
<title>wake_up_q (34 samples, 0.99%)</title><rect x="122.1" y="499.0" width="11.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="125.1" y="510.0"></text>
</g>
<g>
<title>try_to_wake_up (34 samples, 0.99%)</title><rect x="122.1" y="483.0" width="11.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="125.1" y="494.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (33 samples, 0.96%)</title><rect x="122.1" y="467.0" width="11.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="125.1" y="478.0"></text>
</g>
<g>
<title>preempt_count_sub (1 samples, 0.03%)</title><rect x="133.4" y="467.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="136.4" y="478.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.03%)</title><rect x="133.8" y="547.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="136.8" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl$$Lambda$81/1300379497.run (2,209 samples, 64.36%)</title><rect x="134.1" y="707.0" width="759.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="137.1" y="718.0">ru/mail/polis/service/gogun/AsyncServiceImpl$$Lambda$81/1300379497.run</text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl.lambda$execute$1 (2,209 samples, 64.36%)</title><rect x="134.1" y="691.0" width="759.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="137.1" y="702.0">ru/mail/polis/service/gogun/AsyncServiceImpl.lambda$execute$1</text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl.handleRequest (2,209 samples, 64.36%)</title><rect x="134.1" y="675.0" width="759.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="137.1" y="686.0">ru/mail/polis/service/gogun/AsyncServiceImpl.handleRequest</text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.debug (3 samples, 0.09%)</title><rect x="136.2" y="659.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="139.2" y="670.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (2 samples, 0.06%)</title><rect x="136.5" y="643.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="139.5" y="654.0"></text>
</g>
<g>
<title>ch/qos/logback/classic/Logger.filterAndLog_1 (2 samples, 0.06%)</title><rect x="137.2" y="659.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="140.2" y="670.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (2 samples, 0.06%)</title><rect x="137.9" y="659.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="140.9" y="670.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2 samples, 0.06%)</title><rect x="137.9" y="643.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="140.9" y="654.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2 samples, 0.06%)</title><rect x="137.9" y="627.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="140.9" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.06%)</title><rect x="137.9" y="611.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="140.9" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.06%)</title><rect x="137.9" y="595.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="140.9" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.06%)</title><rect x="137.9" y="579.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="140.9" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="137.9" y="563.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="140.9" y="574.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="137.9" y="547.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="140.9" y="558.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.03%)</title><rect x="137.9" y="531.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="140.9" y="542.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="138.2" y="547.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="141.2" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="138.2" y="531.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="141.2" y="542.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="138.2" y="515.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="141.2" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.06%)</title><rect x="138.6" y="659.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="141.6" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2 samples, 0.06%)</title><rect x="138.6" y="643.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="141.6" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl$$Lambda$95/917187114.get$Lambda (2 samples, 0.06%)</title><rect x="138.6" y="627.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="141.6" y="638.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="138.6" y="611.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="141.6" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="138.9" y="611.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="141.9" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="138.9" y="595.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="141.9" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="138.9" y="579.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="141.9" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="138.9" y="563.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="141.9" y="574.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.03%)</title><rect x="138.9" y="547.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="141.9" y="558.0"></text>
</g>
<g>
<title>java/util/ArrayList.removeIf (5 samples, 0.15%)</title><rect x="139.3" y="659.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="142.3" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList.removeIf (5 samples, 0.15%)</title><rect x="139.3" y="643.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="142.3" y="654.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.09%)</title><rect x="141.0" y="659.0" width="1.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="144.0" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (20 samples, 0.58%)</title><rect x="142.0" y="659.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="145.0" y="670.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.32%)</title><rect x="142.7" y="643.0" width="3.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="145.7" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (9 samples, 0.26%)</title><rect x="143.4" y="627.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="146.4" y="638.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.12%)</title><rect x="144.8" y="611.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="147.8" y="622.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (4 samples, 0.12%)</title><rect x="144.8" y="595.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="147.8" y="606.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (4 samples, 0.12%)</title><rect x="144.8" y="579.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="147.8" y="590.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="146.2" y="611.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="149.2" y="622.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.20%)</title><rect x="146.5" y="643.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="149.5" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.20%)</title><rect x="146.5" y="627.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="149.5" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.06%)</title><rect x="146.5" y="611.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="149.5" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.06%)</title><rect x="146.5" y="595.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="149.5" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.06%)</title><rect x="146.5" y="579.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="149.5" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="146.5" y="563.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="149.5" y="574.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="146.5" y="547.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="149.5" y="558.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.03%)</title><rect x="146.5" y="531.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="149.5" y="542.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="146.8" y="547.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="149.8" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.03%)</title><rect x="146.8" y="531.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="149.8" y="542.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.15%)</title><rect x="147.2" y="611.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="150.2" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.06%)</title><rect x="148.2" y="595.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="151.2" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="148.6" y="579.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="151.6" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="148.6" y="563.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="151.6" y="574.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="148.6" y="547.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="151.6" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="148.6" y="531.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="151.6" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="148.6" y="515.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="151.6" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.06%)</title><rect x="148.9" y="659.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="151.9" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl.proxy (885 samples, 25.79%)</title><rect x="149.6" y="659.0" width="304.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="152.6" y="670.0">ru/mail/polis/service/gogun/AsyncServiceI..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="152.0" y="643.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="155.0" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1781241150.invoke (1 samples, 0.03%)</title><rect x="152.0" y="627.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="155.0" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="152.0" y="611.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="155.0" y="622.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (1 samples, 0.03%)</title><rect x="152.0" y="595.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="155.0" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="152.0" y="579.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="155.0" y="590.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="152.0" y="563.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="155.0" y="574.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="152.0" y="547.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="155.0" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="152.0" y="531.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="155.0" y="542.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.03%)</title><rect x="152.0" y="515.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="155.0" y="526.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="152.3" y="643.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="155.3" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="152.3" y="627.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="155.3" y="638.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="152.7" y="643.0" width="0.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="155.7" y="654.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.06%)</title><rect x="153.4" y="643.0" width="0.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="156.4" y="654.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (806 samples, 23.48%)</title><rect x="154.1" y="643.0" width="277.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="157.1" y="654.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="154.1" y="627.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="157.1" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (805 samples, 23.46%)</title><rect x="154.4" y="627.0" width="276.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="157.4" y="638.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (217 samples, 6.32%)</title><rect x="159.2" y="611.0" width="74.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="162.2" y="622.0">one/nio/..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (19 samples, 0.55%)</title><rect x="163.3" y="595.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="166.3" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (17 samples, 0.50%)</title><rect x="163.7" y="579.0" width="5.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="166.7" y="590.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab(Klass*, HeapWord*, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="163.7" y="563.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="166.7" y="574.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.03%)</title><rect x="164.0" y="563.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="167.0" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (13 samples, 0.38%)</title><rect x="164.4" y="563.0" width="4.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="167.4" y="574.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab(Klass*, HeapWord*, unsigned long, Thread*) (2 samples, 0.06%)</title><rect x="164.4" y="547.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="167.4" y="558.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (2 samples, 0.06%)</title><rect x="164.4" y="531.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="167.4" y="542.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (6 samples, 0.17%)</title><rect x="165.1" y="547.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="168.1" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (4 samples, 0.12%)</title><rect x="165.1" y="531.0" width="1.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="168.1" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.06%)</title><rect x="166.4" y="531.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="169.4" y="542.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.03%)</title><rect x="166.4" y="515.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="169.4" y="526.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.03%)</title><rect x="166.8" y="515.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="169.8" y="526.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="167.1" y="547.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="170.1" y="558.0"></text>
</g>
<g>
<title>__memset_avx2_erms (3 samples, 0.09%)</title><rect x="167.5" y="547.0" width="1.0" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="170.5" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr_slow (1 samples, 0.03%)</title><rect x="168.5" y="547.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="171.5" y="558.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.06%)</title><rect x="168.8" y="563.0" width="0.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="171.8" y="574.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="169.5" y="579.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="172.5" y="590.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="169.9" y="595.0" width="0.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="172.9" y="606.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.03%)</title><rect x="169.9" y="579.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="172.9" y="590.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (184 samples, 5.36%)</title><rect x="170.2" y="595.0" width="63.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="173.2" y="606.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (21 samples, 0.61%)</title><rect x="172.3" y="579.0" width="7.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="175.3" y="590.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.09%)</title><rect x="172.6" y="563.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="175.6" y="574.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (3 samples, 0.09%)</title><rect x="173.7" y="563.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="176.7" y="574.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.06%)</title><rect x="174.7" y="563.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="177.7" y="574.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (11 samples, 0.32%)</title><rect x="175.4" y="563.0" width="3.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="178.4" y="574.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="176.8" y="547.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="179.8" y="558.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (4 samples, 0.12%)</title><rect x="177.1" y="547.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="180.1" y="558.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.06%)</title><rect x="178.5" y="547.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="181.5" y="558.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.03%)</title><rect x="179.2" y="563.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="182.2" y="574.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (3 samples, 0.09%)</title><rect x="179.5" y="579.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="182.5" y="590.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (4 samples, 0.12%)</title><rect x="180.5" y="579.0" width="1.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="183.5" y="590.0"></text>
</g>
<g>
<title>__libc_recv (147 samples, 4.28%)</title><rect x="181.9" y="579.0" width="50.6" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="184.9" y="590.0">__lib..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (133 samples, 3.88%)</title><rect x="186.7" y="563.0" width="45.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="189.7" y="574.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (133 samples, 3.88%)</title><rect x="186.7" y="547.0" width="45.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="189.7" y="558.0">do_s..</text>
</g>
<g>
<title>__syscall_return_slowpath (3 samples, 0.09%)</title><rect x="189.5" y="531.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="192.5" y="542.0"></text>
</g>
<g>
<title>__audit_syscall_exit (3 samples, 0.09%)</title><rect x="189.5" y="515.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="192.5" y="526.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (121 samples, 3.53%)</title><rect x="190.5" y="531.0" width="41.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="193.5" y="542.0">__x..</text>
</g>
<g>
<title>__sys_recvfrom (119 samples, 3.47%)</title><rect x="191.2" y="515.0" width="40.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="194.2" y="526.0">__s..</text>
</g>
<g>
<title>fput_many (1 samples, 0.03%)</title><rect x="191.5" y="499.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="194.5" y="510.0"></text>
</g>
<g>
<title>import_single_range (2 samples, 0.06%)</title><rect x="191.9" y="499.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="194.9" y="510.0"></text>
</g>
<g>
<title>inet6_recvmsg (113 samples, 3.29%)</title><rect x="192.6" y="499.0" width="38.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="195.6" y="510.0">ine..</text>
</g>
<g>
<title>tcp_recvmsg (111 samples, 3.23%)</title><rect x="193.3" y="483.0" width="38.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="196.3" y="494.0">tcp..</text>
</g>
<g>
<title>__kfree_skb (8 samples, 0.23%)</title><rect x="196.4" y="467.0" width="2.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="199.4" y="478.0"></text>
</g>
<g>
<title>skb_release_head_state (8 samples, 0.23%)</title><rect x="196.4" y="451.0" width="2.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="199.4" y="462.0"></text>
</g>
<g>
<title>dst_release (6 samples, 0.17%)</title><rect x="196.4" y="435.0" width="2.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="199.4" y="446.0"></text>
</g>
<g>
<title>sock_rfree (2 samples, 0.06%)</title><rect x="198.4" y="435.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="201.4" y="446.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (3 samples, 0.09%)</title><rect x="199.1" y="467.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="202.1" y="478.0"></text>
</g>
<g>
<title>check_preemption_disabled (2 samples, 0.06%)</title><rect x="199.4" y="451.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="202.4" y="462.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (10 samples, 0.29%)</title><rect x="200.1" y="467.0" width="3.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="203.1" y="478.0"></text>
</g>
<g>
<title>__ip_queue_xmit (9 samples, 0.26%)</title><rect x="200.5" y="451.0" width="3.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="203.5" y="462.0"></text>
</g>
<g>
<title>ip_output (9 samples, 0.26%)</title><rect x="200.5" y="435.0" width="3.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="203.5" y="446.0"></text>
</g>
<g>
<title>ip_finish_output2 (8 samples, 0.23%)</title><rect x="200.5" y="419.0" width="2.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="203.5" y="430.0"></text>
</g>
<g>
<title>__dev_queue_xmit (1 samples, 0.03%)</title><rect x="200.5" y="403.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="203.5" y="414.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (1 samples, 0.03%)</title><rect x="200.5" y="387.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="203.5" y="398.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.03%)</title><rect x="200.5" y="371.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="203.5" y="382.0"></text>
</g>
<g>
<title>netif_rx (1 samples, 0.03%)</title><rect x="200.5" y="355.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="203.5" y="366.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.03%)</title><rect x="200.5" y="339.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="203.5" y="350.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.03%)</title><rect x="200.5" y="323.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="203.5" y="334.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (7 samples, 0.20%)</title><rect x="200.8" y="403.0" width="2.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="203.8" y="414.0"></text>
</g>
<g>
<title>do_softirq (7 samples, 0.20%)</title><rect x="200.8" y="387.0" width="2.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="203.8" y="398.0"></text>
</g>
<g>
<title>do_softirq_own_stack (7 samples, 0.20%)</title><rect x="200.8" y="371.0" width="2.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="203.8" y="382.0"></text>
</g>
<g>
<title>asm_call_sysvec_on_stack (7 samples, 0.20%)</title><rect x="200.8" y="355.0" width="2.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="203.8" y="366.0"></text>
</g>
<g>
<title>__softirqentry_text_start (7 samples, 0.20%)</title><rect x="200.8" y="339.0" width="2.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="203.8" y="350.0"></text>
</g>
<g>
<title>net_rx_action (7 samples, 0.20%)</title><rect x="200.8" y="323.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="203.8" y="334.0"></text>
</g>
<g>
<title>process_backlog (7 samples, 0.20%)</title><rect x="200.8" y="307.0" width="2.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="203.8" y="318.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (7 samples, 0.20%)</title><rect x="200.8" y="291.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="203.8" y="302.0"></text>
</g>
<g>
<title>ip_rcv (7 samples, 0.20%)</title><rect x="200.8" y="275.0" width="2.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="203.8" y="286.0"></text>
</g>
<g>
<title>ip_local_deliver (7 samples, 0.20%)</title><rect x="200.8" y="259.0" width="2.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="203.8" y="270.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (7 samples, 0.20%)</title><rect x="200.8" y="243.0" width="2.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="203.8" y="254.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (7 samples, 0.20%)</title><rect x="200.8" y="227.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="203.8" y="238.0"></text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.03%)</title><rect x="200.8" y="211.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="203.8" y="222.0"></text>
</g>
<g>
<title>tcp_v4_rcv (6 samples, 0.17%)</title><rect x="201.2" y="211.0" width="2.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="204.2" y="222.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.03%)</title><rect x="201.2" y="195.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="204.2" y="206.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (5 samples, 0.15%)</title><rect x="201.5" y="195.0" width="1.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="204.5" y="206.0"></text>
</g>
<g>
<title>tcp_rcv_established (5 samples, 0.15%)</title><rect x="201.5" y="179.0" width="1.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="204.5" y="190.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.03%)</title><rect x="201.5" y="163.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="204.5" y="174.0"></text>
</g>
<g>
<title>cache_from_obj (1 samples, 0.03%)</title><rect x="201.5" y="147.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="204.5" y="158.0"></text>
</g>
<g>
<title>tcp_ack (4 samples, 0.12%)</title><rect x="201.9" y="163.0" width="1.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="204.9" y="174.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.03%)</title><rect x="202.5" y="147.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="205.5" y="158.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.03%)</title><rect x="202.5" y="131.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="205.5" y="142.0"></text>
</g>
<g>
<title>slab_free_freelist_hook (1 samples, 0.03%)</title><rect x="202.5" y="115.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="205.5" y="126.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.03%)</title><rect x="202.9" y="147.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="205.9" y="158.0"></text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.03%)</title><rect x="203.2" y="419.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="206.2" y="430.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.03%)</title><rect x="203.2" y="403.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="206.2" y="414.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.06%)</title><rect x="203.6" y="467.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="206.6" y="478.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.06%)</title><rect x="203.6" y="451.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="206.6" y="462.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (1 samples, 0.03%)</title><rect x="203.6" y="435.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="206.6" y="446.0"></text>
</g>
<g>
<title>preempt_count_add (1 samples, 0.03%)</title><rect x="203.9" y="435.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="206.9" y="446.0"></text>
</g>
<g>
<title>release_sock (3 samples, 0.09%)</title><rect x="204.3" y="467.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="207.3" y="478.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="204.6" y="451.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="207.6" y="462.0"></text>
</g>
<g>
<title>preempt_count_add (1 samples, 0.03%)</title><rect x="204.6" y="435.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="207.6" y="446.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.03%)</title><rect x="204.9" y="451.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="207.9" y="462.0"></text>
</g>
<g>
<title>sk_wait_data (43 samples, 1.25%)</title><rect x="205.3" y="467.0" width="14.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="208.3" y="478.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="206.3" y="451.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="209.3" y="462.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.06%)</title><rect x="206.7" y="451.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="209.7" y="462.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (4 samples, 0.12%)</title><rect x="207.4" y="451.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="210.4" y="462.0"></text>
</g>
<g>
<title>preempt_count_sub (1 samples, 0.03%)</title><rect x="208.4" y="435.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="211.4" y="446.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.03%)</title><rect x="208.7" y="451.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="211.7" y="462.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="208.7" y="435.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="211.7" y="446.0"></text>
</g>
<g>
<title>preempt_count_add (1 samples, 0.03%)</title><rect x="208.7" y="419.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="211.7" y="430.0"></text>
</g>
<g>
<title>wait_woken (32 samples, 0.93%)</title><rect x="209.1" y="451.0" width="11.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="212.1" y="462.0"></text>
</g>
<g>
<title>schedule_timeout (29 samples, 0.84%)</title><rect x="210.1" y="435.0" width="10.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="213.1" y="446.0"></text>
</g>
<g>
<title>__mod_timer (8 samples, 0.23%)</title><rect x="210.8" y="419.0" width="2.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="213.8" y="430.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (6 samples, 0.17%)</title><rect x="211.1" y="403.0" width="2.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="214.1" y="414.0"></text>
</g>
<g>
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="212.9" y="387.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="215.9" y="398.0"></text>
</g>
<g>
<title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="212.9" y="371.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="215.9" y="382.0"></text>
</g>
<g>
<title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="212.9" y="355.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="215.9" y="366.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="212.9" y="339.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="215.9" y="350.0"></text>
</g>
<g>
<title>asm_call_sysvec_on_stack (1 samples, 0.03%)</title><rect x="212.9" y="323.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="215.9" y="334.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="212.9" y="307.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="215.9" y="318.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="212.9" y="291.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="215.9" y="302.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="212.9" y="275.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="215.9" y="286.0"></text>
</g>
<g>
<title>lock_timer_base.constprop.0 (1 samples, 0.03%)</title><rect x="213.2" y="403.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="216.2" y="414.0"></text>
</g>
<g>
<title>del_timer_sync (3 samples, 0.09%)</title><rect x="213.5" y="419.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="216.5" y="430.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.09%)</title><rect x="213.5" y="403.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="216.5" y="414.0"></text>
</g>
<g>
<title>schedule (16 samples, 0.47%)</title><rect x="214.6" y="419.0" width="5.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="217.6" y="430.0"></text>
</g>
<g>
<title>__schedule (13 samples, 0.38%)</title><rect x="215.3" y="403.0" width="4.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="218.3" y="414.0"></text>
</g>
<g>
<title>finish_task_switch (13 samples, 0.38%)</title><rect x="215.3" y="387.0" width="4.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="218.3" y="398.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irq (13 samples, 0.38%)</title><rect x="215.3" y="371.0" width="4.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="218.3" y="382.0"></text>
</g>
<g>
<title>preempt_count_sub (1 samples, 0.03%)</title><rect x="219.7" y="403.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="222.7" y="414.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (26 samples, 0.76%)</title><rect x="220.1" y="467.0" width="8.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="223.1" y="478.0"></text>
</g>
<g>
<title>__skb_datagram_iter (25 samples, 0.73%)</title><rect x="220.4" y="451.0" width="8.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="223.4" y="462.0"></text>
</g>
<g>
<title>_copy_to_iter (11 samples, 0.32%)</title><rect x="223.2" y="435.0" width="3.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="226.2" y="446.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (10 samples, 0.29%)</title><rect x="223.5" y="419.0" width="3.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="226.5" y="430.0"></text>
</g>
<g>
<title>simple_copy_to_iter (6 samples, 0.17%)</title><rect x="227.0" y="435.0" width="2.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="230.0" y="446.0"></text>
</g>
<g>
<title>__check_object_size (6 samples, 0.17%)</title><rect x="227.0" y="419.0" width="2.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="230.0" y="430.0"></text>
</g>
<g>
<title>__virt_addr_valid (4 samples, 0.12%)</title><rect x="227.6" y="403.0" width="1.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="230.6" y="414.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.03%)</title><rect x="229.0" y="467.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="232.0" y="478.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (6 samples, 0.17%)</title><rect x="229.4" y="467.0" width="2.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="232.4" y="478.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.15%)</title><rect x="229.7" y="451.0" width="1.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="232.7" y="462.0"></text>
</g>
<g>
<title>ktime_get (4 samples, 0.12%)</title><rect x="230.0" y="435.0" width="1.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="233.0" y="446.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.06%)</title><rect x="230.7" y="419.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="233.7" y="430.0"></text>
</g>
<g>
<title>sockfd_lookup_light (2 samples, 0.06%)</title><rect x="231.4" y="499.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="234.4" y="510.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.06%)</title><rect x="231.4" y="483.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="234.4" y="494.0"></text>
</g>
<g>
<title>__fget_files (2 samples, 0.06%)</title><rect x="231.4" y="467.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="234.4" y="478.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.03%)</title><rect x="232.1" y="531.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="235.1" y="542.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (1 samples, 0.03%)</title><rect x="232.1" y="515.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="235.1" y="526.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.06%)</title><rect x="232.5" y="579.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="235.5" y="590.0"></text>
</g>
<g>
<title>recv@plt (1 samples, 0.03%)</title><rect x="233.1" y="579.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="236.1" y="590.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (1 samples, 0.03%)</title><rect x="233.5" y="595.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="236.5" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (53 samples, 1.54%)</title><rect x="233.8" y="611.0" width="18.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="236.8" y="622.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.03%)</title><rect x="235.9" y="595.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="238.9" y="606.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="235.9" y="579.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="238.9" y="590.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.03%)</title><rect x="235.9" y="563.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.9" y="574.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.12%)</title><rect x="236.2" y="595.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="239.2" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.12%)</title><rect x="236.2" y="579.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="239.2" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="237.3" y="563.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="240.3" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (25 samples, 0.73%)</title><rect x="237.6" y="595.0" width="8.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="240.6" y="606.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="239.0" y="579.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.0" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (1 samples, 0.03%)</title><rect x="239.3" y="579.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="242.3" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (19 samples, 0.55%)</title><rect x="239.7" y="579.0" width="6.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="242.7" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (19 samples, 0.55%)</title><rect x="239.7" y="563.0" width="6.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="242.7" y="574.0"></text>
</g>
<g>
<title>asm_sysvec_reschedule_ipi (1 samples, 0.03%)</title><rect x="245.9" y="547.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="248.9" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="245.9" y="531.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="248.9" y="542.0"></text>
</g>
<g>
<title>__prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="245.9" y="515.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="248.9" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.15%)</title><rect x="246.2" y="595.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="249.2" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (2 samples, 0.06%)</title><rect x="247.9" y="595.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="250.9" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (10 samples, 0.29%)</title><rect x="248.6" y="595.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="251.6" y="606.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.12%)</title><rect x="250.7" y="579.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="253.7" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.12%)</title><rect x="250.7" y="563.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.7" y="574.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.06%)</title><rect x="251.4" y="547.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="254.4" y="558.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.06%)</title><rect x="251.4" y="531.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="254.4" y="542.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.06%)</title><rect x="251.4" y="515.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="254.4" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (26 samples, 0.76%)</title><rect x="252.1" y="611.0" width="8.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="255.1" y="622.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (5 samples, 0.15%)</title><rect x="253.8" y="595.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="256.8" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4 samples, 0.12%)</title><rect x="254.1" y="579.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="257.1" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.09%)</title><rect x="254.1" y="563.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="257.1" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.09%)</title><rect x="254.1" y="547.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="257.1" y="558.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="254.1" y="531.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="257.1" y="542.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="254.1" y="515.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="257.1" y="526.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="254.5" y="531.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="257.5" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="254.5" y="515.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="257.5" y="526.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="254.5" y="499.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="257.5" y="510.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.03%)</title><rect x="254.8" y="531.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="257.8" y="542.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="255.1" y="563.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="258.1" y="574.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (15 samples, 0.44%)</title><rect x="255.5" y="595.0" width="5.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="258.5" y="606.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 0.15%)</title><rect x="255.8" y="579.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="258.8" y="590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.12%)</title><rect x="255.8" y="563.0" width="1.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="258.8" y="574.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (1 samples, 0.03%)</title><rect x="257.2" y="563.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="260.2" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (2 samples, 0.06%)</title><rect x="257.6" y="579.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="260.6" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.20%)</title><rect x="258.2" y="579.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="261.2" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.20%)</title><rect x="258.2" y="563.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="261.2" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (7 samples, 0.20%)</title><rect x="258.2" y="547.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="261.2" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (1 samples, 0.03%)</title><rect x="260.6" y="595.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="263.6" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (10 samples, 0.29%)</title><rect x="261.0" y="611.0" width="3.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="264.0" y="622.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (5 samples, 0.15%)</title><rect x="262.4" y="595.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="265.4" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.15%)</title><rect x="262.4" y="579.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.4" y="590.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.03%)</title><rect x="263.7" y="563.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="266.7" y="574.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.03%)</title><rect x="263.7" y="547.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="266.7" y="558.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.03%)</title><rect x="263.7" y="531.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.7" y="542.0"></text>
</g>
<g>
<title>asm_sysvec_reschedule_ipi (1 samples, 0.03%)</title><rect x="263.7" y="515.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="266.7" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="263.7" y="499.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="266.7" y="510.0"></text>
</g>
<g>
<title>__prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="263.7" y="483.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="266.7" y="494.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="264.1" y="595.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="267.1" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="264.1" y="579.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="267.1" y="590.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.03%)</title><rect x="264.1" y="563.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="267.1" y="574.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (2 samples, 0.06%)</title><rect x="264.4" y="611.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="267.4" y="622.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (86 samples, 2.51%)</title><rect x="265.1" y="611.0" width="29.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="268.1" y="622.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (1 samples, 0.03%)</title><rect x="266.1" y="595.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="269.1" y="606.0"></text>
</g>
<g>
<title>__setsockopt (82 samples, 2.39%)</title><rect x="266.5" y="595.0" width="28.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="269.5" y="606.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (69 samples, 2.01%)</title><rect x="271.0" y="579.0" width="23.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="274.0" y="590.0">e..</text>
</g>
<g>
<title>do_syscall_64 (69 samples, 2.01%)</title><rect x="271.0" y="563.0" width="23.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="274.0" y="574.0">d..</text>
</g>
<g>
<title>__syscall_return_slowpath (3 samples, 0.09%)</title><rect x="276.8" y="547.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="279.8" y="558.0"></text>
</g>
<g>
<title>__audit_syscall_exit (3 samples, 0.09%)</title><rect x="276.8" y="531.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="279.8" y="542.0"></text>
</g>
<g>
<title>unroll_tree_refs (2 samples, 0.06%)</title><rect x="277.2" y="515.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="280.2" y="526.0"></text>
</g>
<g>
<title>__x64_sys_setsockopt (48 samples, 1.40%)</title><rect x="277.8" y="547.0" width="16.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="280.8" y="558.0"></text>
</g>
<g>
<title>__sys_setsockopt (48 samples, 1.40%)</title><rect x="277.8" y="531.0" width="16.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="280.8" y="542.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_setsockopt (8 samples, 0.23%)</title><rect x="278.2" y="515.0" width="2.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="281.2" y="526.0"></text>
</g>
<g>
<title>__rcu_read_lock (1 samples, 0.03%)</title><rect x="279.9" y="499.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="282.9" y="510.0"></text>
</g>
<g>
<title>bpf_prog_array_is_empty (2 samples, 0.06%)</title><rect x="280.2" y="499.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="283.2" y="510.0"></text>
</g>
<g>
<title>fput (1 samples, 0.03%)</title><rect x="280.9" y="515.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="283.9" y="526.0"></text>
</g>
<g>
<title>sock_setsockopt (26 samples, 0.76%)</title><rect x="281.3" y="515.0" width="8.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="284.3" y="526.0"></text>
</g>
<g>
<title>__get_user_4 (4 samples, 0.12%)</title><rect x="282.3" y="499.0" width="1.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="285.3" y="510.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.06%)</title><rect x="283.7" y="499.0" width="0.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="286.7" y="510.0"></text>
</g>
<g>
<title>check_preemption_disabled (2 samples, 0.06%)</title><rect x="283.7" y="483.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="286.7" y="494.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (5 samples, 0.15%)</title><rect x="284.4" y="499.0" width="1.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="287.4" y="510.0"></text>
</g>
<g>
<title>_raw_spin_unlock (1 samples, 0.03%)</title><rect x="286.1" y="499.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="289.1" y="510.0"></text>
</g>
<g>
<title>release_sock (8 samples, 0.23%)</title><rect x="286.4" y="499.0" width="2.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="289.4" y="510.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.09%)</title><rect x="286.4" y="483.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="289.4" y="494.0"></text>
</g>
<g>
<title>preempt_count_add (1 samples, 0.03%)</title><rect x="287.1" y="467.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="290.1" y="478.0"></text>
</g>
<g>
<title>tcp_release_cb (5 samples, 0.15%)</title><rect x="287.5" y="483.0" width="1.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="290.5" y="494.0"></text>
</g>
<g>
<title>sock_set_timeout (3 samples, 0.09%)</title><rect x="289.2" y="499.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="292.2" y="510.0"></text>
</g>
<g>
<title>_copy_from_user (3 samples, 0.09%)</title><rect x="289.2" y="483.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="292.2" y="494.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (1 samples, 0.03%)</title><rect x="289.5" y="467.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="292.5" y="478.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (1 samples, 0.03%)</title><rect x="289.9" y="467.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="292.9" y="478.0"></text>
</g>
<g>
<title>sockfd_lookup_light (12 samples, 0.35%)</title><rect x="290.2" y="515.0" width="4.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="293.2" y="526.0"></text>
</g>
<g>
<title>__fget_light (12 samples, 0.35%)</title><rect x="290.2" y="499.0" width="4.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="293.2" y="510.0"></text>
</g>
<g>
<title>__fget_files (8 samples, 0.23%)</title><rect x="291.6" y="483.0" width="2.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="294.6" y="494.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.03%)</title><rect x="294.3" y="547.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="297.3" y="558.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.03%)</title><rect x="294.3" y="531.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="297.3" y="542.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (387 samples, 11.28%)</title><rect x="294.7" y="611.0" width="133.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="297.7" y="622.0">one/nio/net/Nativ..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (9 samples, 0.26%)</title><rect x="295.7" y="595.0" width="3.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="298.7" y="606.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.03%)</title><rect x="296.1" y="579.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="299.1" y="590.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (7 samples, 0.20%)</title><rect x="296.4" y="579.0" width="2.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="299.4" y="590.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (3 samples, 0.09%)</title><rect x="297.1" y="563.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="300.1" y="574.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (1 samples, 0.03%)</title><rect x="298.1" y="563.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="301.1" y="574.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.03%)</title><rect x="298.5" y="563.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="301.5" y="574.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.03%)</title><rect x="298.8" y="595.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="301.8" y="606.0"></text>
</g>
<g>
<title>__libc_send (374 samples, 10.90%)</title><rect x="299.2" y="595.0" width="128.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="302.2" y="606.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (359 samples, 10.46%)</title><rect x="304.0" y="579.0" width="123.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="307.0" y="590.0">entry_SYSCALL_6..</text>
</g>
<g>
<title>do_syscall_64 (359 samples, 10.46%)</title><rect x="304.0" y="563.0" width="123.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="307.0" y="574.0">do_syscall_64</text>
</g>
<g>
<title>__syscall_return_slowpath (2 samples, 0.06%)</title><rect x="306.0" y="547.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="309.0" y="558.0"></text>
</g>
<g>
<title>__audit_syscall_exit (2 samples, 0.06%)</title><rect x="306.0" y="531.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="309.0" y="542.0"></text>
</g>
<g>
<title>unroll_tree_refs (1 samples, 0.03%)</title><rect x="306.4" y="515.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="309.4" y="526.0"></text>
</g>
<g>
<title>__x64_sys_sendto (349 samples, 10.17%)</title><rect x="306.7" y="547.0" width="120.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="309.7" y="558.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (346 samples, 10.08%)</title><rect x="307.8" y="531.0" width="118.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="310.8" y="542.0">__sys_sendto</text>
</g>
<g>
<title>fput_many (3 samples, 0.09%)</title><rect x="308.8" y="515.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="311.8" y="526.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.03%)</title><rect x="309.8" y="515.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="312.8" y="526.0"></text>
</g>
<g>
<title>sock_sendmsg (339 samples, 9.88%)</title><rect x="310.2" y="515.0" width="116.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="313.2" y="526.0">sock_sendmsg</text>
</g>
<g>
<title>security_socket_sendmsg (1 samples, 0.03%)</title><rect x="310.2" y="499.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="313.2" y="510.0"></text>
</g>
<g>
<title>tcp_sendmsg (338 samples, 9.85%)</title><rect x="310.5" y="499.0" width="116.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="313.5" y="510.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.03%)</title><rect x="310.5" y="483.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="313.5" y="494.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.03%)</title><rect x="310.8" y="483.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="313.8" y="494.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="310.8" y="467.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="313.8" y="478.0"></text>
</g>
<g>
<title>preempt_count_add (1 samples, 0.03%)</title><rect x="310.8" y="451.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="313.8" y="462.0"></text>
</g>
<g>
<title>release_sock (4 samples, 0.12%)</title><rect x="311.2" y="483.0" width="1.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="314.2" y="494.0"></text>
</g>
<g>
<title>__release_sock (2 samples, 0.06%)</title><rect x="311.9" y="467.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="314.9" y="478.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (2 samples, 0.06%)</title><rect x="311.9" y="451.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="314.9" y="462.0"></text>
</g>
<g>
<title>tcp_rcv_established (2 samples, 0.06%)</title><rect x="311.9" y="435.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="314.9" y="446.0"></text>
</g>
<g>
<title>__rcu_read_unlock (1 samples, 0.03%)</title><rect x="311.9" y="419.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="314.9" y="430.0"></text>
</g>
<g>
<title>tcp_queue_rcv (1 samples, 0.03%)</title><rect x="312.2" y="419.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="315.2" y="430.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (332 samples, 9.67%)</title><rect x="312.6" y="483.0" width="114.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="315.6" y="494.0">tcp_sendmsg_lo..</text>
</g>
<g>
<title>__tcp_push_pending_frames (279 samples, 8.13%)</title><rect x="315.7" y="467.0" width="95.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="318.7" y="478.0">__tcp_push_..</text>
</g>
<g>
<title>tcp_write_xmit (279 samples, 8.13%)</title><rect x="315.7" y="451.0" width="95.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="318.7" y="462.0">tcp_write_x..</text>
</g>
<g>
<title>__tcp_transmit_skb (263 samples, 7.66%)</title><rect x="317.4" y="435.0" width="90.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="320.4" y="446.0">__tcp_tran..</text>
</g>
<g>
<title>__ip_queue_xmit (246 samples, 7.17%)</title><rect x="319.4" y="419.0" width="84.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="322.4" y="430.0">__ip_queue..</text>
</g>
<g>
<title>__ip_local_out (1 samples, 0.03%)</title><rect x="320.5" y="403.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="323.5" y="414.0"></text>
</g>
<g>
<title>__sk_dst_check (1 samples, 0.03%)</title><rect x="320.8" y="403.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="323.8" y="414.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.03%)</title><rect x="320.8" y="387.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="323.8" y="398.0"></text>
</g>
<g>
<title>ip_output (237 samples, 6.91%)</title><rect x="321.2" y="403.0" width="81.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="324.2" y="414.0">ip_output</text>
</g>
<g>
<title>__ip_finish_output (1 samples, 0.03%)</title><rect x="322.2" y="387.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="325.2" y="398.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.03%)</title><rect x="322.2" y="371.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="325.2" y="382.0"></text>
</g>
<g>
<title>ip_finish_output2 (232 samples, 6.76%)</title><rect x="322.5" y="387.0" width="79.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="325.5" y="398.0">ip_finish..</text>
</g>
<g>
<title>__dev_queue_xmit (30 samples, 0.87%)</title><rect x="323.9" y="371.0" width="10.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="326.9" y="382.0"></text>
</g>
<g>
<title>check_preemption_disabled (1 samples, 0.03%)</title><rect x="326.3" y="355.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="329.3" y="366.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (16 samples, 0.47%)</title><rect x="326.7" y="355.0" width="5.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="329.7" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (16 samples, 0.47%)</title><rect x="326.7" y="339.0" width="5.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="329.7" y="350.0"></text>
</g>
<g>
<title>check_preemption_disabled (1 samples, 0.03%)</title><rect x="327.3" y="323.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="330.3" y="334.0"></text>
</g>
<g>
<title>eth_type_trans (2 samples, 0.06%)</title><rect x="327.7" y="323.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="330.7" y="334.0"></text>
</g>
<g>
<title>netif_rx (5 samples, 0.15%)</title><rect x="328.4" y="323.0" width="1.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="331.4" y="334.0"></text>
</g>
<g>
<title>netif_rx_internal (5 samples, 0.15%)</title><rect x="328.4" y="307.0" width="1.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="331.4" y="318.0"></text>
</g>
<g>
<title>enqueue_to_backlog (5 samples, 0.15%)</title><rect x="328.4" y="291.0" width="1.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="331.4" y="302.0"></text>
</g>
<g>
<title>sk_free (3 samples, 0.09%)</title><rect x="330.1" y="323.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="333.1" y="334.0"></text>
</g>
<g>
<title>tcp_wfree (3 samples, 0.09%)</title><rect x="331.1" y="323.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="334.1" y="334.0"></text>
</g>
<g>
<title>validate_xmit_skb (4 samples, 0.12%)</title><rect x="332.2" y="355.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="335.2" y="366.0"></text>
</g>
<g>
<title>netif_skb_features (3 samples, 0.09%)</title><rect x="332.5" y="339.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="335.5" y="350.0"></text>
</g>
<g>
<title>skb_network_protocol (1 samples, 0.03%)</title><rect x="333.2" y="323.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="336.2" y="334.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (2 samples, 0.06%)</title><rect x="333.5" y="355.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="336.5" y="366.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (197 samples, 5.74%)</title><rect x="334.2" y="371.0" width="67.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="337.2" y="382.0">__local..</text>
</g>
<g>
<title>do_softirq (192 samples, 5.59%)</title><rect x="334.2" y="355.0" width="66.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="337.2" y="366.0">do_soft..</text>
</g>
<g>
<title>do_softirq_own_stack (190 samples, 5.54%)</title><rect x="334.9" y="339.0" width="65.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="337.9" y="350.0">do_soft..</text>
</g>
<g>
<title>asm_call_sysvec_on_stack (190 samples, 5.54%)</title><rect x="334.9" y="323.0" width="65.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="337.9" y="334.0">asm_cal..</text>
</g>
<g>
<title>__softirqentry_text_start (190 samples, 5.54%)</title><rect x="334.9" y="307.0" width="65.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="337.9" y="318.0">__softi..</text>
</g>
<g>
<title>__this_cpu_preempt_check (1 samples, 0.03%)</title><rect x="337.0" y="291.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="340.0" y="302.0"></text>
</g>
<g>
<title>net_rx_action (183 samples, 5.33%)</title><rect x="337.3" y="291.0" width="62.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="340.3" y="302.0">net_rx..</text>
</g>
<g>
<title>__kfree_skb_flush (2 samples, 0.06%)</title><rect x="338.0" y="275.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="341.0" y="286.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.03%)</title><rect x="338.7" y="275.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="341.7" y="286.0"></text>
</g>
<g>
<title>process_backlog (178 samples, 5.19%)</title><rect x="339.0" y="275.0" width="61.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="342.0" y="286.0">proces..</text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.03%)</title><rect x="339.7" y="259.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="342.7" y="270.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (175 samples, 5.10%)</title><rect x="340.1" y="259.0" width="60.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="343.1" y="270.0">__neti..</text>
</g>
<g>
<title>__netif_receive_skb_core (3 samples, 0.09%)</title><rect x="340.1" y="243.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="343.1" y="254.0"></text>
</g>
<g>
<title>check_preemption_disabled (1 samples, 0.03%)</title><rect x="340.8" y="227.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="343.8" y="238.0"></text>
</g>
<g>
<title>ip_rcv (172 samples, 5.01%)</title><rect x="341.1" y="243.0" width="59.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="344.1" y="254.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (168 samples, 4.90%)</title><rect x="341.1" y="227.0" width="57.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="344.1" y="238.0">ip_loc..</text>
</g>
<g>
<title>ip_local_deliver_finish (167 samples, 4.87%)</title><rect x="341.4" y="211.0" width="57.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="344.4" y="222.0">ip_loc..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (166 samples, 4.84%)</title><rect x="341.8" y="195.0" width="57.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="344.8" y="206.0">ip_pro..</text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.06%)</title><rect x="342.1" y="179.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="345.1" y="190.0"></text>
</g>
<g>
<title>tcp_v4_rcv (163 samples, 4.75%)</title><rect x="342.8" y="179.0" width="56.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="345.8" y="190.0">tcp_v4..</text>
</g>
<g>
<title>__inet_lookup_established (7 samples, 0.20%)</title><rect x="344.9" y="163.0" width="2.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="347.9" y="174.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.03%)</title><rect x="346.9" y="147.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="349.9" y="158.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (3 samples, 0.09%)</title><rect x="347.3" y="163.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="350.3" y="174.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.03%)</title><rect x="347.6" y="147.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="350.6" y="158.0"></text>
</g>
<g>
<title>preempt_count_sub (1 samples, 0.03%)</title><rect x="347.6" y="131.0" width="0.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="350.6" y="142.0"></text>
</g>
<g>
<title>__rcu_read_unlock (1 samples, 0.03%)</title><rect x="348.0" y="147.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="351.0" y="158.0"></text>
</g>
<g>
<title>sock_put (1 samples, 0.03%)</title><rect x="348.3" y="163.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="351.3" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (146 samples, 4.25%)</title><rect x="348.7" y="163.0" width="50.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="351.7" y="174.0">tcp_v..</text>
</g>
<g>
<title>tcp_rcv_established (146 samples, 4.25%)</title><rect x="348.7" y="147.0" width="50.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="351.7" y="158.0">tcp_r..</text>
</g>
<g>
<title>ktime_get_seconds (1 samples, 0.03%)</title><rect x="349.4" y="131.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="352.4" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.03%)</title><rect x="349.7" y="131.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="352.7" y="142.0"></text>
</g>
<g>
<title>__mod_timer (1 samples, 0.03%)</title><rect x="349.7" y="115.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="352.7" y="126.0"></text>
</g>
<g>
<title>sock_def_readable (98 samples, 2.86%)</title><rect x="350.0" y="131.0" width="33.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="353.0" y="142.0">so..</text>
</g>
<g>
<title>__wake_up_common_lock (97 samples, 2.83%)</title><rect x="350.4" y="115.0" width="33.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="353.4" y="126.0">__..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (96 samples, 2.80%)</title><rect x="350.7" y="99.0" width="33.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="353.7" y="110.0">_r..</text>
</g>
<g>
<title>tcp_ack (35 samples, 1.02%)</title><rect x="383.7" y="131.0" width="12.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="386.7" y="142.0"></text>
</g>
<g>
<title>__kfree_skb (8 samples, 0.23%)</title><rect x="385.8" y="115.0" width="2.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="388.8" y="126.0"></text>
</g>
<g>
<title>kfree (2 samples, 0.06%)</title><rect x="385.8" y="99.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="388.8" y="110.0"></text>
</g>
<g>
<title>__slab_free (1 samples, 0.03%)</title><rect x="385.8" y="83.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="388.8" y="94.0"></text>
</g>
<g>
<title>slab_free_freelist_hook (1 samples, 0.03%)</title><rect x="386.1" y="83.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="389.1" y="94.0"></text>
</g>
<g>
<title>skb_release_data (6 samples, 0.17%)</title><rect x="386.5" y="99.0" width="2.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="389.5" y="110.0"></text>
</g>
<g>
<title>__x86_retpoline_rax (1 samples, 0.03%)</title><rect x="388.5" y="115.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="391.5" y="126.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.03%)</title><rect x="388.9" y="115.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="391.9" y="126.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.03%)</title><rect x="389.2" y="115.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="392.2" y="126.0"></text>
</g>
<g>
<title>kmem_cache_free (9 samples, 0.26%)</title><rect x="389.6" y="115.0" width="3.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="392.6" y="126.0"></text>
</g>
<g>
<title>__slab_free (1 samples, 0.03%)</title><rect x="390.6" y="99.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="393.6" y="110.0"></text>
</g>
<g>
<title>cache_from_obj (5 samples, 0.15%)</title><rect x="391.0" y="99.0" width="1.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="394.0" y="110.0"></text>
</g>
<g>
<title>rb_erase (1 samples, 0.03%)</title><rect x="392.7" y="115.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="395.7" y="126.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt (4 samples, 0.12%)</title><rect x="393.0" y="115.0" width="1.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="396.0" y="126.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (1 samples, 0.03%)</title><rect x="394.4" y="115.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="397.4" y="126.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe.part.0 (1 samples, 0.03%)</title><rect x="394.7" y="115.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="397.7" y="126.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.03%)</title><rect x="395.1" y="115.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="398.1" y="126.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (1 samples, 0.03%)</title><rect x="395.4" y="115.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="398.4" y="126.0"></text>
</g>
<g>
<title>tcp_check_space (2 samples, 0.06%)</title><rect x="395.8" y="131.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="398.8" y="142.0"></text>
</g>
<g>
<title>tcp_grow_window (2 samples, 0.06%)</title><rect x="396.5" y="131.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="399.5" y="142.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (3 samples, 0.09%)</title><rect x="397.1" y="131.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="400.1" y="142.0"></text>
</g>
<g>
<title>ktime_get (3 samples, 0.09%)</title><rect x="397.1" y="115.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="400.1" y="126.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.03%)</title><rect x="397.8" y="99.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="400.8" y="110.0"></text>
</g>
<g>
<title>tcp_queue_rcv (2 samples, 0.06%)</title><rect x="398.2" y="131.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="401.2" y="142.0"></text>
</g>
<g>
<title>ip_rcv_core (2 samples, 0.06%)</title><rect x="398.9" y="227.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="401.9" y="238.0"></text>
</g>
<g>
<title>ip_rcv_finish (2 samples, 0.06%)</title><rect x="399.6" y="227.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="402.6" y="238.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.constprop.0 (1 samples, 0.03%)</title><rect x="399.9" y="211.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="402.9" y="222.0"></text>
</g>
<g>
<title>preempt_schedule_thunk (5 samples, 0.15%)</title><rect x="400.2" y="355.0" width="1.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="403.2" y="366.0"></text>
</g>
<g>
<title>preempt_schedule_common (4 samples, 0.12%)</title><rect x="400.6" y="339.0" width="1.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="403.6" y="350.0"></text>
</g>
<g>
<title>__schedule (2 samples, 0.06%)</title><rect x="400.9" y="323.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="403.9" y="334.0"></text>
</g>
<g>
<title>finish_task_switch (2 samples, 0.06%)</title><rect x="400.9" y="307.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="403.9" y="318.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irq (2 samples, 0.06%)</title><rect x="400.9" y="291.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="403.9" y="302.0"></text>
</g>
<g>
<title>in_lock_functions (1 samples, 0.03%)</title><rect x="401.6" y="323.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="404.6" y="334.0"></text>
</g>
<g>
<title>preempt_count_add (1 samples, 0.03%)</title><rect x="402.0" y="371.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="405.0" y="382.0"></text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.03%)</title><rect x="402.3" y="387.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="405.3" y="398.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.03%)</title><rect x="402.3" y="371.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="405.3" y="382.0"></text>
</g>
<g>
<title>preempt_count_add (1 samples, 0.03%)</title><rect x="402.3" y="355.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="405.3" y="366.0"></text>
</g>
<g>
<title>rcu_preempt_deferred_qs_irqrestore (4 samples, 0.12%)</title><rect x="402.6" y="403.0" width="1.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="405.6" y="414.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (4 samples, 0.12%)</title><rect x="402.6" y="387.0" width="1.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="405.6" y="398.0"></text>
</g>
<g>
<title>preempt_count_sub (1 samples, 0.03%)</title><rect x="403.7" y="371.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="406.7" y="382.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.06%)</title><rect x="404.0" y="419.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="407.0" y="430.0"></text>
</g>
<g>
<title>skb_clone (5 samples, 0.15%)</title><rect x="404.7" y="419.0" width="1.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="407.7" y="430.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.03%)</title><rect x="406.1" y="403.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="409.1" y="414.0"></text>
</g>
<g>
<title>tcp_options_write (2 samples, 0.06%)</title><rect x="406.4" y="419.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="409.4" y="430.0"></text>
</g>
<g>
<title>tcp_v4_send_check (2 samples, 0.06%)</title><rect x="407.1" y="419.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="410.1" y="430.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.06%)</title><rect x="407.8" y="435.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="410.8" y="446.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (6 samples, 0.17%)</title><rect x="408.5" y="435.0" width="2.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="411.5" y="446.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.06%)</title><rect x="409.5" y="419.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="412.5" y="430.0"></text>
</g>
<g>
<title>__mod_timer (2 samples, 0.06%)</title><rect x="409.5" y="403.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="412.5" y="414.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="409.9" y="387.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="412.9" y="398.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.03%)</title><rect x="410.2" y="419.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="413.2" y="430.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe.part.0 (1 samples, 0.03%)</title><rect x="410.6" y="435.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="413.6" y="446.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.03%)</title><rect x="410.6" y="419.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="413.6" y="430.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.0 (2 samples, 0.06%)</title><rect x="410.9" y="435.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="413.9" y="446.0"></text>
</g>
<g>
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="411.6" y="467.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="414.6" y="478.0"></text>
</g>
<g>
<title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="411.6" y="451.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="414.6" y="462.0"></text>
</g>
<g>
<title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="411.6" y="435.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="414.6" y="446.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="411.6" y="419.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="414.6" y="430.0"></text>
</g>
<g>
<title>asm_call_sysvec_on_stack (1 samples, 0.03%)</title><rect x="411.6" y="403.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="414.6" y="414.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="411.6" y="387.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="414.6" y="398.0"></text>
</g>
<g>
<title>sk_page_frag_refill (3 samples, 0.09%)</title><rect x="411.9" y="467.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="414.9" y="478.0"></text>
</g>
<g>
<title>skb_page_frag_refill (3 samples, 0.09%)</title><rect x="411.9" y="451.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="414.9" y="462.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (17 samples, 0.50%)</title><rect x="413.0" y="467.0" width="5.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="416.0" y="478.0"></text>
</g>
<g>
<title>__alloc_skb (16 samples, 0.47%)</title><rect x="413.3" y="451.0" width="5.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="416.3" y="462.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (7 samples, 0.20%)</title><rect x="414.0" y="435.0" width="2.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="417.0" y="446.0"></text>
</g>
<g>
<title>__slab_alloc.constprop.0 (2 samples, 0.06%)</title><rect x="415.0" y="419.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="418.0" y="430.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (1 samples, 0.03%)</title><rect x="415.7" y="419.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="418.7" y="430.0"></text>
</g>
<g>
<title>memset_erms (1 samples, 0.03%)</title><rect x="416.1" y="419.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="419.1" y="430.0"></text>
</g>
<g>
<title>__ksize (3 samples, 0.09%)</title><rect x="416.4" y="435.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="419.4" y="446.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (4 samples, 0.12%)</title><rect x="417.4" y="435.0" width="1.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="420.4" y="446.0"></text>
</g>
<g>
<title>asm_sysvec_reschedule_ipi (1 samples, 0.03%)</title><rect x="418.5" y="419.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="421.5" y="430.0"></text>
</g>
<g>
<title>preempt_schedule_irq (1 samples, 0.03%)</title><rect x="418.5" y="403.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="421.5" y="414.0"></text>
</g>
<g>
<title>skb_do_copy_data_nocache (6 samples, 0.17%)</title><rect x="418.8" y="467.0" width="2.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="421.8" y="478.0"></text>
</g>
<g>
<title>_copy_from_iter_full (5 samples, 0.15%)</title><rect x="419.1" y="451.0" width="1.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="422.1" y="462.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (4 samples, 0.12%)</title><rect x="419.5" y="435.0" width="1.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="422.5" y="446.0"></text>
</g>
<g>
<title>skb_entail (3 samples, 0.09%)</title><rect x="420.9" y="467.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="423.9" y="478.0"></text>
</g>
<g>
<title>tcp_chrono_start (1 samples, 0.03%)</title><rect x="421.6" y="451.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="424.6" y="462.0"></text>
</g>
<g>
<title>tcp_push (3 samples, 0.09%)</title><rect x="421.9" y="467.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="424.9" y="478.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (3 samples, 0.09%)</title><rect x="422.9" y="467.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="425.9" y="478.0"></text>
</g>
<g>
<title>tcp_send_mss (4 samples, 0.12%)</title><rect x="424.0" y="467.0" width="1.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="427.0" y="478.0"></text>
</g>
<g>
<title>tcp_current_mss (4 samples, 0.12%)</title><rect x="424.0" y="451.0" width="1.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="427.0" y="462.0"></text>
</g>
<g>
<title>ipv4_mtu (2 samples, 0.06%)</title><rect x="424.7" y="435.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="427.7" y="446.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (3 samples, 0.09%)</title><rect x="425.3" y="467.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="428.3" y="478.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (1 samples, 0.03%)</title><rect x="426.4" y="467.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="429.4" y="478.0"></text>
</g>
<g>
<title>syscall_trace_enter (2 samples, 0.06%)</title><rect x="426.7" y="547.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="429.7" y="558.0"></text>
</g>
<g>
<title>rcu_read_unlock_special (1 samples, 0.03%)</title><rect x="427.4" y="579.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="430.4" y="590.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (4 samples, 0.12%)</title><rect x="427.7" y="611.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="430.7" y="622.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.06%)</title><rect x="428.4" y="595.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="431.4" y="606.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="428.4" y="579.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="431.4" y="590.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="428.4" y="563.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="431.4" y="574.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (1 samples, 0.03%)</title><rect x="428.8" y="579.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="431.8" y="590.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (6 samples, 0.17%)</title><rect x="429.1" y="611.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="432.1" y="622.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.03%)</title><rect x="430.8" y="595.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="433.8" y="606.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (1 samples, 0.03%)</title><rect x="430.8" y="579.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="433.8" y="590.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (1 samples, 0.03%)</title><rect x="430.8" y="563.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="433.8" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (4 samples, 0.12%)</title><rect x="431.2" y="643.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="434.2" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (12 samples, 0.35%)</title><rect x="432.6" y="643.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="435.6" y="654.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.09%)</title><rect x="434.6" y="627.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="437.6" y="638.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.09%)</title><rect x="434.6" y="611.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="437.6" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="434.6" y="595.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="437.6" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="434.6" y="579.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="437.6" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="434.6" y="563.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="437.6" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="434.6" y="547.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="437.6" y="558.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="434.6" y="531.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="437.6" y="542.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="434.6" y="515.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="437.6" y="526.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.06%)</title><rect x="435.0" y="595.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="438.0" y="606.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.09%)</title><rect x="435.7" y="627.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="438.7" y="638.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.09%)</title><rect x="435.7" y="611.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="438.7" y="622.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.09%)</title><rect x="435.7" y="595.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="438.7" y="606.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.09%)</title><rect x="435.7" y="579.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="438.7" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl.handlePut (47 samples, 1.37%)</title><rect x="436.7" y="643.0" width="16.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="439.7" y="654.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="436.7" y="627.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="439.7" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (1 samples, 0.03%)</title><rect x="437.0" y="627.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="440.0" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="437.0" y="611.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="440.0" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="437.0" y="595.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="440.0" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="437.0" y="579.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="440.0" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/DAOImpl.upsert (44 samples, 1.28%)</title><rect x="437.4" y="627.0" width="15.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="440.4" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (6 samples, 0.17%)</title><rect x="438.1" y="611.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="441.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (5 samples, 0.15%)</title><rect x="438.4" y="595.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="441.4" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (5 samples, 0.15%)</title><rect x="438.4" y="579.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="441.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.03%)</title><rect x="439.1" y="563.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="442.1" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.03%)</title><rect x="439.1" y="547.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="442.1" y="558.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="439.1" y="531.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="442.1" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.03%)</title><rect x="439.4" y="563.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="442.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (1 samples, 0.03%)</title><rect x="439.8" y="563.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="442.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (1 samples, 0.03%)</title><rect x="439.8" y="547.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="442.8" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/MemTable.upsert (36 samples, 1.05%)</title><rect x="440.1" y="611.0" width="12.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="443.1" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.03%)</title><rect x="440.1" y="595.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="443.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (35 samples, 1.02%)</title><rect x="440.5" y="595.0" width="12.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="443.5" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (34 samples, 0.99%)</title><rect x="440.5" y="579.0" width="11.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="443.5" y="590.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (3 samples, 0.09%)</title><rect x="440.8" y="563.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="443.8" y="574.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="441.5" y="547.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="444.5" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="441.5" y="531.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="444.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (14 samples, 0.41%)</title><rect x="441.8" y="563.0" width="4.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="444.8" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (2 samples, 0.06%)</title><rect x="446.7" y="563.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="449.7" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="446.7" y="547.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="449.7" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.03%)</title><rect x="446.7" y="531.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="449.7" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="446.7" y="515.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="449.7" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.03%)</title><rect x="447.0" y="547.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="450.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (13 samples, 0.38%)</title><rect x="447.3" y="563.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="450.3" y="574.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 0.38%)</title><rect x="447.3" y="547.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="450.3" y="558.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 0.26%)</title><rect x="448.7" y="531.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="451.7" y="542.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.09%)</title><rect x="448.7" y="515.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="451.7" y="526.0"></text>
</g>
<g>
<title>vectorizedMismatch (3 samples, 0.09%)</title><rect x="448.7" y="499.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="451.7" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (3 samples, 0.09%)</title><rect x="449.7" y="515.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="452.7" y="526.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.09%)</title><rect x="450.8" y="515.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="453.8" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.nextSecondarySeed (1 samples, 0.03%)</title><rect x="451.8" y="563.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="454.8" y="574.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="452.2" y="579.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="455.2" y="590.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="452.2" y="563.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="455.2" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/ServiceUtils.getBuffer (1 samples, 0.03%)</title><rect x="452.5" y="627.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="455.5" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="452.5" y="611.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="455.5" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.03%)</title><rect x="452.5" y="595.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="455.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/ConsistentHashing.isMe (3 samples, 0.09%)</title><rect x="452.8" y="643.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="455.8" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/ConsistentHashing.all (279 samples, 8.13%)</title><rect x="453.9" y="659.0" width="95.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="456.9" y="670.0">ru/mail/pol..</text>
</g>
<g>
<title>ru/mail/polis/service/gogun/ConsistentHashing.all (279 samples, 8.13%)</title><rect x="453.9" y="643.0" width="95.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="456.9" y="654.0">ru/mail/pol..</text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (9 samples, 0.26%)</title><rect x="454.2" y="627.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="457.2" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeyIterator.next (1 samples, 0.03%)</title><rect x="455.6" y="611.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="458.6" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (1 samples, 0.03%)</title><rect x="455.6" y="595.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="458.6" y="606.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.03%)</title><rect x="455.6" y="579.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="458.6" y="590.0"></text>
</g>
<g>
<title>java/util/TreeSet.iterator (3 samples, 0.09%)</title><rect x="455.9" y="611.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="458.9" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap.navigableKeySet (2 samples, 0.06%)</title><rect x="456.3" y="595.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="459.3" y="606.0"></text>
</g>
<g>
<title>java/util/TreeSet.size (1 samples, 0.03%)</title><rect x="457.0" y="611.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="460.0" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap.size (1 samples, 0.03%)</title><rect x="457.0" y="595.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="460.0" y="606.0"></text>
</g>
<g>
<title>java/util/TreeMap.values (1 samples, 0.03%)</title><rect x="457.3" y="627.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="460.3" y="638.0"></text>
</g>
<g>
<title>java/util/TreeSet.&lt;init&gt; (268 samples, 7.81%)</title><rect x="457.7" y="627.0" width="92.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="460.7" y="638.0">java/util/T..</text>
</g>
<g>
<title>java/util/TreeSet.addAll (268 samples, 7.81%)</title><rect x="457.7" y="611.0" width="92.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="460.7" y="622.0">java/util/T..</text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (262 samples, 7.63%)</title><rect x="459.4" y="595.0" width="90.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="462.4" y="606.0">java/util/..</text>
</g>
<g>
<title>java/util/TreeMap$ValueIterator.next (47 samples, 1.37%)</title><rect x="465.9" y="579.0" width="16.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="468.9" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (47 samples, 1.37%)</title><rect x="465.9" y="563.0" width="16.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="468.9" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (37 samples, 1.08%)</title><rect x="469.3" y="547.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="472.3" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap$Values.iterator (54 samples, 1.57%)</title><rect x="482.1" y="579.0" width="18.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="485.1" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (54 samples, 1.57%)</title><rect x="482.1" y="563.0" width="18.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="485.1" y="574.0"></text>
</g>
<g>
<title>asm_sysvec_reschedule_ipi (1 samples, 0.03%)</title><rect x="500.3" y="547.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="503.3" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="500.3" y="531.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="503.3" y="542.0"></text>
</g>
<g>
<title>__prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="500.3" y="515.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="503.3" y="526.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="500.3" y="499.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="503.3" y="510.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.03%)</title><rect x="500.3" y="483.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="503.3" y="494.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (10 samples, 0.29%)</title><rect x="500.6" y="579.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="503.6" y="590.0"></text>
</g>
<g>
<title>java/util/TreeSet.add (132 samples, 3.85%)</title><rect x="504.1" y="579.0" width="45.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="507.1" y="590.0">java..</text>
</g>
<g>
<title>java/util/TreeMap.put (120 samples, 3.50%)</title><rect x="508.2" y="563.0" width="41.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="511.2" y="574.0">jav..</text>
</g>
<g>
<title>asm_sysvec_reschedule_ipi (2 samples, 0.06%)</title><rect x="547.4" y="547.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="550.4" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="547.4" y="531.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="550.4" y="542.0"></text>
</g>
<g>
<title>__prepare_exit_to_usermode (2 samples, 0.06%)</title><rect x="547.4" y="515.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="550.4" y="526.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="547.7" y="499.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="550.7" y="510.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (3 samples, 0.09%)</title><rect x="548.1" y="547.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="551.1" y="558.0"></text>
</g>
<g>
<title>java/lang/Integer.compareTo (3 samples, 0.09%)</title><rect x="548.1" y="531.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="551.1" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.03%)</title><rect x="549.1" y="547.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="552.1" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.03%)</title><rect x="549.5" y="595.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="552.5" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/ConsistentHashing.get (4 samples, 0.12%)</title><rect x="549.8" y="659.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="552.8" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/ConsistentHashing.get (4 samples, 0.12%)</title><rect x="549.8" y="643.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="552.8" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (1 samples, 0.03%)</title><rect x="550.1" y="627.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="553.1" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap.ceilingEntry (1 samples, 0.03%)</title><rect x="550.5" y="627.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="553.5" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap.exportEntry (1 samples, 0.03%)</title><rect x="550.5" y="611.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="553.5" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap.containsKey (1 samples, 0.03%)</title><rect x="550.8" y="627.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="553.8" y="638.0"></text>
</g>
<g>
<title>java/util/TreeMap.getEntry (1 samples, 0.03%)</title><rect x="550.8" y="611.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="553.8" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/ConsistentHashing.getReplNodes (253 samples, 7.37%)</title><rect x="551.2" y="659.0" width="87.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="554.2" y="670.0">ru/mail/po..</text>
</g>
<g>
<title>ru/mail/polis/service/gogun/ConsistentHashing.getReplNodes (253 samples, 7.37%)</title><rect x="551.2" y="643.0" width="87.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="554.2" y="654.0">ru/mail/po..</text>
</g>
<g>
<title>java/util/Arrays$ArrayList.indexOf (3 samples, 0.09%)</title><rect x="551.5" y="627.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="554.5" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3 samples, 0.09%)</title><rect x="551.5" y="611.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="554.5" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/ConsistentHashing.all (249 samples, 7.26%)</title><rect x="552.6" y="627.0" width="85.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="555.6" y="638.0">ru/mail/po..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="552.6" y="611.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="555.6" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="552.6" y="595.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="555.6" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="552.6" y="579.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="555.6" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="552.6" y="563.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="555.6" y="574.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="552.6" y="547.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="555.6" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="552.6" y="531.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="555.6" y="542.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="552.6" y="515.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="555.6" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.03%)</title><rect x="552.6" y="499.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="555.6" y="510.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="552.6" y="483.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="555.6" y="494.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (6 samples, 0.17%)</title><rect x="552.9" y="611.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="555.9" y="622.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeyIterator.next (1 samples, 0.03%)</title><rect x="553.6" y="595.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="556.6" y="606.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (1 samples, 0.03%)</title><rect x="553.6" y="579.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="556.6" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.03%)</title><rect x="553.6" y="563.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="556.6" y="574.0"></text>
</g>
<g>
<title>java/util/TreeSet.iterator (1 samples, 0.03%)</title><rect x="553.9" y="595.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="556.9" y="606.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (1 samples, 0.03%)</title><rect x="553.9" y="579.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="556.9" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (1 samples, 0.03%)</title><rect x="553.9" y="563.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="556.9" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (1 samples, 0.03%)</title><rect x="553.9" y="547.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="556.9" y="558.0"></text>
</g>
<g>
<title>java/util/TreeSet.size (2 samples, 0.06%)</title><rect x="554.3" y="595.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="557.3" y="606.0"></text>
</g>
<g>
<title>java/util/TreeMap.size (1 samples, 0.03%)</title><rect x="554.6" y="579.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="557.6" y="590.0"></text>
</g>
<g>
<title>java/util/TreeSet.&lt;init&gt; (242 samples, 7.05%)</title><rect x="555.0" y="611.0" width="83.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="558.0" y="622.0">java/util..</text>
</g>
<g>
<title>java/util/TreeSet.addAll (242 samples, 7.05%)</title><rect x="555.0" y="595.0" width="83.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="558.0" y="606.0">java/util..</text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (237 samples, 6.91%)</title><rect x="555.3" y="579.0" width="81.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="558.3" y="590.0">java/util..</text>
</g>
<g>
<title>java/util/TreeMap$ValueIterator.next (36 samples, 1.05%)</title><rect x="562.9" y="563.0" width="12.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="565.9" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (36 samples, 1.05%)</title><rect x="562.9" y="547.0" width="12.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="565.9" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (32 samples, 0.93%)</title><rect x="564.2" y="531.0" width="11.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="567.2" y="542.0"></text>
</g>
<g>
<title>java/util/TreeMap$Values.iterator (33 samples, 0.96%)</title><rect x="575.2" y="563.0" width="11.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="578.2" y="574.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (33 samples, 0.96%)</title><rect x="575.2" y="547.0" width="11.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="578.2" y="558.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (3 samples, 0.09%)</title><rect x="586.6" y="563.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="589.6" y="574.0"></text>
</g>
<g>
<title>java/util/TreeSet.add (143 samples, 4.17%)</title><rect x="587.6" y="563.0" width="49.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="590.6" y="574.0">java/..</text>
</g>
<g>
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="593.8" y="547.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="596.8" y="558.0"></text>
</g>
<g>
<title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="593.8" y="531.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="596.8" y="542.0"></text>
</g>
<g>
<title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="593.8" y="515.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="596.8" y="526.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="593.8" y="499.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="596.8" y="510.0"></text>
</g>
<g>
<title>asm_call_sysvec_on_stack (1 samples, 0.03%)</title><rect x="593.8" y="483.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="596.8" y="494.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="593.8" y="467.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="596.8" y="478.0"></text>
</g>
<g>
<title>run_timer_softirq (1 samples, 0.03%)</title><rect x="593.8" y="451.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="596.8" y="462.0"></text>
</g>
<g>
<title>__run_timers (1 samples, 0.03%)</title><rect x="593.8" y="435.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="596.8" y="446.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irq (1 samples, 0.03%)</title><rect x="593.8" y="419.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="596.8" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (124 samples, 3.61%)</title><rect x="594.2" y="547.0" width="42.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="597.2" y="558.0">java..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.06%)</title><rect x="636.1" y="531.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="639.1" y="542.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="636.4" y="515.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="639.4" y="526.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="636.4" y="499.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="639.4" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="636.4" y="483.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="639.4" y="494.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="636.4" y="467.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="639.4" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="636.4" y="451.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="639.4" y="462.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.03%)</title><rect x="636.4" y="435.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="639.4" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.ceilingEntry (4 samples, 0.12%)</title><rect x="636.8" y="579.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="639.8" y="590.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (4 samples, 0.12%)</title><rect x="636.8" y="563.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="639.8" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/ServiceUtils.getBuffer (3 samples, 0.09%)</title><rect x="638.2" y="659.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="641.2" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.09%)</title><rect x="638.2" y="643.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="641.2" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.09%)</title><rect x="638.2" y="627.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="641.2" y="638.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.03%)</title><rect x="638.2" y="611.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="641.2" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.06%)</title><rect x="638.5" y="611.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="641.5" y="622.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.06%)</title><rect x="638.5" y="595.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="641.5" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.06%)</title><rect x="638.5" y="579.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="641.5" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="638.5" y="563.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="641.5" y="574.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.06%)</title><rect x="638.5" y="547.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="641.5" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="638.5" y="531.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="641.5" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="638.9" y="531.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="641.9" y="542.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.03%)</title><rect x="638.9" y="515.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="641.9" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/ServiceUtils.selector (740 samples, 21.56%)</title><rect x="639.2" y="659.0" width="254.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="642.2" y="670.0">ru/mail/polis/service/gogun/Servic..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (636 samples, 18.53%)</title><rect x="641.6" y="643.0" width="218.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="644.6" y="654.0">one/nio/http/HttpSession.send..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.06%)</title><rect x="645.0" y="627.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="648.0" y="638.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (2 samples, 0.06%)</title><rect x="645.0" y="611.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="648.0" y="622.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.06%)</title><rect x="645.0" y="595.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="648.0" y="606.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (7 samples, 0.20%)</title><rect x="645.7" y="627.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="648.7" y="638.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.20%)</title><rect x="645.7" y="611.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="648.7" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.20%)</title><rect x="645.7" y="595.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="648.7" y="606.0"></text>
</g>
<g>
<title>_complete_monitor_locking_Java (1 samples, 0.03%)</title><rect x="647.1" y="579.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="650.1" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (2 samples, 0.06%)</title><rect x="647.4" y="579.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="650.4" y="590.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (604 samples, 17.60%)</title><rect x="648.1" y="627.0" width="207.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="651.1" y="638.0">one/nio/http/HttpSession.wr..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (23 samples, 0.67%)</title><rect x="648.1" y="611.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="651.1" y="622.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2 samples, 0.06%)</title><rect x="648.8" y="595.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="651.8" y="606.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.06%)</title><rect x="648.8" y="579.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="651.8" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.06%)</title><rect x="648.8" y="563.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="651.8" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="648.8" y="547.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="651.8" y="558.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="648.8" y="531.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="651.8" y="542.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.03%)</title><rect x="648.8" y="515.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="651.8" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="649.2" y="531.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="652.2" y="542.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (19 samples, 0.55%)</title><rect x="649.5" y="595.0" width="6.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="652.5" y="606.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (8 samples, 0.23%)</title><rect x="649.5" y="579.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="652.5" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 0.32%)</title><rect x="652.3" y="579.0" width="3.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="655.3" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 0.32%)</title><rect x="652.3" y="563.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="655.3" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (11 samples, 0.32%)</title><rect x="652.3" y="547.0" width="3.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="655.3" y="558.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (581 samples, 16.93%)</title><rect x="656.0" y="611.0" width="199.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="659.0" y="622.0">one/nio/net/Session.write</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.06%)</title><rect x="656.4" y="595.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="659.4" y="606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.06%)</title><rect x="656.4" y="579.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="659.4" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.06%)</title><rect x="656.4" y="563.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="659.4" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="656.4" y="547.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="659.4" y="558.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="656.4" y="531.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="659.4" y="542.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.03%)</title><rect x="656.4" y="515.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="659.4" y="526.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="656.7" y="531.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="659.7" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="656.7" y="515.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="659.7" y="526.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="656.7" y="499.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="659.7" y="510.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="656.7" y="483.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="659.7" y="494.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (578 samples, 16.84%)</title><rect x="657.1" y="595.0" width="198.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="660.1" y="606.0">one/nio/net/Session.write</text>
</g>
<g>
<title>gettimeofday (2 samples, 0.06%)</title><rect x="657.4" y="579.0" width="0.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="660.4" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (573 samples, 16.70%)</title><rect x="658.1" y="579.0" width="197.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="661.1" y="590.0">one/nio/net/Session$ArrayQ..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (572 samples, 16.67%)</title><rect x="658.4" y="563.0" width="196.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="661.4" y="574.0">one/nio/net/NativeSocket.w..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (13 samples, 0.38%)</title><rect x="659.8" y="547.0" width="4.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="662.8" y="558.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="661.2" y="531.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="664.2" y="542.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (2 samples, 0.06%)</title><rect x="661.5" y="531.0" width="0.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="664.5" y="542.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (6 samples, 0.17%)</title><rect x="662.2" y="531.0" width="2.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="665.2" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.06%)</title><rect x="662.9" y="515.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="665.9" y="526.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.06%)</title><rect x="663.6" y="515.0" width="0.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="666.6" y="526.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (4 samples, 0.12%)</title><rect x="664.3" y="547.0" width="1.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="667.3" y="558.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.06%)</title><rect x="665.7" y="547.0" width="0.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="668.7" y="558.0"></text>
</g>
<g>
<title>__libc_send (546 samples, 15.91%)</title><rect x="666.4" y="547.0" width="187.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="669.4" y="558.0">__libc_send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (531 samples, 15.47%)</title><rect x="671.5" y="531.0" width="182.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="674.5" y="542.0">entry_SYSCALL_64_after_h..</text>
</g>
<g>
<title>do_syscall_64 (531 samples, 15.47%)</title><rect x="671.5" y="515.0" width="182.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="674.5" y="526.0">do_syscall_64</text>
</g>
<g>
<title>__syscall_return_slowpath (5 samples, 0.15%)</title><rect x="675.6" y="499.0" width="1.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="678.6" y="510.0"></text>
</g>
<g>
<title>__audit_syscall_exit (5 samples, 0.15%)</title><rect x="675.6" y="483.0" width="1.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="678.6" y="494.0"></text>
</g>
<g>
<title>path_put (1 samples, 0.03%)</title><rect x="676.7" y="467.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="679.7" y="478.0"></text>
</g>
<g>
<title>dput (1 samples, 0.03%)</title><rect x="676.7" y="451.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="679.7" y="462.0"></text>
</g>
<g>
<title>unroll_tree_refs (1 samples, 0.03%)</title><rect x="677.0" y="467.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="680.0" y="478.0"></text>
</g>
<g>
<title>__x64_sys_sendto (510 samples, 14.86%)</title><rect x="677.4" y="499.0" width="175.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="680.4" y="510.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (508 samples, 14.80%)</title><rect x="678.0" y="483.0" width="174.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="681.0" y="494.0">__sys_sendto</text>
</g>
<g>
<title>import_single_range (2 samples, 0.06%)</title><rect x="679.8" y="467.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="682.8" y="478.0"></text>
</g>
<g>
<title>sock_sendmsg (488 samples, 14.22%)</title><rect x="680.5" y="467.0" width="167.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="683.5" y="478.0">sock_sendmsg</text>
</g>
<g>
<title>inet6_sendmsg (2 samples, 0.06%)</title><rect x="680.5" y="451.0" width="0.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="683.5" y="462.0"></text>
</g>
<g>
<title>inet_send_prepare (2 samples, 0.06%)</title><rect x="680.5" y="435.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="683.5" y="446.0"></text>
</g>
<g>
<title>tcp_sendmsg (486 samples, 14.16%)</title><rect x="681.1" y="451.0" width="167.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="684.1" y="462.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.03%)</title><rect x="681.1" y="435.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="684.1" y="446.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.03%)</title><rect x="681.5" y="435.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="684.5" y="446.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="681.5" y="419.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="684.5" y="430.0"></text>
</g>
<g>
<title>release_sock (14 samples, 0.41%)</title><rect x="681.8" y="435.0" width="4.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="684.8" y="446.0"></text>
</g>
<g>
<title>__release_sock (9 samples, 0.26%)</title><rect x="681.8" y="419.0" width="3.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="684.8" y="430.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (9 samples, 0.26%)</title><rect x="681.8" y="403.0" width="3.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="684.8" y="414.0"></text>
</g>
<g>
<title>tcp_rcv_established (8 samples, 0.23%)</title><rect x="682.2" y="387.0" width="2.7" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="685.2" y="398.0"></text>
</g>
<g>
<title>sock_def_readable (7 samples, 0.20%)</title><rect x="682.2" y="371.0" width="2.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="685.2" y="382.0"></text>
</g>
<g>
<title>__wake_up_common_lock (7 samples, 0.20%)</title><rect x="682.2" y="355.0" width="2.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="685.2" y="366.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (6 samples, 0.17%)</title><rect x="682.5" y="339.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="685.5" y="350.0"></text>
</g>
<g>
<title>tcp_check_space (1 samples, 0.03%)</title><rect x="684.6" y="371.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="687.6" y="382.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (5 samples, 0.15%)</title><rect x="684.9" y="419.0" width="1.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="687.9" y="430.0"></text>
</g>
<g>
<title>preempt_count_add (2 samples, 0.06%)</title><rect x="686.0" y="403.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="689.0" y="414.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (470 samples, 13.69%)</title><rect x="686.6" y="435.0" width="161.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="689.6" y="446.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__tcp_push_pending_frames (396 samples, 11.54%)</title><rect x="691.5" y="419.0" width="136.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="694.5" y="430.0">__tcp_push_pendin..</text>
</g>
<g>
<title>tcp_write_xmit (396 samples, 11.54%)</title><rect x="691.5" y="403.0" width="136.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="694.5" y="414.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_transmit_skb (363 samples, 10.58%)</title><rect x="695.9" y="387.0" width="124.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="698.9" y="398.0">__tcp_transmit_..</text>
</g>
<g>
<title>__ip_queue_xmit (335 samples, 9.76%)</title><rect x="700.7" y="371.0" width="115.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="703.7" y="382.0">__ip_queue_xmit</text>
</g>
<g>
<title>__ip_local_out (1 samples, 0.03%)</title><rect x="701.1" y="355.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="704.1" y="366.0"></text>
</g>
<g>
<title>__sk_dst_check (6 samples, 0.17%)</title><rect x="701.4" y="355.0" width="2.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="704.4" y="366.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.09%)</title><rect x="702.5" y="339.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="705.5" y="350.0"></text>
</g>
<g>
<title>ip_output (326 samples, 9.50%)</title><rect x="703.5" y="355.0" width="112.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="706.5" y="366.0">ip_output</text>
</g>
<g>
<title>__ip_finish_output (1 samples, 0.03%)</title><rect x="704.2" y="339.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="707.2" y="350.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.03%)</title><rect x="704.2" y="323.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="707.2" y="334.0"></text>
</g>
<g>
<title>ip_finish_output2 (319 samples, 9.29%)</title><rect x="704.5" y="339.0" width="109.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="707.5" y="350.0">ip_finish_out..</text>
</g>
<g>
<title>__dev_queue_xmit (29 samples, 0.84%)</title><rect x="705.6" y="323.0" width="9.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="708.6" y="334.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (16 samples, 0.47%)</title><rect x="707.3" y="307.0" width="5.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="710.3" y="318.0"></text>
</g>
<g>
<title>loopback_xmit (16 samples, 0.47%)</title><rect x="707.3" y="291.0" width="5.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="710.3" y="302.0"></text>
</g>
<g>
<title>eth_type_trans (2 samples, 0.06%)</title><rect x="708.0" y="275.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="711.0" y="286.0"></text>
</g>
<g>
<title>netif_rx (8 samples, 0.23%)</title><rect x="708.6" y="275.0" width="2.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="711.6" y="286.0"></text>
</g>
<g>
<title>netif_rx_internal (7 samples, 0.20%)</title><rect x="709.0" y="259.0" width="2.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="712.0" y="270.0"></text>
</g>
<g>
<title>enqueue_to_backlog (7 samples, 0.20%)</title><rect x="709.0" y="243.0" width="2.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="712.0" y="254.0"></text>
</g>
<g>
<title>sk_free (1 samples, 0.03%)</title><rect x="711.4" y="275.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="714.4" y="286.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (1 samples, 0.03%)</title><rect x="711.7" y="275.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="714.7" y="286.0"></text>
</g>
<g>
<title>tcp_wfree (2 samples, 0.06%)</title><rect x="712.1" y="275.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="715.1" y="286.0"></text>
</g>
<g>
<title>netdev_core_pick_tx (1 samples, 0.03%)</title><rect x="712.8" y="307.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="715.8" y="318.0"></text>
</g>
<g>
<title>validate_xmit_skb (6 samples, 0.17%)</title><rect x="713.1" y="307.0" width="2.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="716.1" y="318.0"></text>
</g>
<g>
<title>netif_skb_features (5 samples, 0.15%)</title><rect x="713.5" y="291.0" width="1.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="716.5" y="302.0"></text>
</g>
<g>
<title>skb_network_protocol (1 samples, 0.03%)</title><rect x="714.8" y="275.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="717.8" y="286.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (1 samples, 0.03%)</title><rect x="715.2" y="307.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="718.2" y="318.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (287 samples, 8.36%)</title><rect x="715.5" y="323.0" width="98.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="718.5" y="334.0">__local_bh_e..</text>
</g>
<g>
<title>do_softirq (281 samples, 8.19%)</title><rect x="715.9" y="307.0" width="96.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="718.9" y="318.0">do_softirq</text>
</g>
<g>
<title>do_softirq_own_stack (275 samples, 8.01%)</title><rect x="717.9" y="291.0" width="94.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="720.9" y="302.0">do_softirq_..</text>
</g>
<g>
<title>asm_call_sysvec_on_stack (275 samples, 8.01%)</title><rect x="717.9" y="275.0" width="94.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="720.9" y="286.0">asm_call_sy..</text>
</g>
<g>
<title>__softirqentry_text_start (275 samples, 8.01%)</title><rect x="717.9" y="259.0" width="94.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="720.9" y="270.0">__softirqen..</text>
</g>
<g>
<title>net_rx_action (267 samples, 7.78%)</title><rect x="720.7" y="243.0" width="91.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="723.7" y="254.0">net_rx_action</text>
</g>
<g>
<title>check_preemption_disabled (1 samples, 0.03%)</title><rect x="721.4" y="227.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="724.4" y="238.0"></text>
</g>
<g>
<title>process_backlog (264 samples, 7.69%)</title><rect x="721.7" y="227.0" width="90.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="724.7" y="238.0">process_ba..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (256 samples, 7.46%)</title><rect x="724.1" y="211.0" width="88.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="727.1" y="222.0">__netif_re..</text>
</g>
<g>
<title>__netif_receive_skb_core (5 samples, 0.15%)</title><rect x="724.5" y="195.0" width="1.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="727.5" y="206.0"></text>
</g>
<g>
<title>ip_rcv (250 samples, 7.28%)</title><rect x="726.2" y="195.0" width="85.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="729.2" y="206.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (237 samples, 6.91%)</title><rect x="727.9" y="179.0" width="81.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="730.9" y="190.0">ip_local_..</text>
</g>
<g>
<title>ip_local_deliver_finish (236 samples, 6.88%)</title><rect x="728.2" y="163.0" width="81.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="731.2" y="174.0">ip_local_..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (235 samples, 6.85%)</title><rect x="728.6" y="147.0" width="80.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="731.6" y="158.0">ip_protoc..</text>
</g>
<g>
<title>tcp_v4_rcv (234 samples, 6.82%)</title><rect x="728.9" y="131.0" width="80.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="731.9" y="142.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (11 samples, 0.32%)</title><rect x="731.3" y="115.0" width="3.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="734.3" y="126.0"></text>
</g>
<g>
<title>_raw_spin_lock (2 samples, 0.06%)</title><rect x="735.1" y="115.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="738.1" y="126.0"></text>
</g>
<g>
<title>_raw_spin_unlock (1 samples, 0.03%)</title><rect x="735.8" y="115.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="738.8" y="126.0"></text>
</g>
<g>
<title>check_preemption_disabled (1 samples, 0.03%)</title><rect x="736.2" y="115.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="739.2" y="126.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (5 samples, 0.15%)</title><rect x="736.5" y="115.0" width="1.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="739.5" y="126.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (4 samples, 0.12%)</title><rect x="736.5" y="99.0" width="1.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="739.5" y="110.0"></text>
</g>
<g>
<title>preempt_count_sub (1 samples, 0.03%)</title><rect x="737.5" y="83.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="740.5" y="94.0"></text>
</g>
<g>
<title>__rcu_read_lock (1 samples, 0.03%)</title><rect x="737.9" y="99.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="740.9" y="110.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (206 samples, 6.00%)</title><rect x="738.2" y="115.0" width="70.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="741.2" y="126.0">tcp_v4_d..</text>
</g>
<g>
<title>__x86_retpoline_rax (1 samples, 0.03%)</title><rect x="738.6" y="99.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="741.6" y="110.0"></text>
</g>
<g>
<title>tcp_rcv_established (204 samples, 5.94%)</title><rect x="738.9" y="99.0" width="70.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="741.9" y="110.0">tcp_rcv_..</text>
</g>
<g>
<title>__x86_retpoline_rax (1 samples, 0.03%)</title><rect x="741.0" y="83.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="744.0" y="94.0"></text>
</g>
<g>
<title>ktime_get_seconds (2 samples, 0.06%)</title><rect x="741.3" y="83.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="744.3" y="94.0"></text>
</g>
<g>
<title>sk_reset_timer (10 samples, 0.29%)</title><rect x="742.0" y="83.0" width="3.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="745.0" y="94.0"></text>
</g>
<g>
<title>__mod_timer (10 samples, 0.29%)</title><rect x="742.0" y="67.0" width="3.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="745.0" y="78.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (10 samples, 0.29%)</title><rect x="742.0" y="51.0" width="3.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="745.0" y="62.0"></text>
</g>
<g>
<title>sock_def_readable (118 samples, 3.44%)</title><rect x="745.4" y="83.0" width="40.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="748.4" y="94.0">soc..</text>
</g>
<g>
<title>__wake_up_common_lock (114 samples, 3.32%)</title><rect x="746.8" y="67.0" width="39.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="749.8" y="78.0">__w..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (114 samples, 3.32%)</title><rect x="746.8" y="51.0" width="39.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="749.8" y="62.0">_ra..</text>
</g>
<g>
<title>tcp_ack (58 samples, 1.69%)</title><rect x="786.0" y="83.0" width="19.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="789.0" y="94.0"></text>
</g>
<g>
<title>__kfree_skb (20 samples, 0.58%)</title><rect x="790.1" y="67.0" width="6.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="793.1" y="78.0"></text>
</g>
<g>
<title>kfree (9 samples, 0.26%)</title><rect x="790.1" y="51.0" width="3.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="793.1" y="62.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.09%)</title><rect x="791.2" y="35.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="794.2" y="46.0"></text>
</g>
<g>
<title>slab_free_freelist_hook (3 samples, 0.09%)</title><rect x="792.2" y="35.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="795.2" y="46.0"></text>
</g>
<g>
<title>skb_release_data (11 samples, 0.32%)</title><rect x="793.2" y="51.0" width="3.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="796.2" y="62.0"></text>
</g>
<g>
<title>bictcp_acked (5 samples, 0.15%)</title><rect x="797.0" y="67.0" width="1.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="800.0" y="78.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (2 samples, 0.06%)</title><rect x="798.7" y="67.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="801.7" y="78.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.03%)</title><rect x="799.4" y="67.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="802.4" y="78.0"></text>
</g>
<g>
<title>kmem_cache_free (7 samples, 0.20%)</title><rect x="799.8" y="67.0" width="2.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="802.8" y="78.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.06%)</title><rect x="800.1" y="51.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="803.1" y="62.0"></text>
</g>
<g>
<title>cache_from_obj (2 samples, 0.06%)</title><rect x="800.8" y="51.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="803.8" y="62.0"></text>
</g>
<g>
<title>slab_free_freelist_hook (2 samples, 0.06%)</title><rect x="801.5" y="51.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="804.5" y="62.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt (5 samples, 0.15%)</title><rect x="802.2" y="67.0" width="1.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="805.2" y="78.0"></text>
</g>
<g>
<title>tcp_chrono_stop (2 samples, 0.06%)</title><rect x="803.9" y="67.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="806.9" y="78.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.03%)</title><rect x="804.6" y="67.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="807.6" y="78.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (3 samples, 0.09%)</title><rect x="804.9" y="67.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="807.9" y="78.0"></text>
</g>
<g>
<title>tcp_check_space (1 samples, 0.03%)</title><rect x="805.9" y="83.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="808.9" y="94.0"></text>
</g>
<g>
<title>tcp_event_data_recv (1 samples, 0.03%)</title><rect x="806.3" y="83.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="809.3" y="94.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.06%)</title><rect x="806.6" y="83.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="809.6" y="94.0"></text>
</g>
<g>
<title>ktime_get (1 samples, 0.03%)</title><rect x="807.0" y="67.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="810.0" y="78.0"></text>
</g>
<g>
<title>read_tsc (1 samples, 0.03%)</title><rect x="807.0" y="51.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="810.0" y="62.0"></text>
</g>
<g>
<title>tcp_queue_rcv (5 samples, 0.15%)</title><rect x="807.3" y="83.0" width="1.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="810.3" y="94.0"></text>
</g>
<g>
<title>tcp_v4_inbound_md5_hash (1 samples, 0.03%)</title><rect x="809.0" y="115.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="812.0" y="126.0"></text>
</g>
<g>
<title>tcp_parse_md5sig_option (1 samples, 0.03%)</title><rect x="809.0" y="99.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="812.0" y="110.0"></text>
</g>
<g>
<title>ip_rcv_core (3 samples, 0.09%)</title><rect x="809.4" y="179.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="812.4" y="190.0"></text>
</g>
<g>
<title>__this_cpu_preempt_check (1 samples, 0.03%)</title><rect x="809.7" y="163.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="812.7" y="174.0"></text>
</g>
<g>
<title>check_preemption_disabled (1 samples, 0.03%)</title><rect x="810.1" y="163.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="813.1" y="174.0"></text>
</g>
<g>
<title>ip_rcv_finish (5 samples, 0.15%)</title><rect x="810.4" y="179.0" width="1.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="813.4" y="190.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.constprop.0 (5 samples, 0.15%)</title><rect x="810.4" y="163.0" width="1.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="813.4" y="174.0"></text>
</g>
<g>
<title>__rcu_read_lock (1 samples, 0.03%)</title><rect x="812.1" y="211.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="815.1" y="222.0"></text>
</g>
<g>
<title>preempt_schedule_thunk (5 samples, 0.15%)</title><rect x="812.5" y="307.0" width="1.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="815.5" y="318.0"></text>
</g>
<g>
<title>preempt_schedule (1 samples, 0.03%)</title><rect x="812.8" y="291.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="815.8" y="302.0"></text>
</g>
<g>
<title>preempt_schedule_common (3 samples, 0.09%)</title><rect x="813.2" y="291.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="816.2" y="302.0"></text>
</g>
<g>
<title>__schedule (3 samples, 0.09%)</title><rect x="813.2" y="275.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="816.2" y="286.0"></text>
</g>
<g>
<title>finish_task_switch (3 samples, 0.09%)</title><rect x="813.2" y="259.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="816.2" y="270.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irq (3 samples, 0.09%)</title><rect x="813.2" y="243.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="816.2" y="254.0"></text>
</g>
<g>
<title>ip_finish_output (4 samples, 0.12%)</title><rect x="814.2" y="339.0" width="1.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="817.2" y="350.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (4 samples, 0.12%)</title><rect x="814.2" y="323.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="817.2" y="334.0"></text>
</g>
<g>
<title>rcu_preempt_deferred_qs_irqrestore (1 samples, 0.03%)</title><rect x="815.6" y="355.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="818.6" y="366.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.03%)</title><rect x="815.6" y="339.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="818.6" y="350.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.03%)</title><rect x="815.9" y="371.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="818.9" y="382.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.03%)</title><rect x="816.3" y="371.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="819.3" y="382.0"></text>
</g>
<g>
<title>skb_clone (4 samples, 0.12%)</title><rect x="816.6" y="371.0" width="1.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="819.6" y="382.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.03%)</title><rect x="817.6" y="355.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="820.6" y="366.0"></text>
</g>
<g>
<title>skb_push (1 samples, 0.03%)</title><rect x="818.0" y="371.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="821.0" y="382.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.03%)</title><rect x="818.3" y="371.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="821.3" y="382.0"></text>
</g>
<g>
<title>tcp_options_write (1 samples, 0.03%)</title><rect x="818.7" y="371.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="821.7" y="382.0"></text>
</g>
<g>
<title>tcp_rate_skb_sent (1 samples, 0.03%)</title><rect x="819.0" y="371.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="822.0" y="382.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (2 samples, 0.06%)</title><rect x="819.4" y="371.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="822.4" y="382.0"></text>
</g>
<g>
<title>tcp_v4_send_check (2 samples, 0.06%)</title><rect x="820.0" y="371.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="823.0" y="382.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.06%)</title><rect x="820.7" y="387.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="823.7" y="398.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (11 samples, 0.32%)</title><rect x="821.4" y="387.0" width="3.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="824.4" y="398.0"></text>
</g>
<g>
<title>sk_reset_timer (8 samples, 0.23%)</title><rect x="821.4" y="371.0" width="2.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="824.4" y="382.0"></text>
</g>
<g>
<title>__mod_timer (8 samples, 0.23%)</title><rect x="821.4" y="355.0" width="2.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="824.4" y="366.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (5 samples, 0.15%)</title><rect x="822.1" y="339.0" width="1.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="825.1" y="350.0"></text>
</g>
<g>
<title>lock_timer_base.constprop.0 (1 samples, 0.03%)</title><rect x="823.8" y="339.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="826.8" y="350.0"></text>
</g>
<g>
<title>tcp_rearm_rto (3 samples, 0.09%)</title><rect x="824.2" y="371.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="827.2" y="382.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe.part.0 (3 samples, 0.09%)</title><rect x="825.2" y="387.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="828.2" y="398.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.03%)</title><rect x="825.9" y="371.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="828.9" y="382.0"></text>
</g>
<g>
<title>__mod_timer (1 samples, 0.03%)</title><rect x="825.9" y="355.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="828.9" y="366.0"></text>
</g>
<g>
<title>tcp_small_queue_check.isra.0 (4 samples, 0.12%)</title><rect x="826.2" y="387.0" width="1.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="829.2" y="398.0"></text>
</g>
<g>
<title>sk_page_frag_refill (6 samples, 0.17%)</title><rect x="827.6" y="419.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="830.6" y="430.0"></text>
</g>
<g>
<title>skb_page_frag_refill (6 samples, 0.17%)</title><rect x="827.6" y="403.0" width="2.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="830.6" y="414.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (27 samples, 0.79%)</title><rect x="829.7" y="419.0" width="9.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="832.7" y="430.0"></text>
</g>
<g>
<title>__alloc_skb (25 samples, 0.73%)</title><rect x="830.4" y="403.0" width="8.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="833.4" y="414.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (12 samples, 0.35%)</title><rect x="832.4" y="387.0" width="4.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="835.4" y="398.0"></text>
</g>
<g>
<title>__slab_alloc.constprop.0 (3 samples, 0.09%)</title><rect x="834.1" y="371.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="837.1" y="382.0"></text>
</g>
<g>
<title>kmalloc_slab (3 samples, 0.09%)</title><rect x="835.2" y="371.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="838.2" y="382.0"></text>
</g>
<g>
<title>memcg_kmem_put_cache (1 samples, 0.03%)</title><rect x="836.2" y="371.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="839.2" y="382.0"></text>
</g>
<g>
<title>__ksize (1 samples, 0.03%)</title><rect x="836.6" y="387.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="839.6" y="398.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (6 samples, 0.17%)</title><rect x="836.9" y="387.0" width="2.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="839.9" y="398.0"></text>
</g>
<g>
<title>__slab_alloc.constprop.0 (1 samples, 0.03%)</title><rect x="838.6" y="371.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="841.6" y="382.0"></text>
</g>
<g>
<title>skb_do_copy_data_nocache (10 samples, 0.29%)</title><rect x="839.0" y="419.0" width="3.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="842.0" y="430.0"></text>
</g>
<g>
<title>__check_object_size (3 samples, 0.09%)</title><rect x="839.0" y="403.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="842.0" y="414.0"></text>
</g>
<g>
<title>__virt_addr_valid (3 samples, 0.09%)</title><rect x="839.0" y="387.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="842.0" y="398.0"></text>
</g>
<g>
<title>_copy_from_iter_full (7 samples, 0.20%)</title><rect x="840.0" y="403.0" width="2.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="843.0" y="414.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (5 samples, 0.15%)</title><rect x="840.3" y="387.0" width="1.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="843.3" y="398.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.03%)</title><rect x="842.1" y="387.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="845.1" y="398.0"></text>
</g>
<g>
<title>skb_entail (3 samples, 0.09%)</title><rect x="842.4" y="419.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="845.4" y="430.0"></text>
</g>
<g>
<title>sock_zerocopy_put (1 samples, 0.03%)</title><rect x="843.4" y="419.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="846.4" y="430.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (1 samples, 0.03%)</title><rect x="843.8" y="419.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="846.8" y="430.0"></text>
</g>
<g>
<title>tcp_send_mss (10 samples, 0.29%)</title><rect x="844.1" y="419.0" width="3.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="847.1" y="430.0"></text>
</g>
<g>
<title>tcp_current_mss (10 samples, 0.29%)</title><rect x="844.1" y="403.0" width="3.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="847.1" y="414.0"></text>
</g>
<g>
<title>ipv4_mtu (5 samples, 0.15%)</title><rect x="845.5" y="387.0" width="1.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="848.5" y="398.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.03%)</title><rect x="847.2" y="387.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="850.2" y="398.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.06%)</title><rect x="847.6" y="419.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="850.6" y="430.0"></text>
</g>
<g>
<title>sockfd_lookup_light (13 samples, 0.38%)</title><rect x="848.2" y="467.0" width="4.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="851.2" y="478.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.03%)</title><rect x="848.2" y="451.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="851.2" y="462.0"></text>
</g>
<g>
<title>__fget_light (12 samples, 0.35%)</title><rect x="848.6" y="451.0" width="4.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="851.6" y="462.0"></text>
</g>
<g>
<title>__fget_files (10 samples, 0.29%)</title><rect x="849.3" y="435.0" width="3.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="852.3" y="446.0"></text>
</g>
<g>
<title>__x86_retpoline_rax (1 samples, 0.03%)</title><rect x="852.7" y="499.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="855.7" y="510.0"></text>
</g>
<g>
<title>asm_sysvec_reschedule_ipi (1 samples, 0.03%)</title><rect x="853.1" y="499.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="856.1" y="510.0"></text>
</g>
<g>
<title>preempt_schedule_irq (1 samples, 0.03%)</title><rect x="853.1" y="483.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="856.1" y="494.0"></text>
</g>
<g>
<title>syscall_trace_enter (2 samples, 0.06%)</title><rect x="853.4" y="499.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="856.4" y="510.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.03%)</title><rect x="854.1" y="547.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="857.1" y="558.0"></text>
</g>
<g>
<title>send@plt (2 samples, 0.06%)</title><rect x="854.4" y="547.0" width="0.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="857.4" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.06%)</title><rect x="855.1" y="579.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="858.1" y="590.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="855.1" y="563.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="858.1" y="574.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="855.5" y="563.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="858.5" y="574.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (10 samples, 0.29%)</title><rect x="855.8" y="627.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="858.8" y="638.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (9 samples, 0.26%)</title><rect x="856.1" y="611.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="859.1" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (9 samples, 0.26%)</title><rect x="856.1" y="595.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="859.1" y="606.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (8 samples, 0.23%)</title><rect x="856.5" y="579.0" width="2.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="859.5" y="590.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (8 samples, 0.23%)</title><rect x="856.5" y="563.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="859.5" y="574.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (8 samples, 0.23%)</title><rect x="856.5" y="547.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="859.5" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (1 samples, 0.03%)</title><rect x="859.2" y="627.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="862.2" y="638.0"></text>
</g>
<g>
<title>one/nio/server/Server.incRequestsProcessed (2 samples, 0.06%)</title><rect x="859.6" y="627.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="862.6" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl$$Lambda$105/1334737046.get (1 samples, 0.03%)</title><rect x="860.3" y="643.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="863.3" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/MergeResponses.mergePutResponses (1 samples, 0.03%)</title><rect x="860.3" y="627.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="863.3" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl$$Lambda$85/1012089178.get (96 samples, 2.80%)</title><rect x="860.6" y="643.0" width="33.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="863.6" y="654.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl.lambda$handleRequest$2 (95 samples, 2.77%)</title><rect x="861.0" y="627.0" width="32.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="864.0" y="638.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl.handlePut (95 samples, 2.77%)</title><rect x="861.0" y="611.0" width="32.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="864.0" y="622.0">ru..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.06%)</title><rect x="861.0" y="595.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="864.0" y="606.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.03%)</title><rect x="861.0" y="579.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="864.0" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="861.3" y="579.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="864.3" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="861.3" y="563.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="864.3" y="574.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="861.3" y="547.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="864.3" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/DAOImpl.upsert (91 samples, 2.65%)</title><rect x="861.6" y="595.0" width="31.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="864.6" y="606.0">ru..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (8 samples, 0.23%)</title><rect x="861.6" y="579.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="864.6" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (8 samples, 0.23%)</title><rect x="861.6" y="563.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="864.6" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (8 samples, 0.23%)</title><rect x="861.6" y="547.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="864.6" y="558.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="861.6" y="531.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="864.6" y="542.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.03%)</title><rect x="861.6" y="515.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="864.6" y="526.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.06%)</title><rect x="862.0" y="531.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="865.0" y="542.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.06%)</title><rect x="862.0" y="515.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="865.0" y="526.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.06%)</title><rect x="862.0" y="499.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="865.0" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (5 samples, 0.15%)</title><rect x="862.7" y="531.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="865.7" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/MemTable.upsert (83 samples, 2.42%)</title><rect x="864.4" y="579.0" width="28.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="867.4" y="590.0">ru..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.06%)</title><rect x="865.1" y="563.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="868.1" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="865.4" y="547.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="868.4" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="865.4" y="531.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="868.4" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="865.4" y="515.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="868.4" y="526.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="865.4" y="499.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="868.4" y="510.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="865.4" y="483.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="868.4" y="494.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (1 samples, 0.03%)</title><rect x="865.4" y="467.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="868.4" y="478.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.03%)</title><rect x="865.4" y="451.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="868.4" y="462.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="865.4" y="435.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="868.4" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.09%)</title><rect x="865.8" y="563.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="868.8" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.03%)</title><rect x="865.8" y="547.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="868.8" y="558.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.06%)</title><rect x="866.1" y="547.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="869.1" y="558.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.06%)</title><rect x="866.1" y="531.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="869.1" y="542.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.06%)</title><rect x="866.1" y="515.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="869.1" y="526.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="866.1" y="499.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="869.1" y="510.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.06%)</title><rect x="866.1" y="483.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="869.1" y="494.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.06%)</title><rect x="866.1" y="467.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="869.1" y="478.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.06%)</title><rect x="866.1" y="451.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="869.1" y="462.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (2 samples, 0.06%)</title><rect x="866.1" y="435.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="869.1" y="446.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (2 samples, 0.06%)</title><rect x="866.1" y="419.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="869.1" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (75 samples, 2.19%)</title><rect x="866.8" y="563.0" width="25.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="869.8" y="574.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (72 samples, 2.10%)</title><rect x="867.5" y="547.0" width="24.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="870.5" y="558.0">j..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.03%)</title><rect x="867.5" y="531.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="870.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (40 samples, 1.17%)</title><rect x="867.8" y="531.0" width="13.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="870.8" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="881.6" y="531.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="884.6" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (1 samples, 0.03%)</title><rect x="881.6" y="515.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="884.6" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="881.6" y="499.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="884.6" y="510.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.03%)</title><rect x="881.6" y="483.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="884.6" y="494.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.03%)</title><rect x="881.6" y="467.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="884.6" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.03%)</title><rect x="881.6" y="451.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="884.6" y="462.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.03%)</title><rect x="881.6" y="435.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="884.6" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (30 samples, 0.87%)</title><rect x="881.9" y="531.0" width="10.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="884.9" y="542.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (30 samples, 0.87%)</title><rect x="881.9" y="515.0" width="10.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="884.9" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (24 samples, 0.70%)</title><rect x="884.0" y="499.0" width="8.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="887.0" y="510.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (5 samples, 0.15%)</title><rect x="885.0" y="483.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="888.0" y="494.0"></text>
</g>
<g>
<title>vectorizedMismatch (4 samples, 0.12%)</title><rect x="885.4" y="467.0" width="1.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="888.4" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.03%)</title><rect x="886.7" y="483.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="889.7" y="494.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (15 samples, 0.44%)</title><rect x="887.1" y="483.0" width="5.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="890.1" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.06%)</title><rect x="891.6" y="467.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="894.6" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.06%)</title><rect x="891.6" y="451.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="894.6" y="462.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.03%)</title><rect x="892.2" y="547.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="895.2" y="558.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.03%)</title><rect x="892.2" y="531.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="895.2" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Value.&lt;init&gt; (1 samples, 0.03%)</title><rect x="892.6" y="563.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="895.6" y="574.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.03%)</title><rect x="892.6" y="547.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="895.6" y="558.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="892.6" y="531.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="895.6" y="542.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="892.6" y="515.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="895.6" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/ServiceUtils.getBuffer (2 samples, 0.06%)</title><rect x="892.9" y="595.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="895.9" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.06%)</title><rect x="892.9" y="579.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="895.9" y="590.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.06%)</title><rect x="892.9" y="563.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="895.9" y="574.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.03%)</title><rect x="893.3" y="547.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="896.3" y="558.0"></text>
</g>
<g>
<title>asm_sysvec_reschedule_ipi (1 samples, 0.03%)</title><rect x="893.3" y="531.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="896.3" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="893.3" y="515.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="896.3" y="526.0"></text>
</g>
<g>
<title>__prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="893.3" y="499.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="896.3" y="510.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="893.3" y="483.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="896.3" y="494.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.03%)</title><rect x="893.3" y="467.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="896.3" y="478.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="893.3" y="451.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="896.3" y="462.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irq (1 samples, 0.03%)</title><rect x="893.3" y="435.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="896.3" y="446.0"></text>
</g>
<g>
<title>malloc (1 samples, 0.03%)</title><rect x="893.6" y="755.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="896.6" y="766.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (637 samples, 18.56%)</title><rect x="894.0" y="755.0" width="219.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="897.0" y="766.0">one/nio/server/SelectorThread..</text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="895.0" y="739.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="898.0" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.03%)</title><rect x="895.3" y="739.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="898.3" y="750.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (175 samples, 5.10%)</title><rect x="895.7" y="739.0" width="60.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="898.7" y="750.0">one/ni..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.06%)</title><rect x="896.0" y="723.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="899.0" y="734.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.03%)</title><rect x="896.0" y="707.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="899.0" y="718.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="896.4" y="707.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="899.4" y="718.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="896.4" y="691.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="899.4" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="896.4" y="675.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="899.4" y="686.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="896.4" y="659.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="899.4" y="670.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.03%)</title><rect x="896.4" y="643.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="899.4" y="654.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (6 samples, 0.17%)</title><rect x="896.7" y="723.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="899.7" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (6 samples, 0.17%)</title><rect x="896.7" y="707.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="899.7" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (166 samples, 4.84%)</title><rect x="898.8" y="723.0" width="57.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="901.8" y="734.0">one/ni..</text>
</g>
<g>
<title>JavaThread::check_special_condition_for_native_trans(JavaThread*) (1 samples, 0.03%)</title><rect x="900.8" y="707.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="903.8" y="718.0"></text>
</g>
<g>
<title>JavaThread::check_safepoint_and_suspend_for_native_trans(JavaThread*) (1 samples, 0.03%)</title><rect x="900.8" y="691.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="903.8" y="702.0"></text>
</g>
<g>
<title>SafepointSynchronize::block(JavaThread*) [clone .part.0] (1 samples, 0.03%)</title><rect x="900.8" y="675.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="903.8" y="686.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.03%)</title><rect x="900.8" y="659.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="903.8" y="670.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.03%)</title><rect x="900.8" y="643.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="903.8" y="654.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.03%)</title><rect x="901.2" y="707.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="904.2" y="718.0"></text>
</g>
<g>
<title>__clock_gettime (7 samples, 0.20%)</title><rect x="901.5" y="707.0" width="2.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="904.5" y="718.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="903.6" y="691.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="906.6" y="702.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (2 samples, 0.06%)</title><rect x="903.9" y="707.0" width="0.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="906.9" y="718.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (1 samples, 0.03%)</title><rect x="904.6" y="707.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="907.6" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="905.0" y="707.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="908.0" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="905.0" y="691.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="908.0" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="905.0" y="675.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="908.0" y="686.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="905.0" y="659.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="908.0" y="670.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="905.0" y="643.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="908.0" y="654.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="905.0" y="627.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="908.0" y="638.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.06%)</title><rect x="905.3" y="707.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="908.3" y="718.0"></text>
</g>
<g>
<title>epoll_wait (144 samples, 4.20%)</title><rect x="906.0" y="707.0" width="49.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="909.0" y="718.0">epoll..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (129 samples, 3.76%)</title><rect x="911.2" y="691.0" width="44.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="914.2" y="702.0">entr..</text>
</g>
<g>
<title>do_syscall_64 (129 samples, 3.76%)</title><rect x="911.2" y="675.0" width="44.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="914.2" y="686.0">do_s..</text>
</g>
<g>
<title>__syscall_return_slowpath (3 samples, 0.09%)</title><rect x="913.6" y="659.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="916.6" y="670.0"></text>
</g>
<g>
<title>__audit_syscall_exit (3 samples, 0.09%)</title><rect x="913.6" y="643.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="916.6" y="654.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.03%)</title><rect x="914.3" y="627.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="917.3" y="638.0"></text>
</g>
<g>
<title>__x64_sys_epoll_wait (117 samples, 3.41%)</title><rect x="914.6" y="659.0" width="40.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="917.6" y="670.0">__x..</text>
</g>
<g>
<title>do_epoll_wait (115 samples, 3.35%)</title><rect x="915.3" y="643.0" width="39.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="918.3" y="654.0">do_..</text>
</g>
<g>
<title>__fget_light (5 samples, 0.15%)</title><rect x="918.0" y="627.0" width="1.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="921.0" y="638.0"></text>
</g>
<g>
<title>__fget_files (4 samples, 0.12%)</title><rect x="918.4" y="611.0" width="1.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="921.4" y="622.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (60 samples, 1.75%)</title><rect x="919.8" y="627.0" width="20.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="922.8" y="638.0"></text>
</g>
<g>
<title>_raw_write_unlock_irq (6 samples, 0.17%)</title><rect x="919.8" y="611.0" width="2.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="922.8" y="622.0"></text>
</g>
<g>
<title>ep_send_events_proc (47 samples, 1.37%)</title><rect x="921.8" y="611.0" width="16.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="924.8" y="622.0"></text>
</g>
<g>
<title>ep_item_poll (35 samples, 1.02%)</title><rect x="925.9" y="595.0" width="12.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="928.9" y="606.0"></text>
</g>
<g>
<title>sock_poll (30 samples, 0.87%)</title><rect x="927.7" y="579.0" width="10.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="930.7" y="590.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rcx (1 samples, 0.03%)</title><rect x="932.5" y="563.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="935.5" y="574.0"></text>
</g>
<g>
<title>tcp_poll (15 samples, 0.44%)</title><rect x="932.8" y="563.0" width="5.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="935.8" y="574.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (6 samples, 0.17%)</title><rect x="935.9" y="547.0" width="2.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="938.9" y="558.0"></text>
</g>
<g>
<title>mutex_lock (4 samples, 0.12%)</title><rect x="938.0" y="611.0" width="1.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="941.0" y="622.0"></text>
</g>
<g>
<title>mutex_unlock (3 samples, 0.09%)</title><rect x="939.4" y="611.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="942.4" y="622.0"></text>
</g>
<g>
<title>fput_many (8 samples, 0.23%)</title><rect x="940.4" y="627.0" width="2.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="943.4" y="638.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (34 samples, 0.99%)</title><rect x="943.1" y="627.0" width="11.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="946.1" y="638.0"></text>
</g>
<g>
<title>schedule (27 samples, 0.79%)</title><rect x="945.5" y="611.0" width="9.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="948.5" y="622.0"></text>
</g>
<g>
<title>__schedule (23 samples, 0.67%)</title><rect x="946.6" y="595.0" width="7.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="949.6" y="606.0"></text>
</g>
<g>
<title>finish_task_switch (20 samples, 0.58%)</title><rect x="947.6" y="579.0" width="6.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="950.6" y="590.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irq (20 samples, 0.58%)</title><rect x="947.6" y="563.0" width="6.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="950.6" y="574.0"></text>
</g>
<g>
<title>preempt_count_sub (1 samples, 0.03%)</title><rect x="954.5" y="595.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="957.5" y="606.0"></text>
</g>
<g>
<title>__x86_retpoline_rax (1 samples, 0.03%)</title><rect x="954.8" y="659.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="957.8" y="670.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.03%)</title><rect x="955.2" y="659.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="958.2" y="670.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.03%)</title><rect x="955.2" y="643.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="958.2" y="654.0"></text>
</g>
<g>
<title>epoll_wait@plt (1 samples, 0.03%)</title><rect x="955.5" y="707.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="958.5" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (455 samples, 13.26%)</title><rect x="955.9" y="739.0" width="156.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="958.9" y="750.0">one/nio/net/Session...</text>
</g>
<g>
<title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.03%)</title><rect x="959.6" y="723.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="962.6" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (443 samples, 12.91%)</title><rect x="960.0" y="723.0" width="152.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="963.0" y="734.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (272 samples, 7.93%)</title><rect x="960.0" y="707.0" width="93.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="963.0" y="718.0">one/nio/htt..</text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="962.0" y="691.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="965.0" y="702.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (154 samples, 4.49%)</title><rect x="962.4" y="691.0" width="52.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="965.4" y="702.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (154 samples, 4.49%)</title><rect x="962.4" y="675.0" width="52.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="965.4" y="686.0">one/n..</text>
</g>
<g>
<title>RequestHandler1_handleHttpPath.handleRequest (138 samples, 4.02%)</title><rect x="962.4" y="659.0" width="47.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="965.4" y="670.0">Requ..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (10 samples, 0.29%)</title><rect x="962.4" y="643.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="965.4" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (10 samples, 0.29%)</title><rect x="962.4" y="627.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="965.4" y="638.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="964.5" y="611.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="967.5" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="964.5" y="595.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="967.5" y="606.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.03%)</title><rect x="964.5" y="579.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="967.5" y="590.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.03%)</title><rect x="964.8" y="611.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="967.8" y="622.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.06%)</title><rect x="965.1" y="611.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="968.1" y="622.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.06%)</title><rect x="965.1" y="595.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="968.1" y="606.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.06%)</title><rect x="965.1" y="579.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="968.1" y="590.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.06%)</title><rect x="965.1" y="563.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="968.1" y="574.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl.handleHttpPath (128 samples, 3.73%)</title><rect x="965.8" y="643.0" width="44.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="968.8" y="654.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl.execute (128 samples, 3.73%)</title><rect x="965.8" y="627.0" width="44.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="968.8" y="638.0">ru/m..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.09%)</title><rect x="968.2" y="611.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="971.2" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.09%)</title><rect x="968.2" y="595.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="971.2" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl$$Lambda$81/1300379497.get$Lambda (3 samples, 0.09%)</title><rect x="968.2" y="579.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="971.2" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.06%)</title><rect x="968.2" y="563.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="971.2" y="574.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.06%)</title><rect x="968.2" y="547.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="971.2" y="558.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="968.6" y="531.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="971.6" y="542.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="968.6" y="515.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="971.6" y="526.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (1 samples, 0.03%)</title><rect x="968.6" y="499.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="971.6" y="510.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.03%)</title><rect x="968.9" y="563.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="971.9" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (115 samples, 3.35%)</title><rect x="969.3" y="611.0" width="39.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="972.3" y="622.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (110 samples, 3.21%)</title><rect x="970.0" y="595.0" width="37.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="973.0" y="606.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.enqueue (6 samples, 0.17%)</title><rect x="973.4" y="579.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="976.4" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (6 samples, 0.17%)</title><rect x="973.4" y="563.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="976.4" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (6 samples, 0.17%)</title><rect x="973.4" y="547.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="976.4" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (6 samples, 0.17%)</title><rect x="973.4" y="531.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="976.4" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.12%)</title><rect x="975.5" y="579.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="978.5" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.12%)</title><rect x="975.5" y="563.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="978.5" y="574.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.12%)</title><rect x="975.5" y="547.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="978.5" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (4 samples, 0.12%)</title><rect x="975.5" y="531.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="978.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (4 samples, 0.12%)</title><rect x="975.5" y="515.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="978.5" y="526.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.09%)</title><rect x="975.8" y="499.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="978.8" y="510.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.06%)</title><rect x="975.8" y="483.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="978.8" y="494.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="975.8" y="467.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="978.8" y="478.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (1 samples, 0.03%)</title><rect x="976.1" y="467.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="979.1" y="478.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="976.1" y="451.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="979.1" y="462.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="976.1" y="435.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="979.1" y="446.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="976.1" y="419.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="979.1" y="430.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="976.1" y="403.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="979.1" y="414.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="976.1" y="387.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="979.1" y="398.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="976.5" y="483.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="979.5" y="494.0"></text>
</g>
<g>
<title>pthread_cond_wait@@GLIBC_2.3.2 (1 samples, 0.03%)</title><rect x="976.5" y="467.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="979.5" y="478.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="976.5" y="451.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="979.5" y="462.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="976.5" y="435.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="979.5" y="446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (90 samples, 2.62%)</title><rect x="976.8" y="579.0" width="31.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="979.8" y="590.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (90 samples, 2.62%)</title><rect x="976.8" y="563.0" width="31.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="979.8" y="574.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (90 samples, 2.62%)</title><rect x="976.8" y="547.0" width="31.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="979.8" y="558.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (90 samples, 2.62%)</title><rect x="976.8" y="531.0" width="31.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="979.8" y="542.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (90 samples, 2.62%)</title><rect x="976.8" y="515.0" width="31.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="979.8" y="526.0">jd..</text>
</g>
<g>
<title>Parker::unpark() (1 samples, 0.03%)</title><rect x="976.8" y="499.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="979.8" y="510.0"></text>
</g>
<g>
<title>Unsafe_Unpark (15 samples, 0.44%)</title><rect x="977.2" y="499.0" width="5.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="980.2" y="510.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="977.9" y="483.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="980.9" y="494.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="978.2" y="483.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="981.2" y="494.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.09%)</title><rect x="978.5" y="483.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="981.5" y="494.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.09%)</title><rect x="979.6" y="483.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="982.6" y="494.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (1 samples, 0.03%)</title><rect x="980.6" y="483.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="983.6" y="494.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.12%)</title><rect x="981.0" y="483.0" width="1.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="984.0" y="494.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.12%)</title><rect x="982.3" y="499.0" width="1.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="985.3" y="510.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (4 samples, 0.12%)</title><rect x="982.3" y="483.0" width="1.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="985.3" y="494.0"></text>
</g>
<g>
<title>__pthread_cond_signal (70 samples, 2.04%)</title><rect x="983.7" y="499.0" width="24.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="986.7" y="510.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (66 samples, 1.92%)</title><rect x="985.1" y="483.0" width="22.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="988.1" y="494.0">e..</text>
</g>
<g>
<title>do_syscall_64 (66 samples, 1.92%)</title><rect x="985.1" y="467.0" width="22.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="988.1" y="478.0">d..</text>
</g>
<g>
<title>__syscall_return_slowpath (2 samples, 0.06%)</title><rect x="985.4" y="451.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="988.4" y="462.0"></text>
</g>
<g>
<title>__audit_syscall_exit (2 samples, 0.06%)</title><rect x="985.4" y="435.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="988.4" y="446.0"></text>
</g>
<g>
<title>__x64_sys_futex (61 samples, 1.78%)</title><rect x="986.1" y="451.0" width="21.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="989.1" y="462.0"></text>
</g>
<g>
<title>do_futex (58 samples, 1.69%)</title><rect x="987.1" y="435.0" width="20.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="990.1" y="446.0"></text>
</g>
<g>
<title>futex_wake (58 samples, 1.69%)</title><rect x="987.1" y="419.0" width="20.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="990.1" y="430.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.03%)</title><rect x="987.8" y="403.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="990.8" y="414.0"></text>
</g>
<g>
<title>hash_futex (4 samples, 0.12%)</title><rect x="988.2" y="403.0" width="1.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="991.2" y="414.0"></text>
</g>
<g>
<title>mark_wake_futex (3 samples, 0.09%)</title><rect x="989.6" y="403.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="992.6" y="414.0"></text>
</g>
<g>
<title>wake_q_add_safe (2 samples, 0.06%)</title><rect x="990.6" y="403.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="993.6" y="414.0"></text>
</g>
<g>
<title>wake_up_q (46 samples, 1.34%)</title><rect x="991.3" y="403.0" width="15.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="994.3" y="414.0"></text>
</g>
<g>
<title>try_to_wake_up (45 samples, 1.31%)</title><rect x="991.6" y="387.0" width="15.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="994.6" y="398.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (45 samples, 1.31%)</title><rect x="991.6" y="371.0" width="15.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="994.6" y="382.0"></text>
</g>
<g>
<title>__x86_indirect_thunk_rax (1 samples, 0.03%)</title><rect x="1007.1" y="451.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1010.1" y="462.0"></text>
</g>
<g>
<title>syscall_trace_enter (1 samples, 0.03%)</title><rect x="1007.4" y="451.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1010.4" y="462.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.isRunning (1 samples, 0.03%)</title><rect x="1007.8" y="595.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1010.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.workerCountOf (1 samples, 0.03%)</title><rect x="1008.1" y="595.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1011.1" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.03%)</title><rect x="1008.5" y="595.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1011.5" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3 samples, 0.09%)</title><rect x="1008.8" y="611.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1011.8" y="622.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (13 samples, 0.38%)</title><rect x="1009.8" y="659.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1012.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.get (13 samples, 0.38%)</title><rect x="1009.8" y="643.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1012.8" y="654.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (6 samples, 0.17%)</title><rect x="1009.8" y="627.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1012.8" y="638.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (7 samples, 0.20%)</title><rect x="1011.9" y="627.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1014.9" y="638.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (7 samples, 0.20%)</title><rect x="1011.9" y="611.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1014.9" y="622.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (7 samples, 0.20%)</title><rect x="1011.9" y="595.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1014.9" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (1 samples, 0.03%)</title><rect x="1014.3" y="659.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1017.3" y="670.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.03%)</title><rect x="1014.3" y="643.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1017.3" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.03%)</title><rect x="1014.3" y="627.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1017.3" y="638.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1 samples, 0.03%)</title><rect x="1014.3" y="611.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1017.3" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1014.3" y="595.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1017.3" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1014.3" y="579.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1017.3" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1014.3" y="563.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1017.3" y="574.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1014.3" y="547.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1017.3" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1014.3" y="531.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1017.3" y="542.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="1014.3" y="515.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1017.3" y="526.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="1014.3" y="499.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1017.3" y="510.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.03%)</title><rect x="1014.3" y="483.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1017.3" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl.handleDefault (2 samples, 0.06%)</title><rect x="1014.7" y="659.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1017.7" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (30 samples, 0.87%)</title><rect x="1015.3" y="691.0" width="10.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1018.3" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (1 samples, 0.03%)</title><rect x="1015.3" y="675.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1018.3" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (15 samples, 0.44%)</title><rect x="1015.7" y="675.0" width="5.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1018.7" y="686.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.03%)</title><rect x="1015.7" y="659.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1018.7" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (10 samples, 0.29%)</title><rect x="1016.0" y="659.0" width="3.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1019.0" y="670.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (8 samples, 0.23%)</title><rect x="1016.4" y="643.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1019.4" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (8 samples, 0.23%)</title><rect x="1016.4" y="627.0" width="2.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1019.4" y="638.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.20%)</title><rect x="1016.4" y="611.0" width="2.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1019.4" y="622.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab(Klass*, HeapWord*, unsigned long, Thread*) (2 samples, 0.06%)</title><rect x="1016.4" y="595.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1019.4" y="606.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.03%)</title><rect x="1016.7" y="579.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1019.7" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="1017.1" y="595.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1020.1" y="606.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.12%)</title><rect x="1017.4" y="595.0" width="1.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1020.4" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="1017.4" y="579.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1020.4" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.03%)</title><rect x="1017.7" y="579.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1020.7" y="590.0"></text>
</g>
<g>
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1017.7" y="563.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1020.7" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1017.7" y="547.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1020.7" y="558.0"></text>
</g>
<g>
<title>__prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1017.7" y="531.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1020.7" y="542.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="1017.7" y="515.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1020.7" y="526.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.03%)</title><rect x="1017.7" y="499.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1020.7" y="510.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.03%)</title><rect x="1017.7" y="483.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1020.7" y="494.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irq (1 samples, 0.03%)</title><rect x="1017.7" y="467.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1020.7" y="478.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1018.1" y="579.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1021.1" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.03%)</title><rect x="1018.1" y="563.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1021.1" y="574.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (1 samples, 0.03%)</title><rect x="1018.4" y="579.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1021.4" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="1018.8" y="611.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1021.8" y="622.0"></text>
</g>
<g>
<title>ObjArrayKlass::array_klass_impl(bool, int, Thread*) (1 samples, 0.03%)</title><rect x="1019.1" y="643.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1022.1" y="654.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.12%)</title><rect x="1019.5" y="659.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1022.5" y="670.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.12%)</title><rect x="1019.5" y="643.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1022.5" y="654.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.12%)</title><rect x="1019.5" y="627.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1022.5" y="638.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.03%)</title><rect x="1020.5" y="611.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1023.5" y="622.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (11 samples, 0.32%)</title><rect x="1020.8" y="675.0" width="3.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1023.8" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (10 samples, 0.29%)</title><rect x="1021.2" y="659.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1024.2" y="670.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.06%)</title><rect x="1022.9" y="643.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1025.9" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1023.2" y="627.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1026.2" y="638.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="1023.2" y="611.0" width="0.4" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1026.2" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.06%)</title><rect x="1023.6" y="643.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1026.6" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.06%)</title><rect x="1023.6" y="627.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1026.6" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.06%)</title><rect x="1023.6" y="611.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1026.6" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.06%)</title><rect x="1023.6" y="595.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1026.6" y="606.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1023.9" y="579.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1026.9" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1023.9" y="563.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1026.9" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="1023.9" y="547.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1026.9" y="558.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1024.3" y="643.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1027.3" y="654.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1 samples, 0.03%)</title><rect x="1024.3" y="627.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1027.3" y="638.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1 samples, 0.03%)</title><rect x="1024.3" y="611.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1027.3" y="622.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="1024.3" y="595.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1027.3" y="606.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1024.3" y="579.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1027.3" y="590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1024.3" y="563.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1027.3" y="574.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1024.3" y="547.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1027.3" y="558.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1024.3" y="531.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1027.3" y="542.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.03%)</title><rect x="1024.3" y="515.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1027.3" y="526.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.09%)</title><rect x="1024.6" y="675.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1027.6" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (5 samples, 0.15%)</title><rect x="1025.7" y="691.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1028.7" y="702.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.15%)</title><rect x="1025.7" y="675.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1028.7" y="686.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.15%)</title><rect x="1025.7" y="659.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1028.7" y="670.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.09%)</title><rect x="1026.3" y="643.0" width="1.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1029.3" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (22 samples, 0.64%)</title><rect x="1027.4" y="691.0" width="7.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1030.4" y="702.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (18 samples, 0.52%)</title><rect x="1027.7" y="675.0" width="6.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1030.7" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (18 samples, 0.52%)</title><rect x="1027.7" y="659.0" width="6.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1030.7" y="670.0"></text>
</g>
<g>
<title>RequestHandler1_handleHttpPath.handleRequest (4 samples, 0.12%)</title><rect x="1029.4" y="643.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1032.4" y="654.0"></text>
</g>
<g>
<title>itable stub (6 samples, 0.17%)</title><rect x="1030.8" y="643.0" width="2.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1033.8" y="654.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.09%)</title><rect x="1032.9" y="643.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1035.9" y="654.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.09%)</title><rect x="1032.9" y="627.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1035.9" y="638.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (3 samples, 0.09%)</title><rect x="1032.9" y="611.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1035.9" y="622.0"></text>
</g>
<g>
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1033.6" y="595.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1036.6" y="606.0"></text>
</g>
<g>
<title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1033.6" y="579.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1036.6" y="590.0"></text>
</g>
<g>
<title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="1033.6" y="563.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1036.6" y="574.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.03%)</title><rect x="1033.6" y="547.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1036.6" y="558.0"></text>
</g>
<g>
<title>asm_call_sysvec_on_stack (1 samples, 0.03%)</title><rect x="1033.6" y="531.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1036.6" y="542.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="1033.6" y="515.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1036.6" y="526.0"></text>
</g>
<g>
<title>__run_timers (1 samples, 0.03%)</title><rect x="1033.6" y="499.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1036.6" y="510.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.09%)</title><rect x="1033.9" y="675.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1036.9" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.09%)</title><rect x="1033.9" y="659.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1036.9" y="670.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.09%)</title><rect x="1033.9" y="643.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1036.9" y="654.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.09%)</title><rect x="1033.9" y="627.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1036.9" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.09%)</title><rect x="1033.9" y="611.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1036.9" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.09%)</title><rect x="1033.9" y="595.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1036.9" y="606.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="1033.9" y="579.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1036.9" y="590.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.03%)</title><rect x="1033.9" y="563.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1036.9" y="574.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.06%)</title><rect x="1034.2" y="579.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1037.2" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="1034.2" y="563.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1037.2" y="574.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="1034.6" y="563.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1037.6" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (54 samples, 1.57%)</title><rect x="1034.9" y="691.0" width="18.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1037.9" y="702.0"></text>
</g>
<g>
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1042.2" y="675.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1045.2" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1042.2" y="659.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1045.2" y="670.0"></text>
</g>
<g>
<title>__prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1042.2" y="643.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1045.2" y="654.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (32 samples, 0.93%)</title><rect x="1042.5" y="675.0" width="11.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1045.5" y="686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (8 samples, 0.23%)</title><rect x="1048.3" y="659.0" width="2.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1051.3" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (8 samples, 0.23%)</title><rect x="1048.3" y="643.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1051.3" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (8 samples, 0.23%)</title><rect x="1048.3" y="627.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1051.3" y="638.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="1048.3" y="611.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1051.3" y="622.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.03%)</title><rect x="1048.3" y="595.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1051.3" y="606.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="1048.7" y="611.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1051.7" y="622.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (6 samples, 0.17%)</title><rect x="1049.0" y="611.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1052.0" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="1049.0" y="595.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1052.0" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (5 samples, 0.15%)</title><rect x="1049.4" y="595.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1052.4" y="606.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (3 samples, 0.09%)</title><rect x="1049.7" y="579.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1052.7" y="590.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (2 samples, 0.06%)</title><rect x="1049.7" y="563.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1052.7" y="574.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.03%)</title><rect x="1050.1" y="547.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1053.1" y="558.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.03%)</title><rect x="1050.4" y="563.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1053.4" y="574.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::fill(HeapWord*, HeapWord*, unsigned long) (1 samples, 0.03%)</title><rect x="1050.8" y="579.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1053.8" y="590.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.06%)</title><rect x="1051.1" y="659.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1054.1" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="1051.1" y="643.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1054.1" y="654.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="1051.4" y="643.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1054.4" y="654.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.03%)</title><rect x="1051.4" y="627.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1054.4" y="638.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1051.4" y="611.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1054.4" y="622.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="1051.4" y="595.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1054.4" y="606.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.03%)</title><rect x="1051.4" y="579.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1054.4" y="590.0"></text>
</g>
<g>
<title>_new_array_nozero_Java (1 samples, 0.03%)</title><rect x="1051.8" y="659.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1054.8" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.12%)</title><rect x="1052.1" y="659.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1055.1" y="670.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.12%)</title><rect x="1052.1" y="643.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1055.1" y="654.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4 samples, 0.12%)</title><rect x="1052.1" y="627.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1055.1" y="638.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.09%)</title><rect x="1052.1" y="611.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1055.1" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.06%)</title><rect x="1052.5" y="595.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1055.5" y="606.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="1052.5" y="579.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1055.5" y="590.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.03%)</title><rect x="1052.5" y="563.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1055.5" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="1052.8" y="579.0" width="0.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1055.8" y="590.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="1053.2" y="611.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1056.2" y="622.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (7 samples, 0.20%)</title><rect x="1053.5" y="707.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1056.5" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (164 samples, 4.78%)</title><rect x="1055.9" y="707.0" width="56.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1058.9" y="718.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (163 samples, 4.75%)</title><rect x="1056.3" y="691.0" width="56.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1059.3" y="702.0">one/ni..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (28 samples, 0.82%)</title><rect x="1058.3" y="675.0" width="9.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1061.3" y="686.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.12%)</title><rect x="1061.4" y="659.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1064.4" y="670.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="1062.8" y="659.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1065.8" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (1 samples, 0.03%)</title><rect x="1063.1" y="659.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1066.1" y="670.0"></text>
</g>
<g>
<title>__memmove_avx_unaligned_erms (1 samples, 0.03%)</title><rect x="1063.5" y="659.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1066.5" y="670.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (9 samples, 0.26%)</title><rect x="1063.8" y="659.0" width="3.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1066.8" y="670.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.03%)</title><rect x="1064.5" y="643.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1067.5" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (2 samples, 0.06%)</title><rect x="1064.8" y="643.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1067.8" y="654.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.12%)</title><rect x="1065.5" y="643.0" width="1.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1068.5" y="654.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.09%)</title><rect x="1066.9" y="659.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1069.9" y="670.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.06%)</title><rect x="1067.9" y="675.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1070.9" y="686.0"></text>
</g>
<g>
<title>__libc_recv (126 samples, 3.67%)</title><rect x="1068.6" y="675.0" width="43.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1071.6" y="686.0">__li..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (112 samples, 3.26%)</title><rect x="1073.4" y="659.0" width="38.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1076.4" y="670.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (112 samples, 3.26%)</title><rect x="1073.4" y="643.0" width="38.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1076.4" y="654.0">do_..</text>
</g>
<g>
<title>__prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1079.6" y="627.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1082.6" y="638.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="1079.6" y="611.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1082.6" y="622.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.03%)</title><rect x="1079.6" y="595.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1082.6" y="606.0"></text>
</g>
<g>
<title>__syscall_return_slowpath (1 samples, 0.03%)</title><rect x="1080.0" y="627.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1083.0" y="638.0"></text>
</g>
<g>
<title>__audit_syscall_exit (1 samples, 0.03%)</title><rect x="1080.0" y="611.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1083.0" y="622.0"></text>
</g>
<g>
<title>__x64_sys_recvfrom (87 samples, 2.53%)</title><rect x="1080.3" y="627.0" width="29.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1083.3" y="638.0">__..</text>
</g>
<g>
<title>__sys_recvfrom (84 samples, 2.45%)</title><rect x="1081.4" y="611.0" width="28.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1084.4" y="622.0">__..</text>
</g>
<g>
<title>fput_many (1 samples, 0.03%)</title><rect x="1083.4" y="595.0" width="0.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1086.4" y="606.0"></text>
</g>
<g>
<title>import_single_range (2 samples, 0.06%)</title><rect x="1083.8" y="595.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1086.8" y="606.0"></text>
</g>
<g>
<title>inet6_recvmsg (63 samples, 1.84%)</title><rect x="1084.4" y="595.0" width="21.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1087.4" y="606.0">i..</text>
</g>
<g>
<title>tcp_recvmsg (59 samples, 1.72%)</title><rect x="1085.8" y="579.0" width="20.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1088.8" y="590.0"></text>
</g>
<g>
<title>__kfree_skb (8 samples, 0.23%)</title><rect x="1089.6" y="563.0" width="2.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1092.6" y="574.0"></text>
</g>
<g>
<title>skb_release_data (3 samples, 0.09%)</title><rect x="1089.6" y="547.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1092.6" y="558.0"></text>
</g>
<g>
<title>skb_release_head_state (5 samples, 0.15%)</title><rect x="1090.6" y="547.0" width="1.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1093.6" y="558.0"></text>
</g>
<g>
<title>dst_release (5 samples, 0.15%)</title><rect x="1090.6" y="531.0" width="1.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1093.6" y="542.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.03%)</title><rect x="1092.4" y="563.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1095.4" y="574.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.06%)</title><rect x="1092.7" y="563.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1095.7" y="574.0"></text>
</g>
<g>
<title>lock_sock_nested (6 samples, 0.17%)</title><rect x="1093.4" y="563.0" width="2.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1096.4" y="574.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (5 samples, 0.15%)</title><rect x="1093.7" y="547.0" width="1.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1096.7" y="558.0"></text>
</g>
<g>
<title>preempt_count_add (3 samples, 0.09%)</title><rect x="1094.4" y="531.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1097.4" y="542.0"></text>
</g>
<g>
<title>in_lock_functions (1 samples, 0.03%)</title><rect x="1095.1" y="515.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1098.1" y="526.0"></text>
</g>
<g>
<title>release_sock (3 samples, 0.09%)</title><rect x="1095.4" y="563.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1098.4" y="574.0"></text>
</g>
<g>
<title>__x86_retpoline_rax (1 samples, 0.03%)</title><rect x="1095.4" y="547.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1098.4" y="558.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.03%)</title><rect x="1095.8" y="547.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1098.8" y="558.0"></text>
</g>
<g>
<title>preempt_count_add (1 samples, 0.03%)</title><rect x="1095.8" y="531.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1098.8" y="542.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.03%)</title><rect x="1096.1" y="547.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1099.1" y="558.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (18 samples, 0.52%)</title><rect x="1096.5" y="563.0" width="6.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1099.5" y="574.0"></text>
</g>
<g>
<title>__skb_datagram_iter (18 samples, 0.52%)</title><rect x="1096.5" y="547.0" width="6.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1099.5" y="558.0"></text>
</g>
<g>
<title>_copy_to_iter (10 samples, 0.29%)</title><rect x="1096.8" y="531.0" width="3.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1099.8" y="542.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (8 samples, 0.23%)</title><rect x="1097.5" y="515.0" width="2.8" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1100.5" y="526.0"></text>
</g>
<g>
<title>simple_copy_to_iter (7 samples, 0.20%)</title><rect x="1100.3" y="531.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1103.3" y="542.0"></text>
</g>
<g>
<title>__check_object_size (7 samples, 0.20%)</title><rect x="1100.3" y="515.0" width="2.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1103.3" y="526.0"></text>
</g>
<g>
<title>__virt_addr_valid (4 samples, 0.12%)</title><rect x="1100.9" y="499.0" width="1.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1103.9" y="510.0"></text>
</g>
<g>
<title>check_stack_object (1 samples, 0.03%)</title><rect x="1102.3" y="499.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1105.3" y="510.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (3 samples, 0.09%)</title><rect x="1102.7" y="563.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1105.7" y="574.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.03%)</title><rect x="1103.4" y="547.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1106.4" y="558.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (7 samples, 0.20%)</title><rect x="1103.7" y="563.0" width="2.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1106.7" y="574.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.15%)</title><rect x="1104.4" y="547.0" width="1.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1107.4" y="558.0"></text>
</g>
<g>
<title>ktime_get (5 samples, 0.15%)</title><rect x="1104.4" y="531.0" width="1.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1107.4" y="542.0"></text>
</g>
<g>
<title>read_tsc (2 samples, 0.06%)</title><rect x="1105.4" y="515.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1108.4" y="526.0"></text>
</g>
<g>
<title>sock_recvmsg (2 samples, 0.06%)</title><rect x="1106.1" y="595.0" width="0.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1109.1" y="606.0"></text>
</g>
<g>
<title>sockfd_lookup_light (10 samples, 0.29%)</title><rect x="1106.8" y="595.0" width="3.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1109.8" y="606.0"></text>
</g>
<g>
<title>__fget_light (10 samples, 0.29%)</title><rect x="1106.8" y="579.0" width="3.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1109.8" y="590.0"></text>
</g>
<g>
<title>__fget_files (7 samples, 0.20%)</title><rect x="1107.8" y="563.0" width="2.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1110.8" y="574.0"></text>
</g>
<g>
<title>syscall_trace_enter (5 samples, 0.15%)</title><rect x="1110.2" y="627.0" width="1.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1113.2" y="638.0"></text>
</g>
<g>
<title>__audit_syscall_entry (1 samples, 0.03%)</title><rect x="1111.3" y="611.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1114.3" y="622.0"></text>
</g>
<g>
<title>ktime_get_coarse_real_ts64 (1 samples, 0.03%)</title><rect x="1111.6" y="611.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1114.6" y="622.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.03%)</title><rect x="1112.0" y="675.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1115.0" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.06%)</title><rect x="1112.3" y="739.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1115.3" y="750.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.03%)</title><rect x="1112.6" y="723.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1115.6" y="734.0"></text>
</g>
<g>
<title>start_thread (223 samples, 6.50%)</title><rect x="1113.0" y="755.0" width="76.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1116.0" y="766.0">start_th..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (223 samples, 6.50%)</title><rect x="1113.0" y="739.0" width="76.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1116.0" y="750.0">thread_n..</text>
</g>
<g>
<title>Thread::call_run() (223 samples, 6.50%)</title><rect x="1113.0" y="723.0" width="76.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1116.0" y="734.0">Thread::..</text>
</g>
<g>
<title>GangWorker::loop() (215 samples, 6.26%)</title><rect x="1113.0" y="707.0" width="73.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.0" y="718.0">GangWork..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (211 samples, 6.15%)</title><rect x="1113.0" y="691.0" width="72.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1116.0" y="702.0">G1ParTas..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (204 samples, 5.94%)</title><rect x="1113.0" y="675.0" width="70.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.0" y="686.0">G1ParEva..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (3 samples, 0.09%)</title><rect x="1113.0" y="659.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1116.0" y="670.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (97 samples, 2.83%)</title><rect x="1114.0" y="659.0" width="33.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1117.0" y="670.0">G1..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (59 samples, 1.72%)</title><rect x="1126.0" y="643.0" width="20.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1129.0" y="654.0"></text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(InCSetState, unsigned long, bool*) (3 samples, 0.09%)</title><rect x="1140.1" y="627.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.1" y="638.0"></text>
</g>
<g>
<title>G1Allocator::old_attempt_allocation(unsigned long, unsigned long, unsigned long*) (2 samples, 0.06%)</title><rect x="1140.1" y="611.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.1" y="622.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="1140.5" y="595.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1143.5" y="606.0"></text>
</g>
<g>
<title>PLAB::retire() (1 samples, 0.03%)</title><rect x="1140.8" y="611.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.8" y="622.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_dummy_object(HeapWord*, HeapWord*, bool) (1 samples, 0.03%)</title><rect x="1140.8" y="595.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1143.8" y="606.0"></text>
</g>
<g>
<title>HandleMark::~HandleMark() (1 samples, 0.03%)</title><rect x="1140.8" y="579.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.8" y="590.0"></text>
</g>
<g>
<title>_raw_spin_lock_irqsave (1 samples, 0.03%)</title><rect x="1141.2" y="627.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1144.2" y="638.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (14 samples, 0.41%)</title><rect x="1141.5" y="627.0" width="4.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.5" y="638.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="1146.3" y="643.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.3" y="654.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;TypeArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.06%)</title><rect x="1146.7" y="643.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.7" y="654.0"></text>
</g>
<g>
<title>GenericTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;::pop_global(StarTask volatile&amp;) (1 samples, 0.03%)</title><rect x="1147.4" y="659.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.4" y="670.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::peek() (2 samples, 0.06%)</title><rect x="1147.7" y="659.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.7" y="670.0"></text>
</g>
<g>
<title>GenericTaskQueueSet&lt;OverflowTaskQueue&lt;StarTask, (MemoryType)5, 131072u&gt;, (MemoryType)5&gt;::steal_best_of_2(unsigned int, int*, StarTask&amp;) (1 samples, 0.03%)</title><rect x="1148.4" y="659.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.4" y="670.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.03%)</title><rect x="1148.7" y="659.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1151.7" y="670.0"></text>
</g>
<g>
<title>SpinPause (98 samples, 2.86%)</title><rect x="1149.1" y="659.0" width="33.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1152.1" y="670.0">Sp..</text>
</g>
<g>
<title>__GI_sched_yield (1 samples, 0.03%)</title><rect x="1182.8" y="659.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1185.8" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1182.8" y="643.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1185.8" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1182.8" y="627.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1185.8" y="638.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (3 samples, 0.09%)</title><rect x="1183.1" y="675.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.1" y="686.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (3 samples, 0.09%)</title><rect x="1183.1" y="659.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1186.1" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (3 samples, 0.09%)</title><rect x="1183.1" y="643.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.1" y="654.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (3 samples, 0.09%)</title><rect x="1183.1" y="627.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1186.1" y="638.0"></text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.06%)</title><rect x="1183.5" y="611.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.5" y="622.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.0] (2 samples, 0.06%)</title><rect x="1183.5" y="595.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.5" y="606.0"></text>
</g>
<g>
<title>G1ContiguousSpace::block_start(void const*) (1 samples, 0.03%)</title><rect x="1183.8" y="579.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1186.8" y="590.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (1 samples, 0.03%)</title><rect x="1184.2" y="675.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.2" y="686.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (1 samples, 0.03%)</title><rect x="1184.2" y="659.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.2" y="670.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1184.2" y="643.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="654.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.03%)</title><rect x="1184.2" y="627.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1187.2" y="638.0"></text>
</g>
<g>
<title>RSHashTableIter::has_next(unsigned long&amp;) (1 samples, 0.03%)</title><rect x="1184.2" y="611.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="622.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (3 samples, 0.09%)</title><rect x="1184.5" y="675.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.5" y="686.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.03%)</title><rect x="1184.5" y="659.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1187.5" y="670.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.03%)</title><rect x="1184.8" y="659.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.8" y="670.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1184.8" y="643.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.8" y="654.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="1184.8" y="627.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1187.8" y="638.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.03%)</title><rect x="1184.8" y="611.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.8" y="622.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (1 samples, 0.03%)</title><rect x="1185.2" y="659.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.2" y="670.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.03%)</title><rect x="1185.2" y="643.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.2" y="654.0"></text>
</g>
<g>
<title>G1RedirtyLoggedCardsTask::work(unsigned int) (1 samples, 0.03%)</title><rect x="1185.5" y="691.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.5" y="702.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::par_apply_closure_to_all_completed_buffers(CardTableEntryClosure*) (1 samples, 0.03%)</title><rect x="1185.5" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.5" y="686.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (3 samples, 0.09%)</title><rect x="1185.9" y="691.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.9" y="702.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (3 samples, 0.09%)</title><rect x="1185.9" y="675.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.9" y="686.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.0] (2 samples, 0.06%)</title><rect x="1185.9" y="659.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.9" y="670.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.06%)</title><rect x="1185.9" y="643.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.9" y="654.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="1186.2" y="627.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.2" y="638.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (1 samples, 0.03%)</title><rect x="1186.2" y="611.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.2" y="622.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.03%)</title><rect x="1186.6" y="659.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.6" y="670.0"></text>
</g>
<g>
<title>Thread::muxAcquire(long volatile*, char const*) (1 samples, 0.03%)</title><rect x="1186.6" y="643.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.6" y="654.0"></text>
</g>
<g>
<title>VMThread::run() (8 samples, 0.23%)</title><rect x="1186.9" y="707.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.9" y="718.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.03%)</title><rect x="1186.9" y="691.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.9" y="702.0"></text>
</g>
<g>
<title>VMThread::loop() (7 samples, 0.20%)</title><rect x="1187.2" y="691.0" width="2.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.2" y="702.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.03%)</title><rect x="1187.2" y="675.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.2" y="686.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.0] (5 samples, 0.15%)</title><rect x="1187.6" y="675.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.6" y="686.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (5 samples, 0.15%)</title><rect x="1187.6" y="659.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.6" y="670.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (5 samples, 0.15%)</title><rect x="1187.6" y="643.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.6" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (5 samples, 0.15%)</title><rect x="1187.6" y="627.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.6" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_prologue(bool) (1 samples, 0.03%)</title><rect x="1187.6" y="611.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.6" y="622.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics_before_gc() (1 samples, 0.03%)</title><rect x="1187.6" y="595.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.6" y="606.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::accumulate_statistics() (1 samples, 0.03%)</title><rect x="1187.6" y="579.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.6" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_cset() (1 samples, 0.03%)</title><rect x="1187.9" y="611.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.9" y="622.0"></text>
</g>
<g>
<title>RegisterHumongousWithInCSetFastTestClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1187.9" y="595.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.9" y="606.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print() (2 samples, 0.06%)</title><rect x="1188.3" y="611.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.3" y="622.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print_post_evacuate_collection_set() const (2 samples, 0.06%)</title><rect x="1188.3" y="595.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.3" y="606.0"></text>
</g>
<g>
<title>ReferenceProcessorPhaseTimes::print_all_references(unsigned int, bool) const (1 samples, 0.03%)</title><rect x="1188.3" y="579.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1191.3" y="590.0"></text>
</g>
<g>
<title>ReferenceProcessorPhaseTimes::print_phase(ReferenceProcessor::RefProcPhases, unsigned int) const (1 samples, 0.03%)</title><rect x="1188.3" y="563.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.3" y="574.0"></text>
</g>
<g>
<title>outputStream::print_cr(char const*, ...) (1 samples, 0.03%)</title><rect x="1188.3" y="547.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1191.3" y="558.0"></text>
</g>
<g>
<title>__strchr_avx2 (1 samples, 0.03%)</title><rect x="1188.3" y="531.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1191.3" y="542.0"></text>
</g>
<g>
<title>ReferenceProcessorPhaseTimes::print_phase(ReferenceProcessor::RefProcPhases, unsigned int) const (1 samples, 0.03%)</title><rect x="1188.6" y="579.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1191.6" y="590.0"></text>
</g>
<g>
<title>G1NewTracer::send_old_evacuation_statistics(G1EvacSummary const&amp;) const (1 samples, 0.03%)</title><rect x="1189.0" y="611.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1192.0" y="622.0"></text>
</g>
<g>
<title>__GI_sched_yield (1 samples, 0.03%)</title><rect x="1189.3" y="675.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1192.3" y="686.0"></text>
</g>
<g>
<title>unlink_chunk.constprop.0 (1 samples, 0.03%)</title><rect x="1189.7" y="755.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1192.7" y="766.0"></text>
</g>
</g>
</svg>
