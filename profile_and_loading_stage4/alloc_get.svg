<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518"
	 xmlns="http://www.w3.org/2000/svg">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="501"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="501"> </text>
<g id="frames">
<g>
<title>all (41,131 samples, 100.00%)</title><rect x="10.0" y="467.0" width="1180.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="13.0" y="478.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (32,636 samples, 79.35%)</title><rect x="10.0" y="451.0" width="936.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="462.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (32,636 samples, 79.35%)</title><rect x="10.0" y="435.0" width="936.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="13.0" y="446.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (32,636 samples, 79.35%)</title><rect x="10.0" y="419.0" width="936.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="430.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl$$Lambda$85/81009881.run (32,631 samples, 79.33%)</title><rect x="10.1" y="403.0" width="936.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.1" y="414.0">ru/mail/polis/service/gogun/AsyncServiceImpl$$Lambda$85/81009881.run</text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl.lambda$execute$1 (32,631 samples, 79.33%)</title><rect x="10.1" y="387.0" width="936.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.1" y="398.0">ru/mail/polis/service/gogun/AsyncServiceImpl.lambda$execute$1</text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl.handleRequest (32,631 samples, 79.33%)</title><rect x="10.1" y="371.0" width="936.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.1" y="382.0">ru/mail/polis/service/gogun/AsyncServiceImpl.handleRequest</text>
</g>
<g>
<title>java/lang/String.getBytes (200 samples, 0.49%)</title><rect x="10.1" y="355.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.1" y="366.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (200 samples, 0.49%)</title><rect x="10.1" y="339.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.1" y="350.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (200 samples, 0.49%)</title><rect x="10.1" y="323.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.1" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (200 samples, 0.49%)</title><rect x="10.1" y="307.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.1" y="318.0"></text>
</g>
<g>
<title>byte[] (200 samples, 0.49%)</title><rect x="10.1" y="291.0" width="5.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="13.1" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (21 samples, 0.05%)</title><rect x="15.9" y="355.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.9" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (21 samples, 0.05%)</title><rect x="15.9" y="339.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (15 samples, 0.04%)</title><rect x="15.9" y="323.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.9" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (15 samples, 0.04%)</title><rect x="15.9" y="307.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.9" y="318.0"></text>
</g>
<g>
<title>byte[] (15 samples, 0.04%)</title><rect x="15.9" y="291.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="18.9" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (35 samples, 0.09%)</title><rect x="16.5" y="355.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="19.5" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (32 samples, 0.08%)</title><rect x="16.6" y="339.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.6" y="350.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.02%)</title><rect x="16.6" y="323.0" width="0.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="19.6" y="334.0"></text>
</g>
<g>
<title>java.lang.String[] (10 samples, 0.02%)</title><rect x="16.9" y="323.0" width="0.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="19.9" y="334.0"></text>
</g>
<g>
<title>java.lang.String (12 samples, 0.03%)</title><rect x="17.1" y="323.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="20.1" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (32,344 samples, 78.64%)</title><rect x="17.5" y="355.0" width="927.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.5" y="366.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (2,787 samples, 6.78%)</title><rect x="17.5" y="339.0" width="79.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.5" y="350.0">com/googl..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (2,787 samples, 6.78%)</title><rect x="17.5" y="323.0" width="79.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="20.5" y="334.0">com/googl..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (2,787 samples, 6.78%)</title><rect x="17.5" y="307.0" width="79.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.5" y="318.0">com/googl..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (2,787 samples, 6.78%)</title><rect x="17.5" y="291.0" width="79.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.5" y="302.0">com/googl..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (2,787 samples, 6.78%)</title><rect x="17.5" y="275.0" width="79.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.5" y="286.0">ru/mail/p..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2,638 samples, 6.41%)</title><rect x="17.5" y="259.0" width="75.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.5" y="270.0">com/goog..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (1,390 samples, 3.38%)</title><rect x="17.5" y="243.0" width="39.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="20.5" y="254.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (1,390 samples, 3.38%)</title><rect x="17.5" y="227.0" width="39.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="20.5" y="238.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (1,390 samples, 3.38%)</title><rect x="17.5" y="211.0" width="39.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="20.5" y="222.0">jav..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,390 samples, 3.38%)</title><rect x="17.5" y="195.0" width="39.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="20.5" y="206.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,390 samples, 3.38%)</title><rect x="17.5" y="179.0" width="39.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="20.5" y="190.0">com..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$93/567514028.compare (1,390 samples, 3.38%)</title><rect x="17.5" y="163.0" width="39.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="20.5" y="174.0">jav..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,390 samples, 3.38%)</title><rect x="17.5" y="147.0" width="39.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.5" y="158.0">jav..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$91/1733609502.compare (1,390 samples, 3.38%)</title><rect x="17.5" y="131.0" width="39.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.5" y="142.0">jav..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (1,390 samples, 3.38%)</title><rect x="17.5" y="115.0" width="39.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="20.5" y="126.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row$$Lambda$90/332885242.apply (1,390 samples, 3.38%)</title><rect x="17.5" y="99.0" width="39.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="20.5" y="110.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row.getKey (1,390 samples, 3.38%)</title><rect x="17.5" y="83.0" width="39.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="20.5" y="94.0">ru/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1,390 samples, 3.38%)</title><rect x="17.5" y="67.0" width="39.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="20.5" y="78.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1,390 samples, 3.38%)</title><rect x="17.5" y="51.0" width="39.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="20.5" y="62.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.add (1,248 samples, 3.03%)</title><rect x="57.4" y="243.0" width="35.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="60.4" y="254.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (1,248 samples, 3.03%)</title><rect x="57.4" y="227.0" width="35.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="60.4" y="238.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (1,248 samples, 3.03%)</title><rect x="57.4" y="211.0" width="35.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="60.4" y="222.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (1,248 samples, 3.03%)</title><rect x="57.4" y="195.0" width="35.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="60.4" y="206.0">jav..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,248 samples, 3.03%)</title><rect x="57.4" y="179.0" width="35.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="60.4" y="190.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (1,248 samples, 3.03%)</title><rect x="57.4" y="163.0" width="35.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.4" y="174.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1,046 samples, 2.54%)</title><rect x="57.4" y="147.0" width="30.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="60.4" y="158.0">co..</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable$1.next (1,046 samples, 2.54%)</title><rect x="57.4" y="131.0" width="30.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="60.4" y="142.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable$1.next (1,046 samples, 2.54%)</title><rect x="57.4" y="115.0" width="30.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="60.4" y="126.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable.row (1,046 samples, 2.54%)</title><rect x="57.4" y="99.0" width="30.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.4" y="110.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (561 samples, 1.36%)</title><rect x="57.4" y="83.0" width="16.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="60.4" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (361 samples, 0.88%)</title><rect x="57.4" y="67.0" width="10.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="60.4" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (200 samples, 0.49%)</title><rect x="67.7" y="67.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="70.7" y="78.0"></text>
</g>
<g>
<title>byte[] (200 samples, 0.49%)</title><rect x="67.7" y="51.0" width="5.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="70.7" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.gogun.Row (43 samples, 0.10%)</title><rect x="73.5" y="83.0" width="1.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="76.5" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.gogun.Value (38 samples, 0.09%)</title><rect x="74.7" y="83.0" width="1.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="77.7" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable.key (372 samples, 0.90%)</title><rect x="75.8" y="83.0" width="10.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="78.8" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (372 samples, 0.90%)</title><rect x="75.8" y="67.0" width="10.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="78.8" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (265 samples, 0.64%)</title><rect x="75.8" y="51.0" width="7.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="78.8" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (107 samples, 0.26%)</title><rect x="83.4" y="51.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="86.4" y="62.0"></text>
</g>
<g>
<title>byte[] (107 samples, 0.26%)</title><rect x="83.4" y="35.0" width="3.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="86.4" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Value.&lt;init&gt; (32 samples, 0.08%)</title><rect x="86.5" y="83.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.5" y="94.0"></text>
</g>
<g>
<title>java/util/Optional.of (32 samples, 0.08%)</title><rect x="86.5" y="67.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="89.5" y="78.0"></text>
</g>
<g>
<title>java.util.Optional (32 samples, 0.08%)</title><rect x="86.5" y="51.0" width="0.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="89.5" y="62.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$93/567514028.compare (202 samples, 0.49%)</title><rect x="87.4" y="147.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.4" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (202 samples, 0.49%)</title><rect x="87.4" y="131.0" width="5.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="90.4" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$91/1733609502.compare (202 samples, 0.49%)</title><rect x="87.4" y="115.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="90.4" y="126.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (202 samples, 0.49%)</title><rect x="87.4" y="99.0" width="5.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.4" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row$$Lambda$90/332885242.apply (202 samples, 0.49%)</title><rect x="87.4" y="83.0" width="5.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="90.4" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row.getKey (202 samples, 0.49%)</title><rect x="87.4" y="67.0" width="5.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.4" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (202 samples, 0.49%)</title><rect x="87.4" y="51.0" width="5.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="90.4" y="62.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (202 samples, 0.49%)</title><rect x="87.4" y="35.0" width="5.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="90.4" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/DAOImpl$$Lambda$107/424287848.apply (149 samples, 0.36%)</title><rect x="93.2" y="259.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="96.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row.getKey (149 samples, 0.36%)</title><rect x="93.2" y="243.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.2" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (149 samples, 0.36%)</title><rect x="93.2" y="227.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="96.2" y="238.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (149 samples, 0.36%)</title><rect x="93.2" y="211.0" width="4.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="96.2" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (22 samples, 0.05%)</title><rect x="97.4" y="339.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="100.4" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (22 samples, 0.05%)</title><rect x="97.4" y="323.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="100.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/DAOImpl$$Lambda$118/1298423328.apply (22 samples, 0.05%)</title><rect x="97.4" y="307.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="100.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/DAOImpl.lambda$iterator$5 (22 samples, 0.05%)</title><rect x="97.4" y="291.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row.getKey (9 samples, 0.02%)</title><rect x="97.5" y="275.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="100.5" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (9 samples, 0.02%)</title><rect x="97.5" y="259.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="100.5" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (9 samples, 0.02%)</title><rect x="97.5" y="243.0" width="0.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="100.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Value.getData (10 samples, 0.02%)</title><rect x="97.8" y="275.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="100.8" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (10 samples, 0.02%)</title><rect x="97.8" y="259.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="100.8" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (10 samples, 0.02%)</title><rect x="97.8" y="243.0" width="0.3" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="100.8" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/DAOImpl.iterator (29,526 samples, 71.79%)</title><rect x="98.3" y="339.0" width="847.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="101.3" y="350.0">ru/mail/polis/dao/gogun/DAOImpl.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/DAOImpl.rowIterator (29,521 samples, 71.77%)</title><rect x="98.5" y="323.0" width="846.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="101.5" y="334.0">ru/mail/polis/dao/gogun/DAOImpl.rowIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (6,696 samples, 16.28%)</title><rect x="98.5" y="307.0" width="192.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="101.5" y="318.0">com/google/common/collect..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (6,693 samples, 16.27%)</title><rect x="98.6" y="291.0" width="192.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="101.6" y="302.0">com/google/common/collect..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (201 samples, 0.49%)</title><rect x="98.6" y="275.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="101.6" y="286.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (201 samples, 0.49%)</title><rect x="98.6" y="259.0" width="5.8" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="101.6" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (6,478 samples, 15.75%)</title><rect x="104.7" y="275.0" width="185.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="107.7" y="286.0">java/util/PriorityQueue...</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (6,478 samples, 15.75%)</title><rect x="104.7" y="259.0" width="185.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="107.7" y="270.0">java/util/PriorityQueue...</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (72 samples, 0.18%)</title><rect x="104.7" y="243.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="107.7" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (72 samples, 0.18%)</title><rect x="104.7" y="227.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="107.7" y="238.0"></text>
</g>
<g>
<title>java.lang.Object[] (72 samples, 0.18%)</title><rect x="104.7" y="211.0" width="2.1" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="107.7" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (6,406 samples, 15.57%)</title><rect x="106.8" y="243.0" width="183.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="109.8" y="254.0">java/util/PriorityQueue...</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (6,406 samples, 15.57%)</title><rect x="106.8" y="227.0" width="183.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="109.8" y="238.0">java/util/PriorityQueue...</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6,406 samples, 15.57%)</title><rect x="106.8" y="211.0" width="183.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="109.8" y="222.0">com/google/common/collec..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6,406 samples, 15.57%)</title><rect x="106.8" y="195.0" width="183.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="109.8" y="206.0">com/google/common/collec..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (4,654 samples, 11.32%)</title><rect x="106.8" y="179.0" width="133.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="109.8" y="190.0">com/google/common..</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable$1.next (4,647 samples, 11.30%)</title><rect x="107.0" y="163.0" width="133.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="110.0" y="174.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable$1.next (4,647 samples, 11.30%)</title><rect x="107.0" y="147.0" width="133.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.0" y="158.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable.row (4,647 samples, 11.30%)</title><rect x="107.0" y="131.0" width="133.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="110.0" y="142.0">ru/mail/polis/dao..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,353 samples, 5.72%)</title><rect x="107.0" y="115.0" width="67.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="110.0" y="126.0">java/ni..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,527 samples, 3.71%)</title><rect x="107.0" y="99.0" width="43.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="110.0" y="110.0">java..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (826 samples, 2.01%)</title><rect x="150.8" y="99.0" width="23.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="153.8" y="110.0">j..</text>
</g>
<g>
<title>byte[] (826 samples, 2.01%)</title><rect x="150.8" y="83.0" width="23.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="153.8" y="94.0">b..</text>
</g>
<g>
<title>ru.mail.polis.dao.gogun.Row (185 samples, 0.45%)</title><rect x="174.5" y="115.0" width="5.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="177.5" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.gogun.Value (198 samples, 0.48%)</title><rect x="179.8" y="115.0" width="5.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="182.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable.key (1,770 samples, 4.30%)</title><rect x="185.5" y="115.0" width="50.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="188.5" y="126.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,770 samples, 4.30%)</title><rect x="185.5" y="99.0" width="50.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="188.5" y="110.0">java/..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,131 samples, 2.75%)</title><rect x="185.5" y="83.0" width="32.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="188.5" y="94.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (639 samples, 1.55%)</title><rect x="217.9" y="83.0" width="18.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="220.9" y="94.0"></text>
</g>
<g>
<title>byte[] (639 samples, 1.55%)</title><rect x="217.9" y="67.0" width="18.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="220.9" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Value.&lt;init&gt; (141 samples, 0.34%)</title><rect x="236.3" y="115.0" width="4.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="239.3" y="126.0"></text>
</g>
<g>
<title>java/util/Optional.of (141 samples, 0.34%)</title><rect x="236.3" y="99.0" width="4.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="239.3" y="110.0"></text>
</g>
<g>
<title>java.util.Optional (141 samples, 0.34%)</title><rect x="236.3" y="83.0" width="4.0" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="239.3" y="94.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$93/567514028.compare (1,752 samples, 4.26%)</title><rect x="240.3" y="179.0" width="50.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="243.3" y="190.0">java/..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (1,752 samples, 4.26%)</title><rect x="240.3" y="163.0" width="50.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="243.3" y="174.0">java/..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$91/1733609502.compare (1,752 samples, 4.26%)</title><rect x="240.3" y="147.0" width="50.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="243.3" y="158.0">java/..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (1,752 samples, 4.26%)</title><rect x="240.3" y="131.0" width="50.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="243.3" y="142.0">java/..</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row$$Lambda$90/332885242.apply (1,752 samples, 4.26%)</title><rect x="240.3" y="115.0" width="50.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.3" y="126.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row.getKey (1,752 samples, 4.26%)</title><rect x="240.3" y="99.0" width="50.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="243.3" y="110.0">ru/ma..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1,752 samples, 4.26%)</title><rect x="240.3" y="83.0" width="50.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="243.3" y="94.0">java/..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1,752 samples, 4.26%)</title><rect x="240.3" y="67.0" width="50.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="243.3" y="78.0">java...</text>
</g>
<g>
<title>java/lang/Iterable.forEach (22,448 samples, 54.58%)</title><rect x="290.7" y="307.0" width="644.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="293.7" y="318.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (12 samples, 0.03%)</title><rect x="290.7" y="291.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="293.7" y="302.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (9 samples, 0.02%)</title><rect x="290.8" y="275.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.8" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (9 samples, 0.02%)</title><rect x="290.8" y="259.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="293.8" y="270.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (9 samples, 0.02%)</title><rect x="290.8" y="243.0" width="0.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="293.8" y="254.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (9 samples, 0.02%)</title><rect x="291.1" y="291.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="294.1" y="302.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (9 samples, 0.02%)</title><rect x="291.1" y="275.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.1" y="286.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (9 samples, 0.02%)</title><rect x="291.1" y="259.0" width="0.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="294.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/DAOImpl$$Lambda$101/1332204603.accept (22,427 samples, 54.53%)</title><rect x="291.4" y="291.0" width="643.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="294.4" y="302.0">ru/mail/polis/dao/gogun/DAOImpl$$Lambda$101/1332204603.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/DAOImpl.lambda$rowIterator$7 (22,427 samples, 54.53%)</title><rect x="291.4" y="275.0" width="643.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.4" y="286.0">ru/mail/polis/dao/gogun/DAOImpl.lambda$rowIterator$7</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable.iterator (22,427 samples, 54.53%)</title><rect x="291.4" y="259.0" width="643.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="294.4" y="270.0">ru/mail/polis/dao/gogun/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.gogun.SSTable$1 (219 samples, 0.53%)</title><rect x="291.4" y="243.0" width="6.2" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="294.4" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable$1.&lt;init&gt; (22,208 samples, 53.99%)</title><rect x="297.6" y="243.0" width="637.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="300.6" y="254.0">ru/mail/polis/dao/gogun/SSTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable.binarySearch (22,208 samples, 53.99%)</title><rect x="297.6" y="227.0" width="637.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="300.6" y="238.0">ru/mail/polis/dao/gogun/SSTable.binarySearch</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable.key (22,208 samples, 53.99%)</title><rect x="297.6" y="211.0" width="637.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="300.6" y="222.0">ru/mail/polis/dao/gogun/SSTable.key</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (22,208 samples, 53.99%)</title><rect x="297.6" y="195.0" width="637.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="300.6" y="206.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (8,516 samples, 20.70%)</title><rect x="297.6" y="179.0" width="244.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="300.6" y="190.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (13,692 samples, 33.29%)</title><rect x="541.9" y="179.0" width="392.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="544.9" y="190.0">java/nio/HeapByteBuffer.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (13,692 samples, 33.29%)</title><rect x="541.9" y="163.0" width="392.9" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="544.9" y="174.0">byte[]</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (13 samples, 0.03%)</title><rect x="934.8" y="307.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="937.8" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (13 samples, 0.03%)</title><rect x="934.8" y="291.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="937.8" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (42 samples, 0.10%)</title><rect x="935.1" y="307.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="938.1" y="318.0"></text>
</g>
<g>
<title>java.lang.Object[] (42 samples, 0.10%)</title><rect x="935.1" y="291.0" width="1.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="938.1" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (295 samples, 0.72%)</title><rect x="936.3" y="307.0" width="8.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="939.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (289 samples, 0.70%)</title><rect x="936.5" y="291.0" width="8.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="939.5" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (289 samples, 0.70%)</title><rect x="936.5" y="275.0" width="8.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="939.5" y="286.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (149 samples, 0.36%)</title><rect x="936.5" y="259.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="939.5" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (149 samples, 0.36%)</title><rect x="936.5" y="243.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="939.5" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (149 samples, 0.36%)</title><rect x="936.5" y="227.0" width="4.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="939.5" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (149 samples, 0.36%)</title><rect x="936.5" y="211.0" width="4.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="939.5" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (149 samples, 0.36%)</title><rect x="936.5" y="195.0" width="4.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="939.5" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$93/567514028.compare (149 samples, 0.36%)</title><rect x="936.5" y="179.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="939.5" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (149 samples, 0.36%)</title><rect x="936.5" y="163.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="939.5" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$91/1733609502.compare (149 samples, 0.36%)</title><rect x="936.5" y="147.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="939.5" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (149 samples, 0.36%)</title><rect x="936.5" y="131.0" width="4.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="939.5" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row$$Lambda$90/332885242.apply (149 samples, 0.36%)</title><rect x="936.5" y="115.0" width="4.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="939.5" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row.getKey (149 samples, 0.36%)</title><rect x="936.5" y="99.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="939.5" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (149 samples, 0.36%)</title><rect x="936.5" y="83.0" width="4.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="939.5" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (149 samples, 0.36%)</title><rect x="936.5" y="67.0" width="4.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="939.5" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (140 samples, 0.34%)</title><rect x="940.8" y="259.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="943.8" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (140 samples, 0.34%)</title><rect x="940.8" y="243.0" width="4.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="943.8" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (140 samples, 0.34%)</title><rect x="940.8" y="227.0" width="4.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="943.8" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (140 samples, 0.34%)</title><rect x="940.8" y="211.0" width="4.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="943.8" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (140 samples, 0.34%)</title><rect x="940.8" y="195.0" width="4.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="943.8" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (140 samples, 0.34%)</title><rect x="940.8" y="179.0" width="4.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="943.8" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (100 samples, 0.24%)</title><rect x="940.8" y="163.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="943.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable$1.next (100 samples, 0.24%)</title><rect x="940.8" y="147.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="943.8" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable$1.next (100 samples, 0.24%)</title><rect x="940.8" y="131.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="943.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable.row (100 samples, 0.24%)</title><rect x="940.8" y="115.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="943.8" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (51 samples, 0.12%)</title><rect x="940.8" y="99.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="943.8" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (29 samples, 0.07%)</title><rect x="940.8" y="83.0" width="0.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="943.8" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (22 samples, 0.05%)</title><rect x="941.6" y="83.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="944.6" y="94.0"></text>
</g>
<g>
<title>byte[] (22 samples, 0.05%)</title><rect x="941.6" y="67.0" width="0.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="944.6" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable.key (41 samples, 0.10%)</title><rect x="942.4" y="99.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="945.4" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (41 samples, 0.10%)</title><rect x="942.4" y="83.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="945.4" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (25 samples, 0.06%)</title><rect x="942.4" y="67.0" width="0.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="945.4" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (16 samples, 0.04%)</title><rect x="943.2" y="67.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="946.2" y="78.0"></text>
</g>
<g>
<title>byte[] (16 samples, 0.04%)</title><rect x="943.2" y="51.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="946.2" y="62.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$93/567514028.compare (40 samples, 0.10%)</title><rect x="943.6" y="163.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="946.6" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (40 samples, 0.10%)</title><rect x="943.6" y="147.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="946.6" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$91/1733609502.compare (40 samples, 0.10%)</title><rect x="943.6" y="131.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="946.6" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (40 samples, 0.10%)</title><rect x="943.6" y="115.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="946.6" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row$$Lambda$90/332885242.apply (40 samples, 0.10%)</title><rect x="943.6" y="99.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="946.6" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row.getKey (40 samples, 0.10%)</title><rect x="943.6" y="83.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="946.6" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (40 samples, 0.10%)</title><rect x="943.6" y="67.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="946.6" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (40 samples, 0.10%)</title><rect x="943.6" y="51.0" width="1.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="946.6" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/MemTable.iterator (21 samples, 0.05%)</title><rect x="944.8" y="307.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="947.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (9 samples, 0.02%)</title><rect x="944.9" y="291.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="947.9" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (9 samples, 0.02%)</title><rect x="944.9" y="275.0" width="0.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="947.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/ConsistentHashing.get (20 samples, 0.05%)</title><rect x="945.4" y="355.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="948.4" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/ConsistentHashing.get (20 samples, 0.05%)</title><rect x="945.4" y="339.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="948.4" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (11 samples, 0.03%)</title><rect x="945.7" y="323.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="948.7" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (11 samples, 0.03%)</title><rect x="945.7" y="307.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="948.7" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap (11 samples, 0.03%)</title><rect x="945.7" y="291.0" width="0.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="948.7" y="302.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (8,495 samples, 20.65%)</title><rect x="946.3" y="451.0" width="243.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="949.3" y="462.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (221 samples, 0.54%)</title><rect x="946.3" y="435.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="949.3" y="446.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (221 samples, 0.54%)</title><rect x="946.3" y="419.0" width="6.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="949.3" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (8,274 samples, 20.12%)</title><rect x="952.6" y="435.0" width="237.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="955.6" y="446.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (8,274 samples, 20.12%)</title><rect x="952.6" y="419.0" width="237.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="955.6" y="430.0">one/nio/http/HttpSession.proces..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (8,274 samples, 20.12%)</title><rect x="952.6" y="403.0" width="237.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="955.6" y="414.0">one/nio/http/HttpSession.proces..</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1,882 samples, 4.58%)</title><rect x="952.6" y="387.0" width="54.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="955.6" y="398.0">one/n..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1,882 samples, 4.58%)</title><rect x="952.6" y="371.0" width="54.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="955.6" y="382.0">one/n..</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (885 samples, 2.15%)</title><rect x="952.6" y="355.0" width="25.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="955.6" y="366.0">R..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (530 samples, 1.29%)</title><rect x="952.6" y="339.0" width="15.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="955.6" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (530 samples, 1.29%)</title><rect x="952.6" y="323.0" width="15.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="955.6" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (530 samples, 1.29%)</title><rect x="952.6" y="307.0" width="15.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="955.6" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (530 samples, 1.29%)</title><rect x="952.6" y="291.0" width="15.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="955.6" y="302.0"></text>
</g>
<g>
<title>java.lang.String (45 samples, 0.11%)</title><rect x="952.6" y="275.0" width="1.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="955.6" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (485 samples, 1.18%)</title><rect x="953.9" y="275.0" width="13.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="956.9" y="286.0"></text>
</g>
<g>
<title>byte[] (485 samples, 1.18%)</title><rect x="953.9" y="259.0" width="13.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="956.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl.get (355 samples, 0.86%)</title><rect x="967.8" y="339.0" width="10.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="970.8" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl.execute (355 samples, 0.86%)</title><rect x="967.8" y="323.0" width="10.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="970.8" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/15440027.linkToTargetMethod (353 samples, 0.86%)</title><rect x="967.8" y="307.0" width="10.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="970.8" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH/1702940637.invokeStatic (353 samples, 0.86%)</title><rect x="967.8" y="291.0" width="10.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="970.8" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl$$Lambda$85/81009881.get$Lambda (353 samples, 0.86%)</title><rect x="967.8" y="275.0" width="10.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="970.8" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.service.gogun.AsyncServiceImpl$$Lambda$85 (353 samples, 0.86%)</title><rect x="967.8" y="259.0" width="10.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="970.8" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (997 samples, 2.42%)</title><rect x="978.0" y="355.0" width="28.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="981.0" y="366.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (997 samples, 2.42%)</title><rect x="978.0" y="339.0" width="28.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="981.0" y="350.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (997 samples, 2.42%)</title><rect x="978.0" y="323.0" width="28.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="981.0" y="334.0">ja..</text>
</g>
<g>
<title>java.lang.String (290 samples, 0.71%)</title><rect x="978.0" y="307.0" width="8.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="981.0" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (707 samples, 1.72%)</title><rect x="986.3" y="307.0" width="20.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="989.3" y="318.0"></text>
</g>
<g>
<title>byte[] (707 samples, 1.72%)</title><rect x="986.3" y="291.0" width="20.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="989.3" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4,339 samples, 10.55%)</title><rect x="1006.6" y="387.0" width="124.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1009.6" y="398.0">one/nio/http/Ht..</text>
</g>
<g>
<title>one.nio.http.Request (746 samples, 1.81%)</title><rect x="1006.6" y="371.0" width="21.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="1009.6" y="382.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1,330 samples, 3.23%)</title><rect x="1028.0" y="371.0" width="38.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1031.0" y="382.0">one..</text>
</g>
<g>
<title>java.lang.String[] (1,095 samples, 2.66%)</title><rect x="1028.0" y="355.0" width="31.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1031.0" y="366.0">ja..</text>
</g>
<g>
<title>java.lang.String[] (235 samples, 0.57%)</title><rect x="1059.4" y="355.0" width="6.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1062.4" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,263 samples, 5.50%)</title><rect x="1066.2" y="371.0" width="64.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1069.2" y="382.0">one/nio..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,263 samples, 5.50%)</title><rect x="1066.2" y="355.0" width="64.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1069.2" y="366.0">one/nio..</text>
</g>
<g>
<title>char[] (1,024 samples, 2.49%)</title><rect x="1066.2" y="339.0" width="29.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1069.2" y="350.0">ch..</text>
</g>
<g>
<title>char[] (95 samples, 0.23%)</title><rect x="1095.6" y="339.0" width="2.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1098.6" y="350.0"></text>
</g>
<g>
<title>java.lang.String (27 samples, 0.07%)</title><rect x="1098.3" y="339.0" width="0.8" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1101.3" y="350.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,117 samples, 2.72%)</title><rect x="1099.1" y="339.0" width="32.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1102.1" y="350.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,117 samples, 2.72%)</title><rect x="1099.1" y="323.0" width="32.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1102.1" y="334.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,117 samples, 2.72%)</title><rect x="1099.1" y="307.0" width="32.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1102.1" y="318.0">ja..</text>
</g>
<g>
<title>byte[] (1,117 samples, 2.72%)</title><rect x="1099.1" y="291.0" width="32.0" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1102.1" y="302.0">by..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,053 samples, 4.99%)</title><rect x="1131.1" y="387.0" width="58.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1134.1" y="398.0">one/ni..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,053 samples, 4.99%)</title><rect x="1131.1" y="371.0" width="58.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1134.1" y="382.0">one/ni..</text>
</g>
<g>
<title>char[] (839 samples, 2.04%)</title><rect x="1131.1" y="355.0" width="24.1" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1134.1" y="366.0">c..</text>
</g>
<g>
<title>char[] (147 samples, 0.36%)</title><rect x="1155.2" y="355.0" width="4.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1158.2" y="366.0"></text>
</g>
<g>
<title>java.lang.String (302 samples, 0.73%)</title><rect x="1159.4" y="355.0" width="8.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1162.4" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (765 samples, 1.86%)</title><rect x="1168.1" y="355.0" width="21.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1171.1" y="366.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (765 samples, 1.86%)</title><rect x="1168.1" y="339.0" width="21.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1171.1" y="350.0">j..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (765 samples, 1.86%)</title><rect x="1168.1" y="323.0" width="21.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1171.1" y="334.0">j..</text>
</g>
<g>
<title>byte[] (765 samples, 1.86%)</title><rect x="1168.1" y="307.0" width="21.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1171.1" y="318.0">b..</text>
</g>
</g>
</svg>
