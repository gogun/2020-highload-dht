<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470"
     xmlns="http://www.w3.org/2000/svg">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="453"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="453"> </text>
<g id="frames">
<g>
<title>all (175,035 samples, 100.00%)</title><rect x="10.0" y="419.0" width="1180.0" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="13.0" y="430.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (85,100 samples, 48.62%)</title><rect x="10.0" y="403.0" width="573.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="414.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (85,100 samples, 48.62%)</title><rect x="10.0" y="387.0" width="573.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="398.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (85,100 samples, 48.62%)</title><rect x="10.0" y="371.0" width="573.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="382.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,078 samples, 0.62%)</title><rect x="10.0" y="355.0" width="7.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.poll (38 samples, 0.02%)</title><rect x="10.0" y="339.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (38 samples, 0.02%)</title><rect x="10.0" y="323.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (38 samples, 0.02%)</title><rect x="10.0" y="307.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (38 samples, 0.02%)</title><rect x="10.0" y="291.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (38 samples, 0.02%)</title><rect x="10.0" y="275.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (38 samples, 0.02%)</title><rect x="10.0" y="259.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (1,040 samples, 0.59%)</title><rect x="10.3" y="339.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="13.3" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (915 samples, 0.52%)</title><rect x="10.3" y="323.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="13.3" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (915 samples, 0.52%)</title><rect x="10.3" y="307.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.3" y="318.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (915 samples, 0.52%)</title><rect x="10.3" y="291.0" width="6.1" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="13.3" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (125 samples, 0.07%)</title><rect x="16.4" y="323.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.4" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (125 samples, 0.07%)</title><rect x="16.4" y="307.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.4" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (125 samples, 0.07%)</title><rect x="16.4" y="291.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="19.4" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (125 samples, 0.07%)</title><rect x="16.4" y="275.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.4" y="286.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (125 samples, 0.07%)</title><rect x="16.4" y="259.0" width="0.9" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="19.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/DAOImpl$$Lambda$128/858064293.run (1,698 samples, 0.97%)</title><rect x="17.3" y="355.0" width="11.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="20.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/DAOImpl.lambda$flush$8 (1,698 samples, 0.97%)</title><rect x="17.3" y="339.0" width="11.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="20.3" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable.serialize (1,695 samples, 0.97%)</title><rect x="17.3" y="323.0" width="11.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="20.3" y="334.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (38 samples, 0.02%)</title><rect x="17.3" y="307.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="20.3" y="318.0"></text>
</g>
<g>
<title>java.lang.Integer (38 samples, 0.02%)</title><rect x="17.3" y="291.0" width="0.3" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="20.3" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,191 samples, 0.68%)</title><rect x="17.6" y="307.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="20.6" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (870 samples, 0.50%)</title><rect x="17.6" y="291.0" width="5.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="20.6" y="302.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (321 samples, 0.18%)</title><rect x="23.4" y="291.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.4" y="302.0"></text>
</g>
<g>
<title>byte[] (321 samples, 0.18%)</title><rect x="23.4" y="275.0" width="2.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="26.4" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row.getKey (229 samples, 0.13%)</title><rect x="25.7" y="307.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="28.7" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (229 samples, 0.13%)</title><rect x="25.7" y="291.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.7" y="302.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (229 samples, 0.13%)</title><rect x="25.7" y="275.0" width="1.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="28.7" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Value.getData (222 samples, 0.13%)</title><rect x="27.2" y="307.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="30.2" y="318.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (222 samples, 0.13%)</title><rect x="27.2" y="291.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="30.2" y="302.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (222 samples, 0.13%)</title><rect x="27.2" y="275.0" width="1.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="30.2" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl$$Lambda$120/1461239813.run (82,323 samples, 47.03%)</title><rect x="28.7" y="355.0" width="555.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.7" y="366.0">ru/mail/polis/service/gogun/AsyncServiceImpl$$Lambda$120/1461239813.run</text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl.lambda$upsert$4 (82,323 samples, 47.03%)</title><rect x="28.7" y="339.0" width="555.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.7" y="350.0">ru/mail/polis/service/gogun/AsyncServiceImpl.lambda$upsert$4</text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl.handlePutRequest (82,323 samples, 47.03%)</title><rect x="28.7" y="323.0" width="555.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="31.7" y="334.0">ru/mail/polis/service/gogun/AsyncServiceImpl.handlePutRequest</text>
</g>
<g>
<title>java/lang/String.getBytes (30,725 samples, 17.55%)</title><rect x="28.7" y="307.0" width="207.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="31.7" y="318.0">java/lang/String.getBytes</text>
</g>
<g>
<title>java/lang/StringCoding.encode (30,725 samples, 17.55%)</title><rect x="28.7" y="291.0" width="207.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.7" y="302.0">java/lang/StringCoding.encode</text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (30,725 samples, 17.55%)</title><rect x="28.7" y="275.0" width="207.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="31.7" y="286.0">java/lang/StringCoding.enco..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (30,725 samples, 17.55%)</title><rect x="28.7" y="259.0" width="207.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="31.7" y="270.0">java/util/Arrays.copyOf</text>
</g>
<g>
<title>byte[] (30,725 samples, 17.55%)</title><rect x="28.7" y="243.0" width="207.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="31.7" y="254.0">byte[]</text>
</g>
<g>
<title>one.nio.http.Response (2,506 samples, 1.43%)</title><rect x="235.9" y="307.0" width="16.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="238.9" y="318.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (13,402 samples, 7.66%)</title><rect x="252.7" y="307.0" width="90.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="255.7" y="318.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (13,402 samples, 7.66%)</title><rect x="252.7" y="291.0" width="90.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="255.7" y="302.0">one/nio/ht..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (9,308 samples, 5.32%)</title><rect x="252.7" y="275.0" width="62.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="255.7" y="286.0">one/ni..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (9,308 samples, 5.32%)</title><rect x="252.7" y="259.0" width="62.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="255.7" y="270.0">one/ni..</text>
</g>
<g>
<title>byte[] (8,914 samples, 5.09%)</title><rect x="252.7" y="243.0" width="60.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="255.7" y="254.0">byte[]</text>
</g>
<g>
<title>byte[] (394 samples, 0.23%)</title><rect x="312.8" y="243.0" width="2.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="315.8" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (4,094 samples, 2.34%)</title><rect x="315.5" y="275.0" width="27.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="318.5" y="286.0">o..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (4,094 samples, 2.34%)</title><rect x="315.5" y="259.0" width="27.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="318.5" y="270.0">o..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (9,896 samples, 5.65%)</title><rect x="343.1" y="307.0" width="66.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="346.1" y="318.0">one/nio..</text>
</g>
<g>
<title>byte[] (4,170 samples, 2.38%)</title><rect x="343.1" y="291.0" width="28.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="346.1" y="302.0">by..</text>
</g>
<g>
<title>java.lang.String[] (3,280 samples, 1.87%)</title><rect x="371.2" y="291.0" width="22.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="374.2" y="302.0">j..</text>
</g>
<g>
<title>java.lang.String (2,446 samples, 1.40%)</title><rect x="393.3" y="291.0" width="16.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="396.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/DAOImpl.upsert (16,036 samples, 9.16%)</title><rect x="409.8" y="307.0" width="108.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="412.8" y="318.0">ru/mail/polis..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1,085 samples, 0.62%)</title><rect x="409.8" y="291.0" width="7.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="412.8" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1,085 samples, 0.62%)</title><rect x="409.8" y="275.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="412.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1,085 samples, 0.62%)</title><rect x="409.8" y="259.0" width="7.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="412.8" y="270.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (874 samples, 0.50%)</title><rect x="409.8" y="243.0" width="5.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="412.8" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (874 samples, 0.50%)</title><rect x="409.8" y="227.0" width="5.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="412.8" y="238.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (480 samples, 0.27%)</title><rect x="409.8" y="211.0" width="3.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="412.8" y="222.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (480 samples, 0.27%)</title><rect x="409.8" y="195.0" width="3.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="412.8" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (375 samples, 0.21%)</title><rect x="413.2" y="211.0" width="2.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="416.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (375 samples, 0.21%)</title><rect x="413.2" y="195.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="416.2" y="206.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter (375 samples, 0.21%)</title><rect x="413.2" y="179.0" width="2.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="416.2" y="190.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.set (185 samples, 0.11%)</title><rect x="415.7" y="243.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="418.7" y="254.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (185 samples, 0.11%)</title><rect x="415.7" y="227.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="418.7" y="238.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (185 samples, 0.11%)</title><rect x="415.7" y="211.0" width="1.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="418.7" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/MemTable.upsert (14,951 samples, 8.54%)</title><rect x="417.1" y="291.0" width="100.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="420.1" y="302.0">ru/mail/poli..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (9,758 samples, 5.57%)</title><rect x="417.1" y="275.0" width="65.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="420.1" y="286.0">java/ni..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (9,758 samples, 5.57%)</title><rect x="417.1" y="259.0" width="65.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="420.1" y="270.0">java.ni..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (995 samples, 0.57%)</title><rect x="482.9" y="275.0" width="6.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="485.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (995 samples, 0.57%)</title><rect x="482.9" y="259.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="485.9" y="270.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Index (342 samples, 0.20%)</title><rect x="482.9" y="243.0" width="2.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="485.9" y="254.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Node (653 samples, 0.37%)</title><rect x="485.2" y="243.0" width="4.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="488.2" y="254.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.gogun.Value (2,515 samples, 1.44%)</title><rect x="489.6" y="275.0" width="17.0" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="492.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Value.&lt;init&gt; (1,683 samples, 0.96%)</title><rect x="506.6" y="275.0" width="11.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="509.6" y="286.0"></text>
</g>
<g>
<title>java/util/Optional.of (1,683 samples, 0.96%)</title><rect x="506.6" y="259.0" width="11.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="509.6" y="270.0"></text>
</g>
<g>
<title>java.util.Optional (1,683 samples, 0.96%)</title><rect x="506.6" y="243.0" width="11.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="509.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl.getBuffer (9,758 samples, 5.57%)</title><rect x="517.9" y="307.0" width="65.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="520.9" y="318.0">ru/mail..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9,758 samples, 5.57%)</title><rect x="517.9" y="291.0" width="65.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="520.9" y="302.0">java/ni..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9,758 samples, 5.57%)</title><rect x="517.9" y="275.0" width="65.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="520.9" y="286.0">java/ni..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (9,758 samples, 5.57%)</title><rect x="517.9" y="259.0" width="65.8" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="520.9" y="270.0">java.ni..</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (89,935 samples, 51.38%)</title><rect x="583.7" y="403.0" width="606.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="586.7" y="414.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (2,079 samples, 1.19%)</title><rect x="583.7" y="387.0" width="14.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="586.7" y="398.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (2,079 samples, 1.19%)</title><rect x="583.7" y="371.0" width="14.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="586.7" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (87,856 samples, 50.19%)</title><rect x="597.7" y="387.0" width="592.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="600.7" y="398.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (87,856 samples, 50.19%)</title><rect x="597.7" y="371.0" width="592.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="600.7" y="382.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (87,856 samples, 50.19%)</title><rect x="597.7" y="355.0" width="592.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="600.7" y="366.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (19,585 samples, 11.19%)</title><rect x="597.7" y="339.0" width="132.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="600.7" y="350.0">one/nio/http/Htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (19,585 samples, 11.19%)</title><rect x="597.7" y="323.0" width="132.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="600.7" y="334.0">one/nio/http/Htt..</text>
</g>
<g>
<title>RequestHandler3_upsert.handleRequest (13,023 samples, 7.44%)</title><rect x="597.7" y="307.0" width="87.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="600.7" y="318.0">RequestHan..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (6,716 samples, 3.84%)</title><rect x="597.7" y="291.0" width="45.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="600.7" y="302.0">one/..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (6,716 samples, 3.84%)</title><rect x="597.7" y="275.0" width="45.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="600.7" y="286.0">one/..</text>
</g>
<g>
<title>java/lang/String.substring (6,716 samples, 3.84%)</title><rect x="597.7" y="259.0" width="45.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="600.7" y="270.0">java..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6,716 samples, 3.84%)</title><rect x="597.7" y="243.0" width="45.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="600.7" y="254.0">java..</text>
</g>
<g>
<title>java.lang.String (2,828 samples, 1.62%)</title><rect x="597.7" y="227.0" width="19.1" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="600.7" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3,888 samples, 2.22%)</title><rect x="616.8" y="227.0" width="26.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="619.8" y="238.0">j..</text>
</g>
<g>
<title>byte[] (3,888 samples, 2.22%)</title><rect x="616.8" y="211.0" width="26.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="619.8" y="222.0">b..</text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl.upsert (6,307 samples, 3.60%)</title><rect x="643.0" y="291.0" width="42.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="646.0" y="302.0">ru/m..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3,946 samples, 2.25%)</title><rect x="643.0" y="275.0" width="26.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="646.0" y="286.0">j..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3,946 samples, 2.25%)</title><rect x="643.0" y="259.0" width="26.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="646.0" y="270.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/gogun/AsyncServiceImpl$$Lambda$120/1461239813.get$Lambda (3,946 samples, 2.25%)</title><rect x="643.0" y="243.0" width="26.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="646.0" y="254.0">r..</text>
</g>
<g>
<title>ru.mail.polis.service.gogun.AsyncServiceImpl$$Lambda$120 (3,946 samples, 2.25%)</title><rect x="643.0" y="227.0" width="26.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="646.0" y="238.0">r..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2,361 samples, 1.35%)</title><rect x="669.6" y="275.0" width="15.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="672.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (142 samples, 0.08%)</title><rect x="669.6" y="259.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="672.6" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (142 samples, 0.08%)</title><rect x="669.6" y="243.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="672.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (142 samples, 0.08%)</title><rect x="669.6" y="227.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="672.6" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (142 samples, 0.08%)</title><rect x="669.6" y="211.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="672.6" y="222.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (142 samples, 0.08%)</title><rect x="669.6" y="195.0" width="1.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="672.6" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.addWorker (2,219 samples, 1.27%)</title><rect x="670.6" y="259.0" width="14.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="673.6" y="270.0"></text>
</g>
<g>
<title>java.util.concurrent.ThreadPoolExecutor$Worker (68 samples, 0.04%)</title><rect x="670.6" y="243.0" width="0.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="673.6" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.&lt;init&gt; (2,109 samples, 1.20%)</title><rect x="671.3" y="243.0" width="14.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="674.3" y="254.0"></text>
</g>
<g>
<title>com/google/common/util/concurrent/ThreadFactoryBuilder$1.newThread (2,109 samples, 1.20%)</title><rect x="671.3" y="227.0" width="14.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="674.3" y="238.0"></text>
</g>
<g>
<title>com/google/common/util/concurrent/ThreadFactoryBuilder.access$000 (893 samples, 0.51%)</title><rect x="671.3" y="211.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="674.3" y="222.0"></text>
</g>
<g>
<title>com/google/common/util/concurrent/ThreadFactoryBuilder.format (893 samples, 0.51%)</title><rect x="671.3" y="195.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="674.3" y="206.0"></text>
</g>
<g>
<title>java/lang/String.format (893 samples, 0.51%)</title><rect x="671.3" y="179.0" width="6.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="674.3" y="190.0"></text>
</g>
<g>
<title>java.util.Formatter (59 samples, 0.03%)</title><rect x="671.3" y="163.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="674.3" y="174.0"></text>
</g>
<g>
<title>java/util/Formatter.&lt;init&gt; (68 samples, 0.04%)</title><rect x="671.7" y="163.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="674.7" y="174.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (42 samples, 0.02%)</title><rect x="671.8" y="147.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="674.8" y="158.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (42 samples, 0.02%)</title><rect x="671.8" y="131.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="674.8" y="142.0"></text>
</g>
<g>
<title>byte[] (42 samples, 0.02%)</title><rect x="671.8" y="115.0" width="0.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="674.8" y="126.0"></text>
</g>
<g>
<title>java/util/Formatter.format (699 samples, 0.40%)</title><rect x="672.1" y="163.0" width="4.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="675.1" y="174.0"></text>
</g>
<g>
<title>java/util/Formatter.format (699 samples, 0.40%)</title><rect x="672.1" y="147.0" width="4.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="675.1" y="158.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (156 samples, 0.09%)</title><rect x="672.1" y="131.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="675.1" y="142.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printInteger (156 samples, 0.09%)</title><rect x="672.1" y="115.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="675.1" y="126.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (156 samples, 0.09%)</title><rect x="672.1" y="99.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="675.1" y="110.0"></text>
</g>
<g>
<title>java/lang/Long.toString (77 samples, 0.04%)</title><rect x="672.3" y="83.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="675.3" y="94.0"></text>
</g>
<g>
<title>java/lang/Long.toString (77 samples, 0.04%)</title><rect x="672.3" y="67.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="675.3" y="78.0"></text>
</g>
<g>
<title>java.lang.String (44 samples, 0.03%)</title><rect x="672.5" y="51.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="675.5" y="62.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (49 samples, 0.03%)</title><rect x="672.8" y="83.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="675.8" y="94.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (49 samples, 0.03%)</title><rect x="672.8" y="67.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="675.8" y="78.0"></text>
</g>
<g>
<title>byte[] (49 samples, 0.03%)</title><rect x="672.8" y="51.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="675.8" y="62.0"></text>
</g>
<g>
<title>java/util/Formatter.parse (543 samples, 0.31%)</title><rect x="673.2" y="131.0" width="3.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="676.2" y="142.0"></text>
</g>
<g>
<title>java.util.ArrayList (39 samples, 0.02%)</title><rect x="673.2" y="115.0" width="0.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="676.2" y="126.0"></text>
</g>
<g>
<title>java.util.Formatter$FixedString (38 samples, 0.02%)</title><rect x="673.4" y="115.0" width="0.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="676.4" y="126.0"></text>
</g>
<g>
<title>java.util.Formatter$FormatSpecifier (63 samples, 0.04%)</title><rect x="673.7" y="115.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="676.7" y="126.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (77 samples, 0.04%)</title><rect x="674.1" y="115.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="677.1" y="126.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (77 samples, 0.04%)</title><rect x="674.1" y="99.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="677.1" y="110.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (77 samples, 0.04%)</title><rect x="674.1" y="83.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="677.1" y="94.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (77 samples, 0.04%)</title><rect x="674.1" y="67.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="677.1" y="78.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (77 samples, 0.04%)</title><rect x="674.1" y="51.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="677.1" y="62.0"></text>
</g>
<g>
<title>java.lang.Object[] (77 samples, 0.04%)</title><rect x="674.1" y="35.0" width="0.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="677.1" y="46.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.matcher (303 samples, 0.17%)</title><rect x="674.8" y="115.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="677.8" y="126.0"></text>
</g>
<g>
<title>java.util.regex.Matcher (109 samples, 0.06%)</title><rect x="674.8" y="99.0" width="0.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="677.8" y="110.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.&lt;init&gt; (194 samples, 0.11%)</title><rect x="675.5" y="99.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="678.5" y="110.0"></text>
</g>
<g>
<title>int[] (178 samples, 0.10%)</title><rect x="675.5" y="83.0" width="1.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="678.5" y="94.0"></text>
</g>
<g>
<title>java/util/Formatter.toString (67 samples, 0.04%)</title><rect x="676.8" y="163.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="679.8" y="174.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (67 samples, 0.04%)</title><rect x="676.8" y="147.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="679.8" y="158.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (67 samples, 0.04%)</title><rect x="676.8" y="131.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="679.8" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (40 samples, 0.02%)</title><rect x="677.0" y="115.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="680.0" y="126.0"></text>
</g>
<g>
<title>byte[] (40 samples, 0.02%)</title><rect x="677.0" y="99.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="680.0" y="110.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (64 samples, 0.04%)</title><rect x="677.3" y="211.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="680.3" y="222.0"></text>
</g>
<g>
<title>java.lang.Long (64 samples, 0.04%)</title><rect x="677.3" y="195.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="680.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DefaultThreadFactory.newThread (1,152 samples, 0.66%)</title><rect x="677.7" y="211.0" width="7.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="680.7" y="222.0"></text>
</g>
<g>
<title>java.lang.Thread (283 samples, 0.16%)</title><rect x="677.9" y="195.0" width="1.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="680.9" y="206.0"></text>
</g>
<g>
<title>java.lang.Thread (238 samples, 0.14%)</title><rect x="679.8" y="195.0" width="1.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="682.8" y="206.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.&lt;init&gt; (44 samples, 0.03%)</title><rect x="681.5" y="195.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="684.5" y="206.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.&lt;init&gt; (44 samples, 0.03%)</title><rect x="681.5" y="179.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="684.5" y="190.0"></text>
</g>
<g>
<title>byte[] (44 samples, 0.03%)</title><rect x="681.5" y="163.0" width="0.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="684.5" y="174.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (69 samples, 0.04%)</title><rect x="681.8" y="195.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="684.8" y="206.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (69 samples, 0.04%)</title><rect x="681.8" y="179.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="684.8" y="190.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.ensureCapacityInternal (69 samples, 0.04%)</title><rect x="681.8" y="163.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="684.8" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (69 samples, 0.04%)</title><rect x="681.8" y="147.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="684.8" y="158.0"></text>
</g>
<g>
<title>byte[] (69 samples, 0.04%)</title><rect x="681.8" y="131.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="684.8" y="142.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.toString (128 samples, 0.07%)</title><rect x="682.2" y="195.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="685.2" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (128 samples, 0.07%)</title><rect x="682.2" y="179.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="685.2" y="190.0"></text>
</g>
<g>
<title>java.lang.String (51 samples, 0.03%)</title><rect x="682.2" y="163.0" width="0.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="685.2" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (77 samples, 0.04%)</title><rect x="682.6" y="163.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="685.6" y="174.0"></text>
</g>
<g>
<title>byte[] (77 samples, 0.04%)</title><rect x="682.6" y="147.0" width="0.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="685.6" y="158.0"></text>
</g>
<g>
<title>java/lang/Thread.&lt;init&gt; (356 samples, 0.20%)</title><rect x="683.1" y="195.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="686.1" y="206.0"></text>
</g>
<g>
<title>java/lang/Thread.&lt;init&gt; (356 samples, 0.20%)</title><rect x="683.1" y="179.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="686.1" y="190.0"></text>
</g>
<g>
<title>java/security/AccessController.getContext (321 samples, 0.18%)</title><rect x="683.3" y="163.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="686.3" y="174.0"></text>
</g>
<g>
<title>java/security/AccessControlContext.optimize (154 samples, 0.09%)</title><rect x="683.3" y="147.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="686.3" y="158.0"></text>
</g>
<g>
<title>java/security/AccessControlContext.combine (154 samples, 0.09%)</title><rect x="683.3" y="131.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="686.3" y="142.0"></text>
</g>
<g>
<title>java.security.ProtectionDomain[] (154 samples, 0.09%)</title><rect x="683.3" y="115.0" width="1.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="686.3" y="126.0"></text>
</g>
<g>
<title>java/security/AccessController.getStackAccessControlContext (167 samples, 0.10%)</title><rect x="684.4" y="147.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="687.4" y="158.0"></text>
</g>
<g>
<title>java.security.AccessControlContext (105 samples, 0.06%)</title><rect x="684.4" y="131.0" width="0.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="687.4" y="142.0"></text>
</g>
<g>
<title>java.security.ProtectionDomain[] (62 samples, 0.04%)</title><rect x="685.1" y="131.0" width="0.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="688.1" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (6,562 samples, 3.75%)</title><rect x="685.5" y="307.0" width="44.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="688.5" y="318.0">one/..</text>
</g>
<g>
<title>java/lang/String.substring (6,562 samples, 3.75%)</title><rect x="685.5" y="291.0" width="44.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="688.5" y="302.0">java..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6,562 samples, 3.75%)</title><rect x="685.5" y="275.0" width="44.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="688.5" y="286.0">java..</text>
</g>
<g>
<title>java.lang.String (2,930 samples, 1.67%)</title><rect x="685.5" y="259.0" width="19.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="688.5" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3,632 samples, 2.08%)</title><rect x="705.3" y="259.0" width="24.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="708.3" y="270.0">j..</text>
</g>
<g>
<title>byte[] (3,632 samples, 2.08%)</title><rect x="705.3" y="243.0" width="24.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="708.3" y="254.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (30,476 samples, 17.41%)</title><rect x="729.8" y="339.0" width="205.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="732.8" y="350.0">one/nio/http/HttpSession.pa..</text>
</g>
<g>
<title>one.nio.http.Request (4,878 samples, 2.79%)</title><rect x="729.8" y="323.0" width="32.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="732.8" y="334.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (9,701 samples, 5.54%)</title><rect x="762.6" y="323.0" width="65.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="765.6" y="334.0">one/nio..</text>
</g>
<g>
<title>java.lang.String[] (9,694 samples, 5.54%)</title><rect x="762.6" y="307.0" width="65.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="765.6" y="318.0">java.la..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (15,897 samples, 9.08%)</title><rect x="828.0" y="323.0" width="107.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="831.0" y="334.0">one/nio/util/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (15,897 samples, 9.08%)</title><rect x="828.0" y="307.0" width="107.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="831.0" y="318.0">one/nio/util/..</text>
</g>
<g>
<title>char[] (8,443 samples, 4.82%)</title><rect x="828.0" y="291.0" width="57.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="831.0" y="302.0">char[]</text>
</g>
<g>
<title>java.lang.String (2,687 samples, 1.54%)</title><rect x="885.0" y="291.0" width="18.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="888.0" y="302.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,767 samples, 2.72%)</title><rect x="903.1" y="291.0" width="32.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="906.1" y="302.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,767 samples, 2.72%)</title><rect x="903.1" y="275.0" width="32.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="906.1" y="286.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4,767 samples, 2.72%)</title><rect x="903.1" y="259.0" width="32.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="906.1" y="270.0">ja..</text>
</g>
<g>
<title>byte[] (4,767 samples, 2.72%)</title><rect x="903.1" y="243.0" width="32.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="906.1" y="254.0">by..</text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (3,795 samples, 2.17%)</title><rect x="935.2" y="339.0" width="25.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="938.2" y="350.0">o..</text>
</g>
<g>
<title>byte[] (3,795 samples, 2.17%)</title><rect x="935.2" y="323.0" width="25.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="938.2" y="334.0">b..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5,820 samples, 3.33%)</title><rect x="960.8" y="339.0" width="39.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="963.8" y="350.0">one..</text>
</g>
<g>
<title>java/lang/String.substring (5,820 samples, 3.33%)</title><rect x="960.8" y="323.0" width="39.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="963.8" y="334.0">jav..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5,820 samples, 3.33%)</title><rect x="960.8" y="307.0" width="39.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="963.8" y="318.0">jav..</text>
</g>
<g>
<title>java.lang.String (2,941 samples, 1.68%)</title><rect x="960.8" y="291.0" width="19.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="963.8" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,879 samples, 1.64%)</title><rect x="980.6" y="291.0" width="19.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="983.6" y="302.0"></text>
</g>
<g>
<title>byte[] (2,879 samples, 1.64%)</title><rect x="980.6" y="275.0" width="19.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="983.6" y="286.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (28,180 samples, 16.10%)</title><rect x="1000.0" y="339.0" width="190.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1003.0" y="350.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (28,180 samples, 16.10%)</title><rect x="1000.0" y="323.0" width="190.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1003.0" y="334.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (13,485 samples, 7.70%)</title><rect x="1000.0" y="307.0" width="90.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1003.0" y="318.0">char[]</text>
</g>
<g>
<title>java.lang.String (5,393 samples, 3.08%)</title><rect x="1090.9" y="307.0" width="36.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="1093.9" y="318.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9,302 samples, 5.31%)</title><rect x="1127.3" y="307.0" width="62.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1130.3" y="318.0">java/l..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9,302 samples, 5.31%)</title><rect x="1127.3" y="291.0" width="62.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1130.3" y="302.0">java/l..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (9,302 samples, 5.31%)</title><rect x="1127.3" y="275.0" width="62.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1130.3" y="286.0">java/l..</text>
</g>
<g>
<title>byte[] (9,302 samples, 5.31%)</title><rect x="1127.3" y="259.0" width="62.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1130.3" y="270.0">byte[]</text>
</g>
</g>
</svg>
