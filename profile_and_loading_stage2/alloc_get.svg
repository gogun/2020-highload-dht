<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550"
	 xmlns="http://www.w3.org/2000/svg">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="533"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="533"> </text>
<g id="frames">
<g>
<title>all (8,600 samples, 100.00%)</title><rect x="10.0" y="499.0" width="1180.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="13.0" y="510.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (8,600 samples, 100.00%)</title><rect x="10.0" y="483.0" width="1180.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.0" y="494.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (23 samples, 0.27%)</title><rect x="10.0" y="467.0" width="3.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (23 samples, 0.27%)</title><rect x="10.0" y="451.0" width="3.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (8,577 samples, 99.73%)</title><rect x="13.2" y="467.0" width="1176.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="16.2" y="478.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (8,577 samples, 99.73%)</title><rect x="13.2" y="451.0" width="1176.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="16.2" y="462.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (8,577 samples, 99.73%)</title><rect x="13.2" y="435.0" width="1176.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.2" y="446.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (8,559 samples, 99.52%)</title><rect x="13.2" y="419.0" width="1174.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="16.2" y="430.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (8,559 samples, 99.52%)</title><rect x="13.2" y="403.0" width="1174.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="16.2" y="414.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_get.handleRequest (8,555 samples, 99.48%)</title><rect x="13.2" y="387.0" width="1173.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="16.2" y="398.0">RequestHandler1_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (7 samples, 0.08%)</title><rect x="13.2" y="371.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.2" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (7 samples, 0.08%)</title><rect x="13.2" y="355.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="16.2" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.06%)</title><rect x="13.2" y="339.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.2" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (5 samples, 0.06%)</title><rect x="13.2" y="323.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.2" y="334.0"></text>
</g>
<g>
<title>byte[] (5 samples, 0.06%)</title><rect x="13.2" y="307.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="16.2" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (2 samples, 0.02%)</title><rect x="13.8" y="339.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="16.8" y="350.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (2 samples, 0.02%)</title><rect x="13.8" y="323.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="16.8" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/ServiceImpl.get (8,547 samples, 99.38%)</title><rect x="14.3" y="371.0" width="1172.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="17.3" y="382.0">ru/mail/polis/service/gogun/ServiceImpl.get</text>
</g>
<g>
<title>one/nio/http/Response.ok (6 samples, 0.07%)</title><rect x="14.4" y="355.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.4" y="366.0"></text>
</g>
<g>
<title>one.nio.http.Response (2 samples, 0.02%)</title><rect x="14.4" y="339.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="17.4" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (4 samples, 0.05%)</title><rect x="14.7" y="339.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.7" y="350.0"></text>
</g>
<g>
<title>java.lang.String (2 samples, 0.02%)</title><rect x="14.9" y="323.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="17.9" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (8,535 samples, 99.24%)</title><rect x="15.2" y="355.0" width="1171.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.2" y="366.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (32 samples, 0.37%)</title><rect x="15.2" y="339.0" width="4.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="18.2" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (32 samples, 0.37%)</title><rect x="15.2" y="323.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="18.2" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (32 samples, 0.37%)</title><rect x="15.2" y="307.0" width="4.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="18.2" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (32 samples, 0.37%)</title><rect x="15.2" y="291.0" width="4.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="18.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (32 samples, 0.37%)</title><rect x="15.2" y="275.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.2" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (29 samples, 0.34%)</title><rect x="15.2" y="259.0" width="4.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="18.2" y="270.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (9 samples, 0.10%)</title><rect x="15.2" y="243.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="18.2" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (9 samples, 0.10%)</title><rect x="15.2" y="227.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.2" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (9 samples, 0.10%)</title><rect x="15.2" y="211.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="18.2" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.10%)</title><rect x="15.2" y="195.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="18.2" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 0.10%)</title><rect x="15.2" y="179.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="18.2" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$144/1104147917.compare (9 samples, 0.10%)</title><rect x="15.2" y="163.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="18.2" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (9 samples, 0.10%)</title><rect x="15.2" y="147.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.2" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$142/1038855882.compare (9 samples, 0.10%)</title><rect x="15.2" y="131.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.2" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (9 samples, 0.10%)</title><rect x="15.2" y="115.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="18.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row$$Lambda$141/518147676.apply (9 samples, 0.10%)</title><rect x="15.2" y="99.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="18.2" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row.getKey (9 samples, 0.10%)</title><rect x="15.2" y="83.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="18.2" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (9 samples, 0.10%)</title><rect x="15.2" y="67.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.2" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (9 samples, 0.10%)</title><rect x="15.2" y="51.0" width="1.2" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="18.2" y="62.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (20 samples, 0.23%)</title><rect x="16.4" y="243.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="19.4" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (20 samples, 0.23%)</title><rect x="16.4" y="227.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.4" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (20 samples, 0.23%)</title><rect x="16.4" y="211.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="19.4" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (20 samples, 0.23%)</title><rect x="16.4" y="195.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="19.4" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (20 samples, 0.23%)</title><rect x="16.4" y="179.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="19.4" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (20 samples, 0.23%)</title><rect x="16.4" y="163.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="19.4" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (16 samples, 0.19%)</title><rect x="16.4" y="147.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.4" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable$1.next (16 samples, 0.19%)</title><rect x="16.4" y="131.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="19.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable$1.next (16 samples, 0.19%)</title><rect x="16.4" y="115.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable.row (16 samples, 0.19%)</title><rect x="16.4" y="99.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.4" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (8 samples, 0.09%)</title><rect x="16.4" y="83.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="19.4" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6 samples, 0.07%)</title><rect x="16.4" y="67.0" width="0.9" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="19.4" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="17.3" y="67.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="20.3" y="78.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.02%)</title><rect x="17.3" y="51.0" width="0.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="20.3" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.gogun.Row (2 samples, 0.02%)</title><rect x="17.5" y="83.0" width="0.3" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="20.5" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable.key (5 samples, 0.06%)</title><rect x="18.0" y="83.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="21.0" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (5 samples, 0.06%)</title><rect x="18.0" y="67.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="21.0" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3 samples, 0.03%)</title><rect x="18.0" y="51.0" width="0.4" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="21.0" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.02%)</title><rect x="18.4" y="51.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.4" y="62.0"></text>
</g>
<g>
<title>byte[] (2 samples, 0.02%)</title><rect x="18.4" y="35.0" width="0.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="21.4" y="46.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$144/1104147917.compare (4 samples, 0.05%)</title><rect x="18.6" y="147.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="21.6" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (4 samples, 0.05%)</title><rect x="18.6" y="131.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="21.6" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$142/1038855882.compare (4 samples, 0.05%)</title><rect x="18.6" y="115.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="21.6" y="126.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (4 samples, 0.05%)</title><rect x="18.6" y="99.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="21.6" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row$$Lambda$141/518147676.apply (4 samples, 0.05%)</title><rect x="18.6" y="83.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="21.6" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row.getKey (4 samples, 0.05%)</title><rect x="18.6" y="67.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="21.6" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (4 samples, 0.05%)</title><rect x="18.6" y="51.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="21.6" y="62.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (4 samples, 0.05%)</title><rect x="18.6" y="35.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="21.6" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/DAOImpl$$Lambda$150/1579830941.apply (3 samples, 0.03%)</title><rect x="19.2" y="259.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="22.2" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row.getKey (3 samples, 0.03%)</title><rect x="19.2" y="243.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="22.2" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.03%)</title><rect x="19.2" y="227.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="22.2" y="238.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (3 samples, 0.03%)</title><rect x="19.2" y="211.0" width="0.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="22.2" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (5 samples, 0.06%)</title><rect x="19.6" y="339.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="22.6" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (5 samples, 0.06%)</title><rect x="19.6" y="323.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="22.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/DAOImpl$$Lambda$160/205151776.apply (5 samples, 0.06%)</title><rect x="19.6" y="307.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="22.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/DAOImpl.lambda$iterator$5 (5 samples, 0.06%)</title><rect x="19.6" y="291.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="22.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (2 samples, 0.02%)</title><rect x="19.6" y="275.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="22.6" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (2 samples, 0.02%)</title><rect x="19.6" y="259.0" width="0.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="22.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row.getKey (2 samples, 0.02%)</title><rect x="19.9" y="275.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="22.9" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.02%)</title><rect x="19.9" y="259.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="22.9" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (2 samples, 0.02%)</title><rect x="19.9" y="243.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="22.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/DAOImpl.iterator (8,497 samples, 98.80%)</title><rect x="20.4" y="339.0" width="1165.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="23.4" y="350.0">ru/mail/polis/dao/gogun/DAOImpl.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (6 samples, 0.07%)</title><rect x="20.4" y="323.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="23.4" y="334.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (6 samples, 0.07%)</title><rect x="20.4" y="307.0" width="0.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="23.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/DAOImpl.rowIterator (8,490 samples, 98.72%)</title><rect x="21.4" y="323.0" width="1164.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="24.4" y="334.0">ru/mail/polis/dao/gogun/DAOImpl.rowIterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (833 samples, 9.69%)</title><rect x="21.4" y="307.0" width="114.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="24.4" y="318.0">com/google/com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (833 samples, 9.69%)</title><rect x="21.4" y="291.0" width="114.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="24.4" y="302.0">com/google/com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (25 samples, 0.29%)</title><rect x="21.5" y="275.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="24.5" y="286.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (25 samples, 0.29%)</title><rect x="21.5" y="259.0" width="3.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="24.5" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (3 samples, 0.03%)</title><rect x="25.1" y="275.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.1" y="286.0"></text>
</g>
<g>
<title>java.lang.Object[] (3 samples, 0.03%)</title><rect x="25.1" y="259.0" width="0.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="28.1" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (803 samples, 9.34%)</title><rect x="25.5" y="275.0" width="110.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.5" y="286.0">java/util/Pri..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (803 samples, 9.34%)</title><rect x="25.5" y="259.0" width="110.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="28.5" y="270.0">java/util/Pri..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (13 samples, 0.15%)</title><rect x="25.5" y="243.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="28.5" y="254.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (13 samples, 0.15%)</title><rect x="25.5" y="227.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.5" y="238.0"></text>
</g>
<g>
<title>java.lang.Object[] (13 samples, 0.15%)</title><rect x="25.5" y="211.0" width="1.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="28.5" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (790 samples, 9.19%)</title><rect x="27.3" y="243.0" width="108.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="30.3" y="254.0">java/util/Pri..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (790 samples, 9.19%)</title><rect x="27.3" y="227.0" width="108.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.3" y="238.0">java/util/Pri..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (790 samples, 9.19%)</title><rect x="27.3" y="211.0" width="108.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.3" y="222.0">com/google/co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (790 samples, 9.19%)</title><rect x="27.3" y="195.0" width="108.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.3" y="206.0">com/google/co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (457 samples, 5.31%)</title><rect x="27.3" y="179.0" width="62.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="30.3" y="190.0">com/go..</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable$1.next (457 samples, 5.31%)</title><rect x="27.3" y="163.0" width="62.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="30.3" y="174.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable$1.next (457 samples, 5.31%)</title><rect x="27.3" y="147.0" width="62.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="30.3" y="158.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable.row (457 samples, 5.31%)</title><rect x="27.3" y="131.0" width="62.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.3" y="142.0">ru/mai..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (273 samples, 3.17%)</title><rect x="27.3" y="115.0" width="37.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="30.3" y="126.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (178 samples, 2.07%)</title><rect x="27.3" y="99.0" width="24.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="30.3" y="110.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (95 samples, 1.10%)</title><rect x="51.7" y="99.0" width="13.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="54.7" y="110.0"></text>
</g>
<g>
<title>byte[] (95 samples, 1.10%)</title><rect x="51.7" y="83.0" width="13.0" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="54.7" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.gogun.Row (23 samples, 0.27%)</title><rect x="64.7" y="115.0" width="3.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="67.7" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.gogun.Value (17 samples, 0.20%)</title><rect x="67.9" y="115.0" width="2.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="70.9" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable.key (125 samples, 1.45%)</title><rect x="70.2" y="115.0" width="17.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="73.2" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (125 samples, 1.45%)</title><rect x="70.2" y="99.0" width="17.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="73.2" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (47 samples, 0.55%)</title><rect x="70.2" y="83.0" width="6.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="73.2" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (78 samples, 0.91%)</title><rect x="76.7" y="83.0" width="10.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="79.7" y="94.0"></text>
</g>
<g>
<title>byte[] (78 samples, 0.91%)</title><rect x="76.7" y="67.0" width="10.7" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="79.7" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Value.&lt;init&gt; (19 samples, 0.22%)</title><rect x="87.4" y="115.0" width="2.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="90.4" y="126.0"></text>
</g>
<g>
<title>java/util/Optional.of (19 samples, 0.22%)</title><rect x="87.4" y="99.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="90.4" y="110.0"></text>
</g>
<g>
<title>java.util.Optional (19 samples, 0.22%)</title><rect x="87.4" y="83.0" width="2.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="90.4" y="94.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$144/1104147917.compare (333 samples, 3.87%)</title><rect x="90.0" y="179.0" width="45.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.0" y="190.0">java..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (333 samples, 3.87%)</title><rect x="90.0" y="163.0" width="45.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="93.0" y="174.0">java..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$142/1038855882.compare (333 samples, 3.87%)</title><rect x="90.0" y="147.0" width="45.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="93.0" y="158.0">java..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (333 samples, 3.87%)</title><rect x="90.0" y="131.0" width="45.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="93.0" y="142.0">java..</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row$$Lambda$141/518147676.apply (333 samples, 3.87%)</title><rect x="90.0" y="115.0" width="45.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="93.0" y="126.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row.getKey (333 samples, 3.87%)</title><rect x="90.0" y="99.0" width="45.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="93.0" y="110.0">ru/m..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (333 samples, 3.87%)</title><rect x="90.0" y="83.0" width="45.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="93.0" y="94.0">java..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (333 samples, 3.87%)</title><rect x="90.0" y="67.0" width="45.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="93.0" y="78.0">java..</text>
</g>
<g>
<title>java/lang/Iterable.forEach (7,599 samples, 88.36%)</title><rect x="135.7" y="307.0" width="1042.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="138.7" y="318.0">java/lang/Iterable.forEach</text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (3 samples, 0.03%)</title><rect x="135.7" y="291.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="138.7" y="302.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (3 samples, 0.03%)</title><rect x="135.7" y="275.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="138.7" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (3 samples, 0.03%)</title><rect x="135.7" y="259.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="138.7" y="270.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (3 samples, 0.03%)</title><rect x="135.7" y="243.0" width="0.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="138.7" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/DAOImpl$$Lambda$133/1594018767.accept (7,595 samples, 88.31%)</title><rect x="136.2" y="291.0" width="1042.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="139.2" y="302.0">ru/mail/polis/dao/gogun/DAOImpl$$Lambda$133/1594018767.accept</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/DAOImpl.lambda$rowIterator$7 (7,595 samples, 88.31%)</title><rect x="136.2" y="275.0" width="1042.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="139.2" y="286.0">ru/mail/polis/dao/gogun/DAOImpl.lambda$rowIterator$7</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable.iterator (7,595 samples, 88.31%)</title><rect x="136.2" y="259.0" width="1042.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="139.2" y="270.0">ru/mail/polis/dao/gogun/SSTable.iterator</text>
</g>
<g>
<title>ru.mail.polis.dao.gogun.SSTable$1 (71 samples, 0.83%)</title><rect x="136.2" y="243.0" width="9.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="139.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable$1.&lt;init&gt; (7,524 samples, 87.49%)</title><rect x="146.0" y="243.0" width="1032.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="149.0" y="254.0">ru/mail/polis/dao/gogun/SSTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable.binarySearch (7,524 samples, 87.49%)</title><rect x="146.0" y="227.0" width="1032.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="149.0" y="238.0">ru/mail/polis/dao/gogun/SSTable.binarySearch</text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable.key (7,524 samples, 87.49%)</title><rect x="146.0" y="211.0" width="1032.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="149.0" y="222.0">ru/mail/polis/dao/gogun/SSTable.key</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (7,524 samples, 87.49%)</title><rect x="146.0" y="195.0" width="1032.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="149.0" y="206.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3,077 samples, 35.78%)</title><rect x="146.0" y="179.0" width="422.2" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="149.0" y="190.0">java.nio.HeapByteBuffer</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4,447 samples, 51.71%)</title><rect x="568.2" y="179.0" width="610.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="571.2" y="190.0">java/nio/HeapByteBuffer.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (4,447 samples, 51.71%)</title><rect x="568.2" y="163.0" width="610.1" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="571.2" y="174.0">byte[]</text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (13 samples, 0.15%)</title><rect x="1178.5" y="307.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1181.5" y="318.0"></text>
</g>
<g>
<title>java.lang.Object[] (13 samples, 0.15%)</title><rect x="1178.5" y="291.0" width="1.8" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="1181.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (38 samples, 0.44%)</title><rect x="1180.3" y="307.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1183.3" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (37 samples, 0.43%)</title><rect x="1180.4" y="291.0" width="5.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1183.4" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (37 samples, 0.43%)</title><rect x="1180.4" y="275.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1183.4" y="286.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (10 samples, 0.12%)</title><rect x="1180.4" y="259.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1183.4" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (10 samples, 0.12%)</title><rect x="1180.4" y="243.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1183.4" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (10 samples, 0.12%)</title><rect x="1180.4" y="227.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1183.4" y="238.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10 samples, 0.12%)</title><rect x="1180.4" y="211.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1183.4" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (10 samples, 0.12%)</title><rect x="1180.4" y="195.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1183.4" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$144/1104147917.compare (10 samples, 0.12%)</title><rect x="1180.4" y="179.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1183.4" y="190.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (10 samples, 0.12%)</title><rect x="1180.4" y="163.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1183.4" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$142/1038855882.compare (10 samples, 0.12%)</title><rect x="1180.4" y="147.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1183.4" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (10 samples, 0.12%)</title><rect x="1180.4" y="131.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1183.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row$$Lambda$141/518147676.apply (10 samples, 0.12%)</title><rect x="1180.4" y="115.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1183.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row.getKey (10 samples, 0.12%)</title><rect x="1180.4" y="99.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1183.4" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (10 samples, 0.12%)</title><rect x="1180.4" y="83.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1183.4" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (10 samples, 0.12%)</title><rect x="1180.4" y="67.0" width="1.4" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="1183.4" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (27 samples, 0.31%)</title><rect x="1181.8" y="259.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1184.8" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (27 samples, 0.31%)</title><rect x="1181.8" y="243.0" width="3.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1184.8" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (27 samples, 0.31%)</title><rect x="1181.8" y="227.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1184.8" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (27 samples, 0.31%)</title><rect x="1181.8" y="211.0" width="3.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1184.8" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (27 samples, 0.31%)</title><rect x="1181.8" y="195.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1184.8" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (27 samples, 0.31%)</title><rect x="1181.8" y="179.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1184.8" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (19 samples, 0.22%)</title><rect x="1181.8" y="163.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1184.8" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable$1.next (19 samples, 0.22%)</title><rect x="1181.8" y="147.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1184.8" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable$1.next (19 samples, 0.22%)</title><rect x="1181.8" y="131.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1184.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable.row (19 samples, 0.22%)</title><rect x="1181.8" y="115.0" width="2.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1184.8" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (10 samples, 0.12%)</title><rect x="1181.8" y="99.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1184.8" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6 samples, 0.07%)</title><rect x="1181.8" y="83.0" width="0.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1184.8" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.05%)</title><rect x="1182.6" y="83.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1185.6" y="94.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.05%)</title><rect x="1182.6" y="67.0" width="0.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1185.6" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.gogun.Row (4 samples, 0.05%)</title><rect x="1183.1" y="99.0" width="0.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1186.1" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/SSTable.key (5 samples, 0.06%)</title><rect x="1183.7" y="99.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1186.7" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (5 samples, 0.06%)</title><rect x="1183.7" y="83.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1186.7" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (2 samples, 0.02%)</title><rect x="1183.7" y="67.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="1186.7" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="1184.0" y="67.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1187.0" y="78.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="1184.0" y="51.0" width="0.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1187.0" y="62.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$144/1104147917.compare (8 samples, 0.09%)</title><rect x="1184.4" y="163.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1187.4" y="174.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (8 samples, 0.09%)</title><rect x="1184.4" y="147.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1187.4" y="158.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$142/1038855882.compare (8 samples, 0.09%)</title><rect x="1184.4" y="131.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1187.4" y="142.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (8 samples, 0.09%)</title><rect x="1184.4" y="115.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1187.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row$$Lambda$141/518147676.apply (8 samples, 0.09%)</title><rect x="1184.4" y="99.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1187.4" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/Row.getKey (8 samples, 0.09%)</title><rect x="1184.4" y="83.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1187.4" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (8 samples, 0.09%)</title><rect x="1184.4" y="67.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1187.4" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (8 samples, 0.09%)</title><rect x="1184.4" y="51.0" width="1.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1187.4" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/gogun/MemTable.iterator (6 samples, 0.07%)</title><rect x="1185.5" y="307.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1188.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (2 samples, 0.02%)</title><rect x="1185.7" y="291.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1188.7" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (2 samples, 0.02%)</title><rect x="1185.7" y="275.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1188.7" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.02%)</title><rect x="1186.0" y="291.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1189.0" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.02%)</title><rect x="1186.0" y="275.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1189.0" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (2 samples, 0.02%)</title><rect x="1186.0" y="259.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1189.0" y="270.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (2 samples, 0.02%)</title><rect x="1186.0" y="243.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1189.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/gogun/ServiceImpl.getArray (4 samples, 0.05%)</title><rect x="1186.3" y="355.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1189.3" y="366.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.05%)</title><rect x="1186.3" y="339.0" width="0.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1189.3" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.05%)</title><rect x="1187.0" y="387.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1190.0" y="398.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.05%)</title><rect x="1187.0" y="371.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1190.0" y="382.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.05%)</title><rect x="1187.0" y="355.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1190.0" y="366.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="1187.1" y="339.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1190.1" y="350.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.03%)</title><rect x="1187.1" y="323.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="1190.1" y="334.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (15 samples, 0.17%)</title><rect x="1187.5" y="419.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1190.5" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.15%)</title><rect x="1187.8" y="403.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1190.8" y="414.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.15%)</title><rect x="1187.8" y="387.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1190.8" y="398.0"></text>
</g>
<g>
<title>char[] (9 samples, 0.10%)</title><rect x="1187.8" y="371.0" width="1.2" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1190.8" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.05%)</title><rect x="1189.0" y="371.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1192.0" y="382.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.05%)</title><rect x="1189.0" y="355.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1192.0" y="366.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4 samples, 0.05%)</title><rect x="1189.0" y="339.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1192.0" y="350.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.05%)</title><rect x="1189.0" y="323.0" width="0.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1192.0" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="1189.6" y="419.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1192.6" y="430.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="1189.6" y="403.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1192.6" y="414.0"></text>
</g>
</g>
</svg>
